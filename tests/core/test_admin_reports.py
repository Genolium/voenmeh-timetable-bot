from datetime import datetime, timedelta
from unittest.mock import AsyncMock, MagicMock, patch

import pytest
from aiogram import Bot

from core.admin_reports import AdminReportsGenerator, send_daily_reports, send_monthly_reports, send_weekly_reports


@pytest.fixture
def mock_bot():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–æ–∫–∞ Bot."""
    bot = AsyncMock(spec=Bot)
    bot.send_message = AsyncMock()
    return bot


@pytest.fixture
def mock_user_data_manager():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–æ–∫–∞ UserDataManager."""
    manager = AsyncMock()
    manager.get_admin_users.return_value = [123456789, 987654321]
    manager.get_total_users_count.return_value = 1000
    manager.get_active_users_by_period.return_value = 500
    manager.get_subscribed_users_count.return_value = 800
    manager.get_unsubscribed_count.return_value = 50
    manager.get_subscription_breakdown.return_value = {
        "evening": 400,
        "morning": 300,
        "reminders": 200,
    }
    manager.get_top_groups.return_value = [
        ("–û735–ë", 150),
        ("–û735–ê", 120),
        ("–û734–ë", 100),
        ("–û734–ê", 90),
        ("–û733–ë", 80),
    ]
    manager.get_group_distribution.return_value = {
        "1 —Å—Ç—É–¥–µ–Ω—Ç": 5,
        "2-5 —Å—Ç—É–¥–µ–Ω—Ç–æ–≤": 15,
        "6-10 —Å—Ç—É–¥–µ–Ω—Ç–æ–≤": 10,
        "11+ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤": 8,
    }
    manager.get_new_users_count.return_value = 100
    return manager


@pytest.fixture
def admin_reports_generator(mock_bot, mock_user_data_manager):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è AdminReportsGenerator."""
    return AdminReportsGenerator(mock_bot, mock_user_data_manager)


class TestAdminReportsGenerator:
    """–¢–µ—Å—Ç—ã –¥–ª—è AdminReportsGenerator."""

    @pytest.mark.asyncio
    async def test_generate_daily_report_success(self, admin_reports_generator, mock_user_data_manager):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞."""
        # –ú–æ–∫–∞–µ–º gather_stats
        mock_user_data_manager.gather_stats.return_value = (
            1000,
            500,
            700,
            900,
            800,
            50,  # total, dau, wau, mau, subscribed, unsubscribed
            {"evening": 400, "morning": 300, "reminders": 200},  # breakdown
            [("–û735–ë", 150), ("–û735–ê", 120)],  # top_groups
            {"1 —Å—Ç—É–¥–µ–Ω—Ç": 5, "2-5 —Å—Ç—É–¥–µ–Ω—Ç–æ–≤": 15},  # group_dist
        )

        # –ú–æ–∫–∞–µ–º Prometheus –º–µ—Ç—Ä–∏–∫–∏
        with patch.object(admin_reports_generator, "_get_prometheus_metrics") as mock_metrics:
            mock_metrics.return_value = {
                "tasks_sent": 150,
                "errors_count": 2,
                "retries_count": 5,
                "schedule_updates": 3,
                "last_update": "22.10.2025 10:00",
            }

            report = await admin_reports_generator.generate_daily_report()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç—á—ë—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            assert "üìä" in report
            assert "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç" in report
            assert "1000" in report  # total users
            assert "500" in report  # daily active
            assert "–û735–ë" in report  # top group
            assert "150" in report  # tasks sent

    @pytest.mark.asyncio
    async def test_generate_daily_report_error(self, admin_reports_generator, mock_user_data_manager):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞."""
        # –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É –≤ gather_stats
        mock_user_data_manager.gather_stats.side_effect = Exception("Database error")

        report = await admin_reports_generator.generate_daily_report()

        assert "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞" in report

    @pytest.mark.asyncio
    async def test_generate_weekly_report_success(self, admin_reports_generator, mock_user_data_manager):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞."""
        # –ú–æ–∫–∞–µ–º Prometheus –º–µ—Ç—Ä–∏–∫–∏
        with patch.object(admin_reports_generator, "_get_prometheus_metrics_weekly") as mock_metrics:
            mock_metrics.return_value = {
                "tasks_sent_total": 1050,
                "errors_total": 14,
                "retries_total": 35,
                "schedule_updates": 21,
                "peak_activity": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 08:00-09:00",
            }

            report = await admin_reports_generator.generate_weekly_report()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç—á—ë—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            assert "üìä" in report
            assert "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç" in report
            assert "1050" in report  # tasks sent
            assert "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫" in report  # peak activity

    @pytest.mark.asyncio
    async def test_generate_monthly_report_success(self, admin_reports_generator, mock_user_data_manager):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞."""
        # –ú–æ–∫–∞–µ–º Prometheus –º–µ—Ç—Ä–∏–∫–∏
        with patch.object(admin_reports_generator, "_get_prometheus_metrics_monthly") as mock_metrics:
            mock_metrics.return_value = {
                "tasks_sent_total": 4200,
                "errors_total": 56,
                "retries_total": 140,
                "schedule_updates": 90,
                "avg_daily_users": 1250,
                "top_features": ["schedule_view", "settings", "feedback"],
            }

            report = await admin_reports_generator.generate_monthly_report()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç—á—ë—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            assert "üìä" in report
            assert "–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç" in report
            assert "4200" in report  # tasks sent
            assert "schedule_view" in report  # top features

    def test_format_daily_report_structure(self, admin_reports_generator):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞."""
        today = "22.10.2025"
        prometheus_metrics = {
            "tasks_sent": 150,
            "errors_count": 2,
            "retries_count": 5,
            "schedule_updates": 3,
            "last_update": "22.10.2025 10:00",
        }

        report = admin_reports_generator._format_daily_report(
            today,
            1000,
            500,
            700,
            900,
            800,
            50,
            {"evening": 400, "morning": 300, "reminders": 200},
            [("–û735–ë", 150), ("–û735–ê", 120)],
            {"1 —Å—Ç—É–¥–µ–Ω—Ç": 5, "2-5 —Å—Ç—É–¥–µ–Ω—Ç–æ–≤": 15},
            prometheus_metrics,
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç—á—ë—Ç–∞
        assert "üìä" in report
        assert "üë•" in report  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        assert "üîî" in report  # –ü–æ–¥–ø–∏—Å–∫–∏
        assert "üéì" in report  # –ì—Ä—É–ø–ø—ã
        assert "‚ö°" in report  # –ú–µ—Ç—Ä–∏–∫–∏
        assert "1000" in report
        assert "–û735–ë" in report

    def test_format_weekly_report_structure(self, admin_reports_generator):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞."""
        prometheus_metrics = {
            "tasks_sent_total": 1050,
            "errors_total": 14,
            "retries_total": 35,
            "schedule_updates": 21,
            "peak_activity": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 08:00-09:00",
        }

        report = admin_reports_generator._format_weekly_report(
            100, 500, 1000, 800, [("–û735–ë", 150), ("–û735–ê", 120)], prometheus_metrics
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç—á—ë—Ç–∞
        assert "üìä" in report
        assert "üìà" in report  # –ü—Ä–∏—Ä–æ—Å—Ç
        assert "üîî" in report  # –ü–æ–¥–ø–∏—Å–∫–∏
        assert "‚ö°" in report  # –ú–µ—Ç—Ä–∏–∫–∏
        assert "1050" in report
        assert "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫" in report

    def test_format_monthly_report_structure(self, admin_reports_generator):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞."""
        prometheus_metrics = {
            "tasks_sent_total": 4200,
            "errors_total": 56,
            "retries_total": 140,
            "schedule_updates": 90,
            "avg_daily_users": 1250,
            "top_features": ["schedule_view", "settings", "feedback"],
        }

        report = admin_reports_generator._format_monthly_report(
            200, 800, 1000, 800, [("–û735–ë", 150), ("–û735–ê", 120)], prometheus_metrics
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç—á—ë—Ç–∞
        assert "üìä" in report
        assert "üìà" in report  # –ü—Ä–∏—Ä–æ—Å—Ç
        assert "üèÜ" in report  # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        assert "4200" in report
        assert "schedule_view" in report


class TestAdminReportsSending:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤."""

    @pytest.mark.asyncio
    async def test_send_daily_reports_success(self, mock_bot, mock_user_data_manager):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤."""
        with patch("core.admin_reports.AdminReportsGenerator") as mock_generator_class:
            mock_generator = AsyncMock()
            mock_generator.generate_daily_report.return_value = "üìä Daily Report"
            mock_generator_class.return_value = mock_generator

            await send_daily_reports(mock_bot, mock_user_data_manager)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏ –≤—ã–∑–≤–∞–Ω
            mock_generator_class.assert_called_once_with(mock_bot, mock_user_data_manager)
            mock_generator.generate_daily_report.assert_called_once()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            assert mock_bot.send_message.call_count == 2  # –î–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    @pytest.mark.asyncio
    async def test_send_daily_reports_no_admins(self, mock_bot, mock_user_data_manager):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
        mock_user_data_manager.get_admin_users.return_value = []

        await send_daily_reports(mock_bot, mock_user_data_manager)

        # –ù–µ –¥–æ–ª–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        mock_bot.send_message.assert_not_called()

    @pytest.mark.asyncio
    async def test_send_daily_reports_send_error(self, mock_bot, mock_user_data_manager):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤."""
        # –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        mock_bot.send_message.side_effect = Exception("Send message failed")

        # –ù–µ –¥–æ–ª–∂–Ω–æ –ø–∞–¥–∞—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        await send_daily_reports(mock_bot, mock_user_data_manager)

        # –î–æ–ª–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        assert mock_bot.send_message.call_count == 2

    @pytest.mark.asyncio
    async def test_send_weekly_reports_success(self, mock_bot, mock_user_data_manager):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤."""
        with patch("core.admin_reports.AdminReportsGenerator") as mock_generator_class:
            mock_generator = AsyncMock()
            mock_generator.generate_weekly_report.return_value = "üìä Weekly Report"
            mock_generator_class.return_value = mock_generator

            await send_weekly_reports(mock_bot, mock_user_data_manager)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏ –≤—ã–∑–≤–∞–Ω
            mock_generator_class.assert_called_once_with(mock_bot, mock_user_data_manager)
            mock_generator.generate_weekly_report.assert_called_once()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            assert mock_bot.send_message.call_count == 2

    @pytest.mark.asyncio
    async def test_send_monthly_reports_success(self, mock_bot, mock_user_data_manager):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤."""
        with patch("core.admin_reports.AdminReportsGenerator") as mock_generator_class:
            mock_generator = AsyncMock()
            mock_generator.generate_monthly_report.return_value = "üìä Monthly Report"
            mock_generator_class.return_value = mock_generator

            await send_monthly_reports(mock_bot, mock_user_data_manager)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏ –≤—ã–∑–≤–∞–Ω
            mock_generator_class.assert_called_once_with(mock_bot, mock_user_data_manager)
            mock_generator.generate_monthly_report.assert_called_once()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            assert mock_bot.send_message.call_count == 2

    @pytest.mark.asyncio
    async def test_send_reports_exception_handling(self, mock_bot, mock_user_data_manager):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤."""
        # –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ –æ—Ç—á—ë—Ç–∞
        with patch("core.admin_reports.AdminReportsGenerator") as mock_generator_class:
            mock_generator = AsyncMock()
            mock_generator.generate_daily_report.side_effect = Exception("Report generation failed")
            mock_generator_class.return_value = mock_generator

            # –ù–µ –¥–æ–ª–∂–Ω–æ –ø–∞–¥–∞—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            await send_daily_reports(mock_bot, mock_user_data_manager)
