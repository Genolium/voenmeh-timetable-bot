"""
–¢–µ—Å—Ç—ã –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ–º–µ—Å—Ç—Ä–æ–≤.
"""

from datetime import date, datetime
from unittest.mock import AsyncMock, MagicMock

import pytest
from sqlalchemy.ext.asyncio import async_sessionmaker

from core.db.models import SemesterSettings
from core.semester_settings import SemesterSettingsManager


@pytest.fixture
def mock_session_factory():
    """–ú–æ–∫–∞–µ—Ç session_factory –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    return MagicMock()


@pytest.fixture
def settings_manager(mock_session_factory):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –º–æ–∫–æ–º session_factory."""
    return SemesterSettingsManager(mock_session_factory)


@pytest.mark.asyncio
async def test_get_semester_settings_no_settings(settings_manager, mock_session_factory):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∫–æ–≥–¥–∞ –∏—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ."""
    # –ú–æ–∫–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    mock_session = AsyncMock()
    mock_session_factory.return_value.__aenter__.return_value = mock_session
    mock_result = MagicMock()
    mock_result.scalar_one_or_none.return_value = None
    mock_session.execute.return_value = mock_result

    result = await settings_manager.get_semester_settings()

    assert result is None
    mock_session.execute.assert_called_once()


@pytest.mark.asyncio
async def test_get_semester_settings_with_settings(settings_manager, mock_session_factory):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∫–æ–≥–¥–∞ –æ–Ω–∏ –µ—Å—Ç—å –≤ –±–∞–∑–µ."""
    # –ú–æ–∫–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    mock_settings = MagicMock()
    mock_settings.fall_semester_start = date(2024, 9, 1)
    mock_settings.spring_semester_start = date(2025, 2, 9)

    mock_session = AsyncMock()
    mock_session_factory.return_value.__aenter__.return_value = mock_session
    mock_result = MagicMock()
    mock_result.scalar_one_or_none.return_value = mock_settings
    mock_session.execute.return_value = mock_result

    result = await settings_manager.get_semester_settings()

    assert result == (date(2024, 9, 1), date(2025, 2, 9))
    mock_session.execute.assert_called_once()


@pytest.mark.asyncio
async def test_update_semester_settings_new(settings_manager, mock_session_factory):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ–º–µ—Å—Ç—Ä–æ–≤."""
    # –ú–æ–∫–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    mock_session = AsyncMock()
    mock_session_factory.return_value.__aenter__.return_value = mock_session
    mock_result = MagicMock()
    mock_result.scalar_one_or_none.return_value = None
    mock_session.execute.return_value = mock_result

    fall_start = date(2024, 9, 1)
    spring_start = date(2025, 2, 9)
    updated_by = 123456

    result = await settings_manager.update_semester_settings(fall_start, spring_start, updated_by)

    assert result is True
    mock_session.add.assert_called_once()
    mock_session.commit.assert_called_once()


@pytest.mark.asyncio
async def test_update_semester_settings_existing(settings_manager, mock_session_factory):
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ–º–µ—Å—Ç—Ä–æ–≤."""
    # –ú–æ–∫–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    mock_existing_settings = MagicMock()
    mock_existing_settings.id = 1

    mock_session = AsyncMock()
    mock_session_factory.return_value.__aenter__.return_value = mock_session
    mock_result = MagicMock()
    mock_result.scalar_one_or_none.return_value = mock_existing_settings
    mock_session.execute.return_value = mock_result

    fall_start = date(2024, 9, 15)  # –ò–∑–º–µ–Ω–µ–Ω–Ω–∞—è –¥–∞—Ç–∞
    spring_start = date(2025, 2, 15)  # –ò–∑–º–µ–Ω–µ–Ω–Ω–∞—è –¥–∞—Ç–∞
    updated_by = 123456

    result = await settings_manager.update_semester_settings(fall_start, spring_start, updated_by)

    assert result is True
    mock_session.execute.assert_called()  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ update
    mock_session.commit.assert_called_once()


@pytest.mark.asyncio
async def test_get_formatted_settings_with_settings(settings_manager, mock_session_factory):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    # –ú–æ–∫–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    mock_settings = MagicMock()
    mock_settings.fall_semester_start = date(2024, 9, 1)
    mock_settings.spring_semester_start = date(2025, 2, 9)

    mock_session = AsyncMock()
    mock_session_factory.return_value.__aenter__.return_value = mock_session
    mock_result = MagicMock()
    mock_result.scalar_one_or_none.return_value = mock_settings
    mock_session.execute.return_value = mock_result

    result = await settings_manager.get_formatted_settings()

    assert "üçÇ" in result
    assert "üå∏" in result
    assert "01.09.2024" in result
    assert "09.02.2025" in result
    assert "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–º–µ—Å—Ç—Ä–æ–≤" in result


@pytest.mark.asyncio
async def test_get_formatted_settings_no_settings(settings_manager, mock_session_factory):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∫–æ–≥–¥–∞ –∏—Ö –Ω–µ—Ç."""
    # –ú–æ–∫–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    mock_session = AsyncMock()
    mock_session_factory.return_value.__aenter__.return_value = mock_session
    mock_result = MagicMock()
    mock_result.scalar_one_or_none.return_value = None
    mock_session.execute.return_value = mock_result

    result = await settings_manager.get_formatted_settings()

    assert "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–º–µ—Å—Ç—Ä–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" in result
    assert "1 —Å–µ–Ω—Ç—è–±—Ä—è" in result
    assert "9 —Ñ–µ–≤—Ä–∞–ª—è" in result
