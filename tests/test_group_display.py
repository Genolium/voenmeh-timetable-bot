#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
"""

import asyncio
import os
from pathlib import Path
from core.image_generator import generate_schedule_image

async def test_group_display():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏."""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        "–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö": [
            {"subject": "–§–ò–ó–ò–ö–ê", "type": "–ª–∞–±", "room": "322", "time": "9:00 - 10:30", "start_time_raw": "9:00"},
            {"subject": "–ú–ê–¢–ï–ú–ê–¢–ò–ö–ê", "type": "–ª–µ–∫", "room": "101", "time": "10:50 - 12:20", "start_time_raw": "10:50"},
        ],
        "–í–¢–û–†–ù–ò–ö": [
            {"subject": "–ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–ï", "type": "–ø—Ä", "room": "205", "time": "9:00 - 10:30", "start_time_raw": "9:00"},
        ],
        "–°–†–ï–î–ê": [
            {"subject": "–•–ò–ú–ò–Ø", "type": "–ª–∞–±", "room": "301", "time": "9:00 - 10:30", "start_time_raw": "9:00"},
        ],
        "–ß–ï–¢–í–ï–†–ì": [
            {"subject": "–ò–°–¢–û–†–ò–Ø", "type": "–ª–µ–∫", "room": "201", "time": "9:00 - 10:30", "start_time_raw": "9:00"},
        ],
        "–ü–Ø–¢–ù–ò–¶–ê": [
            {"subject": "–ê–ù–ì–õ–ò–ô–°–ö–ò–ô", "type": "–ø—Ä", "room": "203", "time": "9:00 - 10:30", "start_time_raw": "9:00"},
        ],
        "–°–£–ë–ë–û–¢–ê": [
            {"subject": "–§–ò–ó–ö–£–õ–¨–¢–£–†–ê", "type": "", "room": "", "time": "9:00 - 10:30", "start_time_raw": "9:00"},
        ]
    }
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    output_dir = Path("test_output")
    output_dir.mkdir(exist_ok=True)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≥—Ä—É–ø–ø—ã
    test_groups = ["–û735–ë", "–ê101–°", "–ï211–ë"]
    week_types = [
        ("–ù–µ—á—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è", "test_odd"),
        ("–ß—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è", "test_even")
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")
    print("=" * 60)
    
    for group in test_groups:
        for week_type, filename_prefix in week_types:
            output_path = output_dir / f"{filename_prefix}_{group}.png"
            
            print(f"üì∏ –ì–µ–Ω–µ—Ä–∏—Ä—É—é: {group} - {week_type}")
            
            try:
                success = await generate_schedule_image(
                    schedule_data=test_data,
                    week_type=week_type,
                    group=group,
                    output_path=str(output_path)
                )
                
                if success and os.path.exists(output_path):
                    file_size = os.path.getsize(output_path) / (1024 * 1024)
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {output_path.name} ({file_size:.2f} –ú–ë)")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {output_path.name}")
                    
            except Exception as e:
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir.absolute()}")

if __name__ == "__main__":
    asyncio.run(test_group_display())
