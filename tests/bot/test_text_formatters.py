import pytest
from datetime import date, datetime, time
from unittest.mock import MagicMock, patch

from bot.text_formatters import (
    generate_dynamic_header, format_schedule_text, generate_evening_intro,
    generate_morning_intro, generate_reminder_text, UNSUBSCRIBE_FOOTER,
    format_teacher_schedule_text, format_classroom_schedule_text, format_full_week_text
)
from core.config import MOSCOW_TZ

@pytest.fixture
def lessons_sample():
    return [
        {'time': '09:00-10:30', 'subject': '–ú–∞—Ç–∞–Ω', 'start_time_raw': '09:00', 'end_time_raw': '10:30'},
        {'time': '10:40-12:10', 'subject': '–§–∏–∑–∏–∫–∞', 'start_time_raw': '10:40', 'end_time_raw': '12:10'}
    ]

@pytest.mark.parametrize("mock_time_str, expected_header", [
    ("08:00", "‚òÄÔ∏è <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!</b> –ü–µ—Ä–≤–∞—è –ø–∞—Ä–∞ –≤ 09:00."),
    ("09:30", "‚è≥ <b>–ò–¥–µ—Ç –ø–∞—Ä–∞:</b> –ú–∞—Ç–∞–Ω.\n–ó–∞–∫–æ–Ω—á–∏—Ç—Å—è –≤ 10:30."),
    ("10:35", "‚òïÔ∏è <b>–ü–µ—Ä–µ—Ä—ã–≤ –¥–æ 10:40.</b>\n–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞: –§–∏–∑–∏–∫–∞."),
    ("11:00", "‚è≥ <b>–ò–¥–µ—Ç –ø–∞—Ä–∞:</b> –§–∏–∑–∏–∫–∞.\n–ó–∞–∫–æ–Ω—á–∏—Ç—Å—è –≤ 12:10."),
    ("13:00", "‚úÖ <b>–ü–∞—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.</b> –û—Ç–¥—ã—Ö–∞–π—Ç–µ!"),
    ("04:00", "üåô <b>–ü–æ–∑–¥–Ω—è—è –Ω–æ—á—å.</b> –°–∫–æ—Ä–æ —É—Ç—Ä–æ!"),
])
def test_generate_dynamic_header_for_today(mocker, lessons_sample, mock_time_str, expected_header):
    today = datetime.now(MOSCOW_TZ).date()
    mock_time = time.fromisoformat(mock_time_str)
    mocked_now_dt = datetime.combine(today, mock_time, tzinfo=MOSCOW_TZ)
    
    mocker.patch('bot.text_formatters.datetime', MagicMock(now=lambda tz: mocked_now_dt, strptime=datetime.strptime))

    header, progress_bar = generate_dynamic_header(lessons_sample, today)
    
    assert header == expected_header
    assert "–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–Ω—è" in progress_bar

def test_generate_dynamic_header_for_future_day(lessons_sample):
    future_date = datetime.now(MOSCOW_TZ).date() + pytest.importorskip("datetime").timedelta(days=1)
    header, progress_bar = generate_dynamic_header(lessons_sample, future_date)
    assert header == ""
    assert progress_bar == ""

def test_generate_dynamic_header_no_lessons(mocker):
    today = datetime.now(MOSCOW_TZ).date()
    mocked_now_dt = datetime.combine(today, time(12, 0), tzinfo=MOSCOW_TZ)
    mocker.patch('bot.text_formatters.datetime', MagicMock(now=lambda tz: mocked_now_dt))
    
    header, progress_bar = generate_dynamic_header([], today)
    assert "–°–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç" in header
    assert progress_bar == ""

def test_format_schedule_text_with_error():
    text = format_schedule_text({'error': '–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'})
    assert "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" in text

def test_format_schedule_text_no_date():
    text = format_schedule_text({'lessons': []})
    assert "–î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" in text

def test_format_schedule_text_no_lessons():
    text = format_schedule_text({
        'date': date(2025, 1, 1),
        'day_name': '–°—Ä–µ–¥–∞',
        'week_name': '–ß–µ—Ç–Ω–∞—è',
        'lessons': []
    })
    assert "–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç" in text

def test_format_schedule_text_with_lesson_details():
    day_info = {
        'date': date(2025, 1, 1),
        'day_name': '–°—Ä–µ–¥–∞',
        'week_name': '–ß–µ—Ç–Ω–∞—è',
        'lessons': [
            {'time': '09:00-10:30', 'subject': '–ú–∞—Ç–∞–Ω', 'type': '–õ–µ–∫—Ü–∏—è', 'teachers': '–ò–≤–∞–Ω–æ–≤', 'room': '101'},
            {'time': '10:40-12:10', 'subject': '–§–∏–∑–∏–∫–∞'},
        ],
    }
    text = format_schedule_text(day_info)
    assert "–ú–∞—Ç–∞–Ω" in text and "–ò–≤–∞–Ω–æ–≤" in text and "101" in text
    assert "–§–∏–∑–∏–∫–∞" in text

def test_format_schedule_text_without_optional_fields():
    day_info = {
        'date': date(2025, 1, 1),
        'day_name': '–°—Ä–µ–¥–∞',
        'lessons': [
            {'time': '09:00-10:30', 'subject': '–ú–∞—Ç–∞–Ω'},
        ],
    }
    text = format_schedule_text(day_info)
    assert "–ú–∞—Ç–∞–Ω" in text
    assert "09:00-10:30" in text

class TestTeacherFormatter:
    def test_teacher_error_branch(self):
        assert "–û—à–∏–±–∫–∞" in format_teacher_schedule_text({'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'})

    def test_teacher_no_lessons(self):
        info = {'teacher': '–ü–µ—Ç—Ä–æ–≤', 'date': date(2025, 1, 2), 'day_name': '–ß–µ—Ç–≤–µ—Ä–≥', 'lessons': []}
        text = format_teacher_schedule_text(info)
        assert "–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç" in text

    def test_teacher_with_lessons(self):
        info = {
            'teacher': '–°–∏–¥–æ—Ä–æ–≤',
            'date': date(2025, 1, 2),
            'day_name': '–ß–µ—Ç–≤–µ—Ä–≥',
            'lessons': [
                {'time': '12:00-13:30', 'subject': '–¢–ê–£', 'groups': ['–û735–ë']},
            ],
        }
        text = format_teacher_schedule_text(info)
        assert "–¢–ê–£" in text and "–û735–ë" in text

    def test_teacher_with_room_info(self):
        info = {
            'teacher': '–ò–≤–∞–Ω–æ–≤',
            'date': date(2025, 1, 2),
            'day_name': '–ß–µ—Ç–≤–µ—Ä–≥',
            'lessons': [
                {'time': '09:00-10:30', 'subject': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', 'groups': ['–û735–ë'], 'room': '101'},
            ],
        }
        text = format_teacher_schedule_text(info)
        assert "üìç 101" in text

    def test_teacher_groups_deduplicated(self):
        info = {
            'teacher': '–ì–æ—Ç–∏–Ω',
            'date': date(2025, 9, 1),
            'day_name': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
            'lessons': [
                {
                    'time': '12:40-14:10',
                    'subject': '–ü–†–ï–î–°–¢.–ó–ù–ê–ù.–í –ò–°',
                    'groups': ['–û734–ë', '–û735–ë', '–û735–ë', '–û736–ë', '–û736–ë']
                }
            ],
        }
        text = format_teacher_schedule_text(info)
        assert text.count('–û735–ë') == 1
        assert text.count('–û736–ë') == 1

class TestClassroomFormatter:
    def test_classroom_error_branch(self):
        assert "–û—à–∏–±–∫–∞" in format_classroom_schedule_text({'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'})

    def test_classroom_no_lessons(self):
        info = {'classroom': '505', 'date': date(2025, 1, 3), 'day_name': '–ü—è—Ç–Ω–∏—Ü–∞', 'lessons': []}
        text = format_classroom_schedule_text(info)
        assert "–ê—É–¥–∏—Ç–æ—Ä–∏—è —Å–≤–æ–±–æ–¥–Ω–∞" in text

    def test_classroom_with_lessons(self):
        info = {
            'classroom': '505',
            'date': date(2025, 1, 3),
            'day_name': '–ü—è—Ç–Ω–∏—Ü–∞',
            'lessons': [
                {'time': '08:30-10:00', 'subject': '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', 'groups': ['–û735–ë'], 'teachers': '–°–º–∏—Ä–Ω–æ–≤'},
            ],
        }
        text = format_classroom_schedule_text(info)
        assert "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞" in text and "–°–º–∏—Ä–Ω–æ–≤" in text

    def test_classroom_without_optional_fields(self):
        info = {
            'classroom': '101',
            'date': date(2025, 1, 3),
            'day_name': '–ü—è—Ç–Ω–∏—Ü–∞',
            'lessons': [
                {'time': '09:00-10:30', 'subject': '–§–∏–∑–∏–∫–∞'},
            ],
        }
        text = format_classroom_schedule_text(info)
        assert "–§–∏–∑–∏–∫–∞" in text

    def test_classroom_groups_deduplicated(self):
        info = {
            'classroom': '315',
            'date': date(2025, 9, 1),
            'day_name': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
            'lessons': [
                {
                    'time': '10:50-12:20',
                    'subject': '–≠–î –ò –†–ê–°–ü.–†-–í–û–õ–ù',
                    'groups': ['–ò431–°', '–ò432–°', '–ò432–°', '–ò437–°', '–ò437–°', '–ò438–°', '–ò438–°', '–ö–í32', '–ö–í32']
                }
            ],
        }
        text = format_classroom_schedule_text(info)
        assert text.count('–ò432–°') == 1
        assert text.count('–ò437–°') == 1
        assert text.count('–ò438–°') == 1
        assert text.count('–ö–í32') == 1

class TestFullWeekFormatter:
    def test_week_with_no_lessons(self):
        text = format_full_week_text({}, '–Ω–µ—á–µ—Ç–Ω–∞—è')
        assert "–∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç" in text

    def test_week_orders_days_and_lessons(self):
        week = {
            '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': [
                {'time': '10:40-12:10', 'subject': '–§–∏–∑–∏–∫–∞'},
                {'time': '09:00-10:30', 'subject': '–ú–∞—Ç–∞–Ω'},
            ],
            '–ü—è—Ç–Ω–∏—Ü–∞': [
                {'time': '11:00-12:30', 'subject': '–ò—Å—Ç–æ—Ä–∏—è', 'type': '—Å–µ–º–∏–Ω–∞—Ä', 'room': '101', 'teachers': '–ò–≤–∞–Ω–æ–≤'},
            ],
        }
        text = format_full_week_text(week, '–Ω–µ—á–µ—Ç–Ω–∞—è')
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ–ª–µ–µ —Ä–∞–Ω–Ω—è—è –ø–∞—Ä–∞ –∏–¥—ë—Ç –ø–µ—Ä–≤–æ–π
        assert text.index('09:00-10:30') < text.index('10:40-12:10')
        assert '–ò—Å—Ç–æ—Ä–∏—è' in text and '–ò–≤–∞–Ω–æ–≤' in text and 'üìç 101' in text

    def test_week_with_single_day(self):
        week = {
            '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': [
                {'time': '09:00-10:30', 'subject': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞'},
            ],
        }
        text = format_full_week_text(week, '—á–µ—Ç–Ω–∞—è')
        assert '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞' in text
        assert '–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö' in text

    def test_week_with_invalid_time_format(self):
        week = {
            '–í—Ç–æ—Ä–Ω–∏–∫': [
                {'time': 'invalid-time', 'subject': '–¢–µ—Å—Ç'},
            ],
        }
        # –ù–µ –¥–æ–ª–∂–Ω–æ –ø–∞–¥–∞—Ç—å
        text = format_full_week_text(week, '–Ω–µ—á–µ—Ç–Ω–∞—è')
        assert '–¢–µ—Å—Ç' in text

def test_generate_dynamic_header_handles_exceptions(mocker):
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–æ–≤—É—Ç KeyError –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
    lessons = [{'time': '09:00-10:30'}]  # –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç start_time_raw/end_time_raw
    today = datetime.now(MOSCOW_TZ).date()
    mocker.patch('bot.text_formatters.logging')
    header, progress = generate_dynamic_header(lessons, today)
    assert header == ""
    assert progress == ""

def test_generate_dynamic_header_with_malformed_time(mocker):
    lessons = [
        {'time': '09:00-10:30', 'start_time_raw': 'invalid', 'end_time_raw': '10:30', 'subject': '–¢–µ—Å—Ç'}
    ]
    today = datetime.now(MOSCOW_TZ).date()
    mocker.patch('bot.text_formatters.datetime', MagicMock(now=lambda tz: datetime.combine(today, time(9, 30), tzinfo=MOSCOW_TZ)))
    
    # –ú–æ–∫–∞–µ–º logging —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
    mocker.patch('bot.text_formatters.logging')
    
    # –ú–æ–∫–∞–µ–º datetime.strptime —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ —Å MagicMock
    mocker.patch('bot.text_formatters.datetime.strptime', side_effect=ValueError("Invalid time"))
    
    header, progress = generate_dynamic_header(lessons, today)
    assert header == ""
    assert progress == ""

class TestNotificationFormatters:
    def test_generate_evening_intro(self, mocker):
        mocker.patch('bot.text_formatters.random.choice', lambda x: x[0])
        
        weather_forecast = {'temperature': -5, 'description': '—Å–Ω–µ–≥', 'emoji': '‚ùÑÔ∏è'}
        target_date = datetime(2025, 7, 28)
        
        text = generate_evening_intro(weather_forecast, target_date)
        
        assert "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!" in text
        assert "–ó–∞–≤—Ç—Ä–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –Ω–µ–¥–µ–ª—é —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!" in text
        assert "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: –°–Ω–µ–≥, -5¬∞C" in text
        assert "–Ω–µ –∑–∞–±—É–¥—å—Ç–µ —à–∞–ø–∫—É –∏ –ø–µ—Ä—á–∞—Ç–∫–∏" in text
        assert "–°–æ–≤–µ—Ç:" not in text
        assert "–¶–∏—Ç–∞—Ç–∞:" not in text
        assert "–í–æ–ø—Ä–æ—Å:" not in text

    def test_generate_evening_intro_no_weather(self, mocker):
        mocker.patch('bot.text_formatters.random.choice', lambda x: x[0])
        
        target_date = datetime(2025, 7, 28)  # –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        text = generate_evening_intro(None, target_date)
        
        assert "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!" in text
        assert "–ó–∞–≤—Ç—Ä–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫" in text
        assert "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞" not in text
        assert "–°–æ–≤–µ—Ç:" not in text
        assert "–¶–∏—Ç–∞—Ç–∞:" not in text
        assert "–í–æ–ø—Ä–æ—Å:" not in text

    def test_generate_evening_intro_different_weekdays(self, mocker):
        mocker.patch('bot.text_formatters.random.choice', lambda x: x[0])
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
        test_cases = [
            (datetime(2025, 7, 29), "–≤—Ç–æ—Ä–Ω–∏–∫"),  # –≤—Ç–æ—Ä–Ω–∏–∫
            (datetime(2025, 7, 30), "—Å—Ä–µ–¥–∞"),    # —Å—Ä–µ–¥–∞
            (datetime(2025, 7, 31), "—á–µ—Ç–≤–µ—Ä–≥"),  # —á–µ—Ç–≤–µ—Ä–≥
            (datetime(2025, 8, 1), "–ø—è—Ç–Ω–∏—Ü–∞"),   # –ø—è—Ç–Ω–∏—Ü–∞
            (datetime(2025, 8, 2), "—Å—É–±–±–æ—Ç–∞"),   # —Å—É–±–±–æ—Ç–∞
            (datetime(2025, 8, 3), "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"), # –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        ]
        
        for target_date, expected_day in test_cases:
            text = generate_evening_intro(None, target_date)
            assert expected_day in text.lower()

    def test_generate_evening_intro_temperature_ranges(self, mocker):
        mocker.patch('bot.text_formatters.random.choice', lambda x: x[0])
        
        target_date = datetime(2025, 7, 28)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        test_cases = [
            (-10, "–º–æ—Ä–æ–∑–Ω–æ"),
            (5, "–ø—Ä–æ—Ö–ª–∞–¥–Ω–æ"),
            (15, "—Ç–µ–ø–ª–æ"),
            (25, "–∂–∞—Ä–∫–æ"),
        ]
        
        for temp, expected_advice in test_cases:
            weather = {'temperature': temp, 'description': '—è—Å–Ω–æ', 'emoji': '‚òÄÔ∏è'}
            text = generate_evening_intro(weather, target_date)
            assert expected_advice in text.lower()

    def test_generate_morning_intro(self, mocker):
        mocker.patch('bot.text_formatters.random.choice', lambda x: x[0])
        weather_forecast = {'temperature': 22, 'description': '—è—Å–Ω–æ', 'emoji': '‚òÄÔ∏è'}
        text = generate_morning_intro(weather_forecast)
        
        assert "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è" in text
        assert "–ó–∞ –æ–∫–Ω–æ–º —Å–µ–π—á–∞—Å –Ø—Å–Ω–æ, 22¬∞C." in text

    def test_generate_morning_intro_no_weather(self, mocker):
        mocker.patch('bot.text_formatters.random.choice', lambda x: x[0])
        text = generate_morning_intro(None)
        
        assert "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è" in text
        assert "–ó–∞ –æ–∫–Ω–æ–º —Å–µ–π—á–∞—Å" not in text

    def test_generate_reminder_text(self, mocker):
        mocker.patch('bot.text_formatters.random.choice', lambda x: x[0])
        lesson = {
            'subject': '–¢–µ–æ—Ä–∏—è –∞–≤—Ç–æ–º–∞—Ç–æ–≤', 'type': '–õ–µ–∫—Ü–∏—è',
            'time': '12:30-14:00', 'room': '505', 'teachers': '–ü–µ—Ç—Ä–æ–≤ –ü.–ü.'
        }
        
        first_text = generate_reminder_text(lesson, "first", None)
        assert "–ü–µ—Ä–≤–∞—è –ø–∞—Ä–∞ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç!" in first_text

        break_text = generate_reminder_text(lesson, "break", 20)
        assert "–ü–∞—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!" in break_text

        final_text = generate_reminder_text(None, "final", None)
        assert "–ü–∞—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å—ë!" in final_text
        
        invalid_text = generate_reminder_text(lesson, "invalid_type", None)
        assert invalid_text is None

    def test_generate_reminder_text_break_durations(self, mocker):
        mocker.patch('bot.text_formatters.random.choice', lambda x: x[0])
        lesson = {
            'subject': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', 'type': '–õ–µ–∫—Ü–∏—è',
            'time': '10:40-12:10', 'room': '101'
        }
        
        # –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤
        short_break = generate_reminder_text(lesson, "break", 10)
        assert "–£—Å–ø–µ–π—Ç–µ –¥–æ–π—Ç–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏" in short_break
        
        # –°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–µ—Ä—ã–≤
        medium_break = generate_reminder_text(lesson, "break", 25)
        assert "–í—Ä–µ–º—è –≤—ã–ø–∏—Ç—å —á–∞—é" in medium_break
        
        # –î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤
        long_break = generate_reminder_text(lesson, "break", 50)
        assert "–±–æ–ª—å—à–æ–π –ø–µ—Ä–µ—Ä—ã–≤" in long_break
        assert "–ø–æ–æ–±–µ–¥–∞—Ç—å" in long_break

    def test_generate_reminder_text_with_lesson_details(self, mocker):
        mocker.patch('bot.text_formatters.random.choice', lambda x: x[0])
        lesson = {
            'subject': '–§–∏–∑–∏–∫–∞', 'type': '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è',
            'time': '14:00-15:30', 'room': '205', 'teachers': '–°–∏–¥–æ—Ä–æ–≤ –ê.–ê.'
        }
        
        text = generate_reminder_text(lesson, "first", None)
        assert "–§–∏–∑–∏–∫–∞" in text
        assert "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è" in text
        assert "14:00-15:30" in text
        assert "üìç 205" in text
        assert "—Å –°–∏–¥–æ—Ä–æ–≤ –ê.–ê." in text
        assert UNSUBSCRIBE_FOOTER in text

    def test_generate_reminder_text_without_optional_fields(self, mocker):
        mocker.patch('bot.text_formatters.random.choice', lambda x: x[0])
        lesson = {
            'subject': '–ò—Å—Ç–æ—Ä–∏—è', 'type': '–°–µ–º–∏–Ω–∞—Ä',
            'time': '09:00-10:30'
        }
        
        text = generate_reminder_text(lesson, "first", None)
        assert "–ò—Å—Ç–æ—Ä–∏—è" in text
        assert "–°–µ–º–∏–Ω–∞—Ä" in text
        assert "09:00-10:30" in text
        assert "üìç" not in text
        assert "—Å " not in text

    def test_generate_evening_intro_teacher(self, mocker):
        """–¢–µ—Å—Ç –≤–µ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
        mocker.patch('bot.text_formatters.random.choice', lambda x: x[0])
        
        weather_forecast = {'temperature': 10, 'description': '–æ–±–ª–∞—á–Ω–æ', 'emoji': '‚òÅÔ∏è'}
        target_date = datetime(2025, 7, 28)
        
        text = generate_evening_intro(weather_forecast, target_date, user_type='teacher')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        assert "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!" in text
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        assert "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫" in text.lower()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–≥–æ–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –±–µ–∑ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –æ–¥–µ–∂–¥–µ
        assert "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞: –û–±–ª–∞—á–Ω–æ, 10¬∞C" in text
        assert "–∫—É—Ä—Ç–∫–∞" not in text.lower()
        assert "—Å–≤–∏—Ç–µ—Ä" not in text.lower()

    def test_generate_evening_intro_student(self, mocker):
        """–¢–µ—Å—Ç –≤–µ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"""
        mocker.patch('bot.text_formatters.random.choice', lambda x: x[0])
        
        weather_forecast = {'temperature': 10, 'description': '–æ–±–ª–∞—á–Ω–æ', 'emoji': '‚òÅÔ∏è'}
        target_date = datetime(2025, 7, 28)
        
        text = generate_evening_intro(weather_forecast, target_date, user_type='student')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        assert "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!" in text
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –æ–¥–µ–∂–¥–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        assert "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: –û–±–ª–∞—á–Ω–æ, 10¬∞C" in text
        assert ("–∫—É—Ä—Ç–∫–∞" in text.lower() or "—Å–≤–∏—Ç–µ—Ä" in text.lower() or "–ø—Ä–æ—Ö–ª–∞–¥–Ω–æ" in text.lower())

    def test_generate_morning_intro_teacher(self, mocker):
        """–¢–µ—Å—Ç —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
        mocker.patch('bot.text_formatters.random.choice', lambda x: x[0])
        
        weather_forecast = {'temperature': 15, 'description': '—Å–æ–ª–Ω–µ—á–Ω–æ', 'emoji': '‚òÄÔ∏è'}
        text = generate_morning_intro(weather_forecast, user_type='teacher')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        assert "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!" in text
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –ø–æ–≥–æ–¥—ã
        assert "–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞: –°–æ–ª–Ω–µ—á–Ω–æ, 15¬∞C" in text
        assert "–ó–∞ –æ–∫–Ω–æ–º" not in text

    def test_generate_morning_intro_student(self, mocker):
        """–¢–µ—Å—Ç —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        mocker.patch('bot.text_formatters.random.choice', lambda x: x[0])
        
        weather_forecast = {'temperature': 15, 'description': '—Å–æ–ª–Ω–µ—á–Ω–æ', 'emoji': '‚òÄÔ∏è'}
        text = generate_morning_intro(weather_forecast, user_type='student')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        assert "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è" in text
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –ø–æ–≥–æ–¥—ã
        assert "–ó–∞ –æ–∫–Ω–æ–º —Å–µ–π—á–∞—Å –°–æ–ª–Ω–µ—á–Ω–æ, 15¬∞C" in text

def test_format_schedule_text_edge_cases():
    # –ü—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
    text = format_schedule_text({})
    assert "–û—à–∏–±–∫–∞" in text
    
    # –¢–æ–ª—å–∫–æ lessons –±–µ–∑ date
    text = format_schedule_text({'lessons': [{'time': '09:00', 'subject': '–¢–µ—Å—Ç'}]})
    assert "–î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" in text
    
    # –£–±–∏—Ä–∞–µ–º —Ç–µ—Å—Ç —Å None, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç AttributeError

def test_format_teacher_schedule_text_edge_cases():
    # –ü—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
    text = format_teacher_schedule_text({})
    assert "–û—à–∏–±–∫–∞" in text
    
    # –£–±–∏—Ä–∞–µ–º —Ç–µ—Å—Ç —Å None, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç AttributeError
    
    # –° –æ—à–∏–±–∫–æ–π –≤ –¥–∞–Ω–Ω—ã—Ö
    text = format_teacher_schedule_text({'error': 'Test error', 'teacher': '–¢–µ—Å—Ç', 'date': date(2025, 1, 1), 'day_name': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'})
    assert "–û—à–∏–±–∫–∞" in text

def test_format_classroom_schedule_text_edge_cases():
    # –ü—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
    text = format_classroom_schedule_text({})
    assert "–û—à–∏–±–∫–∞" in text
    
    # –£–±–∏—Ä–∞–µ–º —Ç–µ—Å—Ç —Å None, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç AttributeError
    
    # –° –æ—à–∏–±–∫–æ–π –≤ –¥–∞–Ω–Ω—ã—Ö
    text = format_classroom_schedule_text({'error': 'Test error', 'classroom': '101', 'date': date(2025, 1, 1), 'day_name': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'})
    assert "–û—à–∏–±–∫–∞" in text

def test_format_full_week_text_edge_cases():
    # –ü—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
    text = format_full_week_text({}, '—Ç–µ—Å—Ç')
    assert "–∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç" in text
    
    # –°–ª–æ–≤–∞—Ä—å —Å –ø—É—Å—Ç—ã–º–∏ –¥–Ω—è–º–∏
    text = format_full_week_text({
        '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': [],
        '–í—Ç–æ—Ä–Ω–∏–∫': []
    }, '—Ç–µ—Å—Ç')
    assert "–∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç" in text
    
    # –î–µ–Ω—å —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    text = format_full_week_text({
        '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': [{'invalid': 'data'}]
    }, '—Ç–µ—Å—Ç')
    assert "–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö" in text

def test_generate_dynamic_header_edge_cases():
    # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤
    header, progress = generate_dynamic_header([], datetime.now(MOSCOW_TZ).date())
    assert "–∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç" in header
    
    # –£—Ä–æ–∫–∏ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
    lessons = [{'subject': '–¢–µ—Å—Ç'}]
    header, progress = generate_dynamic_header(lessons, datetime.now(MOSCOW_TZ).date())
    assert header == ""
    assert progress == ""

def test_unsubscribe_footer_constant():
    assert UNSUBSCRIBE_FOOTER == "\n\n<tg-spoiler><i>–û—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç—É —Ä–∞—Å—Å—ã–ª–∫—É –º–æ–∂–Ω–æ –≤ ¬´‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª</i></tg-spoiler>"