import pytest
from datetime import date, datetime, time
from unittest.mock import MagicMock

from bot.text_formatters import (
    generate_dynamic_header, format_schedule_text, generate_evening_intro,
    generate_morning_intro, generate_reminder_text, UNSUBSCRIBE_FOOTER
)
from core.config import MOSCOW_TZ

@pytest.fixture
def lessons_sample():
    return [
        {'time': '09:00-10:30', 'subject': '–ú–∞—Ç–∞–Ω', 'start_time_raw': '09:00', 'end_time_raw': '10:30'},
        {'time': '10:40-12:10', 'subject': '–§–∏–∑–∏–∫–∞', 'start_time_raw': '10:40', 'end_time_raw': '12:10'}
    ]

@pytest.mark.parametrize("mock_time_str, expected_header", [
    ("08:00", "‚òÄÔ∏è <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!</b> –ü–µ—Ä–≤–∞—è –ø–∞—Ä–∞ –≤ 09:00."),
    ("09:30", "‚è≥ <b>–ò–¥–µ—Ç –ø–∞—Ä–∞:</b> –ú–∞—Ç–∞–Ω.\n–ó–∞–∫–æ–Ω—á–∏—Ç—Å—è –≤ 10:30."),
    ("10:35", "‚òïÔ∏è <b>–ü–µ—Ä–µ—Ä—ã–≤ –¥–æ 10:40.</b>\n–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞: –§–∏–∑–∏–∫–∞."),
    ("11:00", "‚è≥ <b>–ò–¥–µ—Ç –ø–∞—Ä–∞:</b> –§–∏–∑–∏–∫–∞.\n–ó–∞–∫–æ–Ω—á–∏—Ç—Å—è –≤ 12:10."),
    ("13:00", "‚úÖ <b>–ü–∞—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.</b> –û—Ç–¥—ã—Ö–∞–π—Ç–µ!"),
    ("04:00", "üåô <b>–ü–æ–∑–¥–Ω—è—è –Ω–æ—á—å.</b> –°–∫–æ—Ä–æ —É—Ç—Ä–æ!"),
])
def test_generate_dynamic_header_for_today(mocker, lessons_sample, mock_time_str, expected_header):
    today = datetime.now(MOSCOW_TZ).date()
    mock_time = time.fromisoformat(mock_time_str)
    mocked_now_dt = datetime.combine(today, mock_time, tzinfo=MOSCOW_TZ)
    
    mocker.patch('bot.text_formatters.datetime', MagicMock(now=lambda tz: mocked_now_dt, strptime=datetime.strptime))

    header, progress_bar = generate_dynamic_header(lessons_sample, today)
    
    assert header == expected_header
    assert "–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–Ω—è" in progress_bar

def test_generate_dynamic_header_for_future_day(lessons_sample):
    future_date = datetime.now(MOSCOW_TZ).date() + pytest.importorskip("datetime").timedelta(days=1)
    header, progress_bar = generate_dynamic_header(lessons_sample, future_date)
    assert header == ""
    assert progress_bar == ""

def test_generate_dynamic_header_no_lessons(mocker):
    today = datetime.now(MOSCOW_TZ).date()
    mocked_now_dt = datetime.combine(today, time(12, 0), tzinfo=MOSCOW_TZ)
    mocker.patch('bot.text_formatters.datetime', MagicMock(now=lambda tz: mocked_now_dt))
    
    header, progress_bar = generate_dynamic_header([], today)
    assert "–°–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç" in header
    assert progress_bar == ""

def test_format_schedule_text_with_error():
    text = format_schedule_text({'error': '–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'})
    assert "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" in text

class TestNotificationFormatters:
    def test_generate_evening_intro(self, mocker):
        mocker.patch('bot.text_formatters.random.choice', lambda x: x[0])
        mocker.patch('bot.text_formatters.random.shuffle', lambda x: None)
        
        weather_forecast = {'temperature': -5, 'description': '—Å–Ω–µ–≥', 'emoji': '‚ùÑÔ∏è'}
        target_date = datetime(2025, 7, 28)
        
        text = generate_evening_intro(weather_forecast, target_date)
        
        assert "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! üëã" in text
        assert "–ó–∞–≤—Ç—Ä–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –Ω–µ–¥–µ–ª—é —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!" in text
        assert "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: –°–Ω–µ–≥, -5¬∞C" in text
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–∞ –º–æ–∫–æ–º
        assert "–Ω–µ –∑–∞–±—É–¥—å—Ç–µ —à–∞–ø–∫—É –∏ –ø–µ—Ä—á–∞—Ç–∫–∏" in text
        assert "üí° –°–æ–≤–µ—Ç: –°–æ–±–µ—Ä–∏—Ç–µ —Ä—é–∫–∑–∞–∫ —Å –≤–µ—á–µ—Ä–∞" in text

    def test_generate_morning_intro(self, mocker):
        mocker.patch('bot.text_formatters.random.choice', lambda x: x[0])
        weather_forecast = {'temperature': 22, 'description': '—è—Å–Ω–æ', 'emoji': '‚òÄÔ∏è'}
        text = generate_morning_intro(weather_forecast)
        
        assert "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è" in text
        assert "–ó–∞ –æ–∫–Ω–æ–º —Å–µ–π—á–∞—Å –Ø—Å–Ω–æ, 22¬∞C." in text

    def test_generate_reminder_text(self, mocker):
        mocker.patch('bot.text_formatters.random.choice', lambda x: x[0])
        lesson = {
            'subject': '–¢–µ–æ—Ä–∏—è –∞–≤—Ç–æ–º–∞—Ç–æ–≤', 'type': '–õ–µ–∫—Ü–∏—è',
            'time': '12:30-14:00', 'room': '505', 'teachers': '–ü–µ—Ç—Ä–æ–≤ –ü.–ü.'
        }
        
        first_text = generate_reminder_text(lesson, "first", None)
        assert "–ü–µ—Ä–≤–∞—è –ø–∞—Ä–∞ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç!" in first_text

        break_text = generate_reminder_text(lesson, "break", 20)
        assert "–ü–∞—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!" in break_text

        final_text = generate_reminder_text(None, "final", None)
        assert "–ü–∞—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å—ë!" in final_text
        
        invalid_text = generate_reminder_text(lesson, "invalid_type", None)
        assert invalid_text is None