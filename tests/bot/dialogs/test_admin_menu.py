from datetime import date, timedelta
from unittest.mock import AsyncMock, MagicMock, patch

import pytest
from aiogram.types import CallbackQuery, ContentType, Message, User
from aiogram_dialog import DialogManager
from aiogram_dialog.widgets.kbd import Button

from bot.dialogs.admin_menu import (
    active_generations,
    build_segment_users,
    get_create_preview,
    get_events_list,
    get_preview_data,
    get_semester_settings_data,
    get_stats_data,
    get_user_manage_data,
    on_admin_events,
    on_broadcast_received,
    on_cancel_generation,
    on_check_graduated_groups,
    on_clear_cache,
    on_confirm_segment_send,
    on_cr_confirm,
    on_cr_date,
    on_cr_desc,
    on_cr_link,
    on_cr_location,
    on_cr_time,
    on_cr_title,
    on_edit_fall_semester,
    on_edit_spring_semester,
    on_event_create,
    on_event_delete,
    on_event_edit_datetime,
    on_event_edit_description,
    on_event_edit_image,
    on_event_edit_link,
    on_event_edit_location,
    on_event_edit_menu,
    on_event_edit_title,
    on_event_selected,
    on_event_show_image,
    on_event_toggle_publish,
    on_events_next,
    on_events_prev,
    on_events_set_filter,
    on_fall_semester_input,
    on_generate_full_schedule,
    on_new_group_input,
    on_period_selected,
    on_segment_criteria_input,
    on_semester_settings,
    on_spring_semester_input,
    on_template_input_message,
    on_test_alert,
    on_test_evening,
    on_test_morning,
    on_test_reminders_for_week,
    on_user_id_input,
)


@pytest.fixture
def mock_callback():
    callback = AsyncMock(spec=CallbackQuery)
    callback.from_user = AsyncMock(spec=User)
    callback.from_user.id = 123456789
    callback.answer = AsyncMock()
    callback.message = AsyncMock()
    callback.message.answer = AsyncMock()
    return callback


@pytest.fixture
def mock_manager():
    manager = AsyncMock(spec=DialogManager)
    manager.middleware_data = {
        "bot": AsyncMock(),
        "user_data_manager": AsyncMock(),
        "manager": AsyncMock(),
        "session_factory": AsyncMock(),
    }
    return manager


@pytest.fixture
def mock_message():
    message = AsyncMock(spec=Message)
    message.from_user = AsyncMock(spec=User)
    message.from_user.id = 123456789
    message.answer = AsyncMock()
    message.chat = AsyncMock()
    message.chat.id = -123456789
    message.message_id = 1
    message.content_type = "text"
    return message


class TestAdminMenuHelpers:
    """–¢–µ—Å—Ç—ã –¥–ª—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π admin_menu"""

    def test_is_empty_field_empty_string(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏"""
        from bot.dialogs.admin_menu import _is_empty_field

        assert _is_empty_field("") is True
        assert _is_empty_field("   ") is True
        assert _is_empty_field(None) is True

    def test_is_empty_field_skip_words(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–≤ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞"""
        from bot.dialogs.admin_menu import _is_empty_field

        skip_words = [
            "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
            "–ü—Ä–æ–ø—É—Å–∫",
            "skip",
            "–û—Ç–º–µ–Ω–∞",
            "–æ—Ç–º–µ–Ω–∏—Ç—å",
            "cancel",
            "–Ω–µ—Ç",
            "no",
            "none",
            "-",
            "‚Äî",
            "‚Äì",
            ".",
            "–ø—É—Å—Ç–æ",
            "empty",
            "null",
        ]
        for word in skip_words:
            assert _is_empty_field(word) is True
            assert _is_empty_field(word.upper()) is True
            assert _is_empty_field(word.lower()) is True

    def test_is_empty_field_normal_text(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        from bot.dialogs.admin_menu import _is_empty_field

        assert _is_empty_field("–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç") is False
        assert _is_empty_field("Some text") is False
        assert _is_empty_field("123") is False

    def test_is_cancel(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–º–µ–Ω—ã"""
        from bot.dialogs.admin_menu import _is_cancel

        assert _is_cancel("–æ—Ç–º–µ–Ω–∞") is True
        assert _is_cancel("–û—Ç–º–µ–Ω–∞") is True
        assert _is_cancel("cancel") is True
        assert _is_cancel("Cancel") is True
        assert _is_cancel("–æ—Ç–º–µ–Ω–∏—Ç—å") is True
        assert _is_cancel("–û—Ç–º–µ–Ω–∏—Ç—å") is True
        assert _is_cancel("normal text") is False
        assert _is_cancel("") is False
        assert _is_cancel(None) is False

    def test_is_skip(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞"""
        from bot.dialogs.admin_menu import _is_skip

        assert _is_skip("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å") is True
        assert _is_skip("–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å") is True
        assert _is_skip("skip") is True
        assert _is_skip("Skip") is True
        assert _is_skip("-") is True
        assert _is_skip("–ø—É—Å—Ç–æ") is True
        assert _is_skip("empty") is True
        assert _is_skip("") is True
        assert _is_skip("normal text") is False
        assert _is_skip("123") is False


class TestAdminMenuHandlers:
    @pytest.mark.asyncio
    async def test_on_test_morning(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
        await on_test_morning(mock_callback, MagicMock(), mock_manager)

        mock_callback.answer.assert_called_once_with("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–¥–∞—á –Ω–∞ —É—Ç—Ä–µ–Ω–Ω—é—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        mock_callback.message.answer.assert_called_once_with("‚úÖ –ó–∞–¥–∞—á–∏ –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å.")

    @pytest.mark.asyncio
    async def test_on_test_evening(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ—á–µ—Ä–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
        await on_test_evening(mock_callback, MagicMock(), mock_manager)

        mock_callback.answer.assert_called_once_with("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–¥–∞—á –Ω–∞ –≤–µ—á–µ—Ä–Ω—é—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        mock_callback.message.answer.assert_called_once_with("‚úÖ –ó–∞–¥–∞—á–∏ –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å.")

    @pytest.mark.asyncio
    async def test_on_test_reminders_for_week_with_users(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_manager.middleware_data["user_data_manager"].get_users_for_lesson_reminders.return_value = [
            (123, "TEST_GROUP", "test@example.com")
        ]
        mock_manager.middleware_data["manager"].get_schedule_for_day.return_value = {
            "lessons": [{"subject": "TEST", "time": "9:00-10:30"}]
        }

        await on_test_reminders_for_week(mock_callback, MagicMock(), mock_manager)

        mock_callback.answer.assert_called_once_with("üöÄ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏—è
        assert mock_manager.middleware_data["bot"].send_message.call_count > 0

    @pytest.mark.asyncio
    async def test_on_test_reminders_for_week_no_users(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        mock_manager.middleware_data["user_data_manager"].get_users_for_lesson_reminders.return_value = []

        await on_test_reminders_for_week(mock_callback, MagicMock(), mock_manager)

        mock_callback.answer.assert_called_once_with("üöÄ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
        mock_manager.middleware_data["bot"].send_message.assert_called_once_with(
            123456789,
            "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞.",
        )

    @pytest.mark.asyncio
    async def test_on_test_alert(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞."""
        await on_test_alert(mock_callback, MagicMock(), mock_manager)

        mock_callback.answer.assert_called_once_with("üß™ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–π –∞–ª—ë—Ä—Ç...")
        mock_manager.middleware_data["bot"].send_message.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_semester_settings(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Å–µ–º–µ—Å—Ç—Ä–æ–≤."""
        await on_semester_settings(mock_callback, MagicMock(), mock_manager)

        mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_edit_fall_semester(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –æ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞."""
        await on_edit_fall_semester(mock_callback, MagicMock(), mock_manager)

        mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_edit_spring_semester(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –≤–µ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞."""
        await on_edit_spring_semester(mock_callback, MagicMock(), mock_manager)

        mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_fall_semester_input_success(self, mock_message, mock_manager):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –æ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞."""
        mock_message.text = "01.09.2024"

        # –ú–æ–∫–∞–µ–º SemesterSettingsManager
        with patch("bot.dialogs.admin_menu.SemesterSettingsManager") as mock_settings_manager:
            mock_instance = AsyncMock()
            mock_settings_manager.return_value = mock_instance
            mock_instance.get_semester_settings.return_value = [
                date(2024, 9, 1),
                date(2025, 2, 9),
            ]
            mock_instance.update_semester_settings.return_value = True

            await on_fall_semester_input(mock_message, MagicMock(), mock_manager, "01.09.2024")

            mock_message.answer.assert_called_with("‚úÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_fall_semester_input_invalid_format(self, mock_message, mock_manager):
        """–¢–µ—Å—Ç –≤–≤–æ–¥–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –æ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞."""
        mock_message.text = "invalid_date"

        await on_fall_semester_input(mock_message, MagicMock(), mock_manager, "invalid_date")

        mock_message.answer.assert_called_with("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.09.2024)")
        mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_spring_semester_input_success(self, mock_message, mock_manager):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –≤–µ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞."""
        mock_message.text = "09.02.2025"

        with patch("bot.dialogs.admin_menu.SemesterSettingsManager") as mock_settings_manager:
            mock_instance = AsyncMock()
            mock_settings_manager.return_value = mock_instance
            mock_instance.get_semester_settings.return_value = [
                date(2024, 9, 1),
                date(2025, 2, 9),
            ]
            mock_instance.update_semester_settings.return_value = True

            await on_spring_semester_input(mock_message, MagicMock(), mock_manager, "09.02.2025")

            mock_message.answer.assert_called_with("‚úÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤–µ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_broadcast_received_success(self, mock_message, mock_manager):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.

        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ:
        1. –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ (—á–µ—Ä–µ–∑ asyncio.create_task)
        2. –ë–æ—Ç —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –º–µ–Ω—é (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç event loop)
        3. –ó–∞–¥–∞—á–∏ —Å—Ç–∞–≤—è—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥—å Dramatiq
        """
        from bot.dialogs.states import Admin

        mock_message.content_type = ContentType.TEXT
        mock_message.text = "Test broadcast message"
        mock_message.reply = AsyncMock()

        # –ú–æ–∫–∞–µ–º user_data_manager
        mock_manager.middleware_data["user_data_manager"].get_all_user_ids = AsyncMock(return_value=[111, 222, 333])
        mock_manager.middleware_data["user_data_manager"].get_full_user_info = AsyncMock(
            return_value=MagicMock(user_id=111, username="test", group="TEST")
        )

        # –ú–æ–∫–∞–µ–º bot
        mock_manager.middleware_data["bot"].send_message = AsyncMock()

        with patch("bot.dialogs.admin_menu.send_message_task") as mock_task:
            mock_task.send = MagicMock()

            with patch("asyncio.create_task") as mock_create_task:
                await on_broadcast_received(mock_message, mock_manager)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å
                mock_message.reply.assert_called_once_with("üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å...")

                # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç event loop)
                mock_create_task.assert_called_once()

                # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –°–†–ê–ó–£ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –º–µ–Ω—é (–¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏)
                mock_manager.switch_to.assert_called_once_with(Admin.menu)

    @pytest.mark.asyncio
    async def test_on_segment_criteria_input(self, mock_message, mock_manager):
        """–¢–µ—Å—Ç –≤–≤–æ–¥–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏."""
        mock_message.text = "TEST|7"

        await on_segment_criteria_input(mock_message, MagicMock(), mock_manager, "TEST|7")

        mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_template_input_message(self, mock_message, mock_manager):
        """–¢–µ—Å—Ç –≤–≤–æ–¥–∞ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        mock_message.text = "Hello {username}!"

        await on_template_input_message(mock_message, MagicMock(), mock_manager)

        mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_confirm_segment_send(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
        await on_confirm_segment_send(mock_callback, MagicMock(), mock_manager)

        mock_callback.answer.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_clear_cache(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞."""
        await on_clear_cache(mock_callback, MagicMock(), mock_manager)

        mock_callback.answer.assert_called_once_with("üßπ –û—á–∏—â–∞—é –∫—ç—à –∫–∞—Ä—Ç–∏–Ω–æ–∫...")

    @pytest.mark.asyncio
    async def test_on_cancel_generation_success(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–º–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º active_generations –∏–∑ –º–æ–¥—É–ª—è
        from bot.dialogs.admin_menu import active_generations

        # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
        active_generations.clear()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        active_generations[123456789] = {"cancelled": False, "status_msg_id": 1}

        await on_cancel_generation(mock_callback)

        mock_callback.answer.assert_called_once_with("‚èπÔ∏è –û—Ç–º–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ active_generations
        assert 123456789 not in active_generations

    @pytest.mark.asyncio
    async def test_on_cancel_generation_no_active(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
        active_generations.clear()

        await on_cancel_generation(mock_callback)

        mock_callback.answer.assert_called_once_with("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã")

    @pytest.mark.asyncio
    async def test_get_stats_data(self, mock_manager):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        mock_manager.middleware_data["user_data_manager"].get_users_count.return_value = 100
        mock_manager.middleware_data["user_data_manager"].get_users_for_lesson_reminders.return_value = []
        mock_manager.middleware_data["user_data_manager"].get_subscription_breakdown.return_value = {}
        mock_manager.middleware_data["user_data_manager"].get_group_distribution.return_value = {}

        result = await get_stats_data(mock_manager)

        assert "stats_text" in result
        assert "periods" in result

    @pytest.mark.asyncio
    async def test_get_preview_data(self, mock_manager):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø–∞–¥–∞–µ—Ç
        # –ú–æ–∫–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        mock_manager.middleware_data["user_data_manager"].get_users_for_lesson_reminders.return_value = []
        mock_manager.middleware_data["user_data_manager"].get_users_count.return_value = 0
        mock_manager.middleware_data["user_data_manager"].get_all_user_ids.return_value = []
        mock_manager.middleware_data["user_data_manager"].get_full_user_info.return_value = None

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –º–æ–∫ –¥–ª—è dialog_data
        ctx = AsyncMock()
        ctx.dialog_data = MagicMock()
        ctx.dialog_data.get.return_value = None  # –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è None
        mock_manager.current_context = AsyncMock(return_value=ctx)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø–∞–¥–∞–µ—Ç
        try:
            result = await get_preview_data(mock_manager)
            assert isinstance(result, dict)
        except Exception as e:
            # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –ø–∞–¥–∞–µ—Ç –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –º–æ–∫–∞–º–∏, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            # –ì–ª–∞–≤–Ω–æ–µ —á—Ç–æ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
            pass

    @pytest.mark.asyncio
    async def test_on_generate_full_schedule_disabled(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç –∑–∞–≥–ª—É—à–∫–∏ –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–æ—Ç–∫–ª—é—á–µ–Ω–æ)."""
        await on_generate_full_schedule(mock_callback, MagicMock(), mock_manager)
        mock_callback.answer.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_admin_events(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏."""
        await on_admin_events(mock_callback, MagicMock(), mock_manager)

        mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_events_filter_all_shows_future_events(self, mock_manager):
        """–¢–µ—Å—Ç —á—Ç–æ –∫–Ω–æ–ø–∫–∞ '–í—Å–µ' –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è, –≤–∫–ª—é—á–∞—è 00:00)"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä "–í—Å–µ" (time_filter = None)
        mock_manager.dialog_data = {"time_filter": None, "page": 0}

        # –ú–æ–∫–∞–µ–º EventsManager
        with patch("bot.dialogs.events_menu.EventsManager") as mock_events_manager:
            mock_instance = AsyncMock()
            mock_events_manager.return_value = mock_instance
            mock_instance.list_events.return_value = (
                [],
                0,
            )  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã

            from bot.dialogs.events_menu import get_events_for_user

            result = await get_events_for_user(mock_manager)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ list_events –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å from_now_only=True –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            mock_instance.list_events.assert_called_once()
            call_args = mock_instance.list_events.call_args
            assert call_args[1]["from_now_only"] is True  # –î–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å True

    @pytest.mark.asyncio
    async def test_events_filter_today_shows_future_only(self, mock_manager):
        """–¢–µ—Å—Ç —á—Ç–æ –∫–Ω–æ–ø–∫–∏ '–°–µ–≥–æ–¥–Ω—è'/'–ù–µ–¥–µ–ª—è' –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä "–°–µ–≥–æ–¥–Ω—è" (time_filter = 'today')
        mock_manager.dialog_data = {"time_filter": "today", "page": 0}

        # –ú–æ–∫–∞–µ–º EventsManager
        with patch("bot.dialogs.events_menu.EventsManager") as mock_events_manager:
            mock_instance = AsyncMock()
            mock_events_manager.return_value = mock_instance
            mock_instance.list_events.return_value = (
                [],
                0,
            )  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã

            from bot.dialogs.events_menu import get_events_for_user

            result = await get_events_for_user(mock_manager)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ list_events –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å from_now_only=True –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–µ–≥–æ–¥–Ω—è"
            mock_instance.list_events.assert_called_once()
            call_args = mock_instance.list_events.call_args
            assert call_args[1]["from_now_only"] is True  # –î–ª—è "–°–µ–≥–æ–¥–Ω—è" –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å True

    @pytest.mark.asyncio
    async def test_events_midnight_today_shows_in_all(self, mock_manager):
        """–¢–µ—Å—Ç —á—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞ 00:00 —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ '–í—Å–µ'"""
        from datetime import datetime
        from unittest.mock import MagicMock

        from bot.dialogs.events_menu import get_events_for_user

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä "–í—Å–µ" (time_filter = None)
        mock_manager.dialog_data = {"time_filter": None, "page": 0}

        # –ú–æ–∫–∞–µ–º EventsManager
        with patch("bot.dialogs.events_menu.EventsManager") as mock_events_manager:
            mock_instance = AsyncMock()
            mock_events_manager.return_value = mock_instance

            # –°–æ–∑–¥–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞ 00:00 —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
            mock_event = MagicMock()
            mock_event.title = "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –ø–æ–ª–Ω–æ—á—å"
            mock_event.start_at = datetime(2025, 8, 24, 0, 0, 0)  # –°–µ–≥–æ–¥–Ω—è –≤ 00:00
            mock_event.location = None
            mock_event.id = 1

            mock_instance.list_events.return_value = ([mock_event], 1)

            result = await get_events_for_user(mock_manager)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ–∫–∞–∑–∞–ª–æ—Å—å
            events = result["events"]
            assert len(events) == 1
            title, event_id = events[0]
            assert "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –ø–æ–ª–Ω–æ—á—å" in title
            print(f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞ 00:00 –ø–æ–∫–∞–∑–∞–ª–æ—Å—å: {title}")

    @pytest.mark.asyncio
    async def test_events_title_filter_skip_words(self, mock_manager):
        """–¢–µ—Å—Ç —á—Ç–æ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞ —Ñ–∏–ª—å—Ç—Ä—É—é—Ç—Å—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
        from unittest.mock import MagicMock

        from bot.dialogs.events_menu import get_events_for_user

        # –ú–æ–∫–∞–µ–º EventsManager
        with patch("bot.dialogs.events_menu.EventsManager") as mock_events_manager:
            mock_instance = AsyncMock()
            mock_events_manager.return_value = mock_instance

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å —Å–ª—É–∂–µ–±–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
            mock_event = MagicMock()
            mock_event.title = "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
            mock_event.start_at = None
            mock_event.location = None
            mock_event.id = 1

            mock_instance.list_events.return_value = ([mock_event], 1)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
            mock_manager.dialog_data = {"time_filter": None, "page": 0}
            result = await get_events_for_user(mock_manager)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–ª–æ–≤–æ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –±—ã–ª–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ
            events = result["events"]
            assert len(events) == 1
            title, event_id = events[0]
            assert "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" not in title
            assert "—ç—Ç–æ" in title  # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è (—Å —É—Å–µ—á–µ–Ω–∏–µ–º)

    @pytest.mark.asyncio
    async def test_events_from_now_only_always_true(self, mock_manager):
        """–¢–µ—Å—Ç —á—Ç–æ from_now_only –≤—Å–µ–≥–¥–∞ True –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        from bot.dialogs.events_menu import get_events_for_user

        # –ú–æ–∫–∞–µ–º EventsManager
        with patch("bot.dialogs.events_menu.EventsManager") as mock_events_manager:
            mock_instance = AsyncMock()
            mock_events_manager.return_value = mock_instance
            mock_instance.list_events.return_value = ([], 0)

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ" (time_filter = None)
            mock_manager.dialog_data = {"time_filter": None, "page": 0}
            await get_events_for_user(mock_manager)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ from_now_only=True –¥–∞–∂–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—Å–µ"
            call_args = mock_instance.list_events.call_args
            assert call_args[1]["from_now_only"] is True

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–°–µ–≥–æ–¥–Ω—è" (time_filter = 'today')
            mock_manager.dialog_data = {"time_filter": "today", "page": 0}
            await get_events_for_user(mock_manager)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ from_now_only=True –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–µ–≥–æ–¥–Ω—è"
            call_args = mock_instance.list_events.call_args
            assert call_args[1]["from_now_only"] is True

    @pytest.mark.asyncio
    async def test_get_events_list(self, mock_manager):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."""

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º dialog_data —Å side_effect –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–ª—é—á–µ–π
        def mock_get_side_effect(key, default=0):
            if key == "events_page":
                return 0
            elif key == "events_pub_filter":
                return "all"
            elif key == "events_search":
                return ""
            else:
                return default

        mock_manager.dialog_data = MagicMock()
        mock_manager.dialog_data.get.side_effect = mock_get_side_effect

        # –ú–æ–∫–∞–µ–º EventsManager
        with patch("bot.dialogs.admin_menu.EventsManager") as mock_events_manager:
            mock_instance = AsyncMock()
            mock_events_manager.return_value = mock_instance
            mock_instance.list_events.return_value = ([], 0)

            result = await get_events_list(mock_manager)

            assert "events_text" in result
            assert "total_events" in result
            assert "page" in result
            assert "has_prev" in result
            assert "has_next" in result
            assert "events_items" in result

    @pytest.mark.asyncio
    async def test_on_events_prev(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."""
        mock_manager.dialog_data = {"events_page": 5}

        await on_events_prev(mock_callback, MagicMock(), mock_manager)

        assert mock_manager.dialog_data["events_page"] == 4
        mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_events_next(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."""
        mock_manager.dialog_data = {"events_page": 3}

        await on_events_next(mock_callback, MagicMock(), mock_manager)

        assert mock_manager.dialog_data["events_page"] == 4
        mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_event_selected(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
        from aiogram_dialog.widgets.kbd import Select

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è dialog_data —Å –º–µ—Ç–æ–¥–æ–º __setitem__
        mock_dialog_data = MagicMock()
        mock_manager.dialog_data = mock_dialog_data

        await on_event_selected(mock_callback, MagicMock(spec=Select), mock_manager, "123")

        mock_dialog_data.__setitem__.assert_called_with("selected_event_id", 123)
        mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_events_set_filter(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."""
        await on_events_set_filter(mock_callback, MagicMock(), mock_manager)

        mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_event_delete(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_manager.dialog_data = {"selected_event_id": 123}
        mock_manager.middleware_data["session_factory"] = AsyncMock()

        # –ú–æ–∫–∞–µ–º EventsManager
        with patch("bot.dialogs.admin_menu.EventsManager") as mock_events_manager:
            mock_instance = AsyncMock()
            mock_events_manager.return_value = mock_instance
            mock_instance.delete_event.return_value = True

            await on_event_delete(mock_callback, MagicMock(), mock_manager)

            mock_callback.answer.assert_called_with("üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ")
            mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_event_toggle_publish(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_manager.dialog_data = {"event_id": 123}
        mock_manager.middleware_data["session_factory"] = AsyncMock()

        # –ú–æ–∫–∞–µ–º EventsManager
        with patch("bot.dialogs.admin_menu.EventsManager") as mock_events_manager:
            mock_instance = AsyncMock()
            mock_events_manager.return_value = mock_instance
            mock_event = AsyncMock()
            mock_event.is_published = True
            mock_event.title = "Test Event"
            mock_instance.get_event.return_value = mock_event
            mock_instance.update_event.return_value = True

            await on_event_toggle_publish(mock_callback, MagicMock(), mock_manager)

            mock_callback.answer.assert_called_once()
            mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_event_edit_menu(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
        await on_event_edit_menu(mock_callback, MagicMock(), mock_manager)

        mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_event_edit_title(self, mock_message, mock_manager):
        """–¢–µ—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_message.text = "New Title"
        mock_manager.dialog_data = {"event_id": 123}
        mock_manager.middleware_data["session_factory"] = AsyncMock()

        # –ú–æ–∫–∞–µ–º EventsManager
        with patch("bot.dialogs.admin_menu.EventsManager") as mock_events_manager:
            mock_instance = AsyncMock()
            mock_events_manager.return_value = mock_instance
            mock_instance.update_event.return_value = True

            await on_event_edit_title(mock_message, MagicMock(), mock_manager, "New Title")

            mock_message.answer.assert_called_once()
            mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_event_edit_location(self, mock_message, mock_manager):
        """–¢–µ—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_message.text = "New Location"
        mock_manager.dialog_data = {"event_id": 123}
        mock_manager.middleware_data["session_factory"] = AsyncMock()

        # –ú–æ–∫–∞–µ–º EventsManager
        with patch("bot.dialogs.admin_menu.EventsManager") as mock_events_manager:
            mock_instance = AsyncMock()
            mock_events_manager.return_value = mock_instance
            mock_instance.update_event.return_value = True

            await on_event_edit_location(mock_message, MagicMock(), mock_manager, "New Location")

            mock_message.answer.assert_called_once()
            mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_event_create(self, mock_message, mock_manager):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_message.text = "New Event"
        mock_manager.middleware_data["session_factory"] = AsyncMock()

        # –ú–æ–∫–∞–µ–º EventsManager
        with patch("bot.dialogs.admin_menu.EventsManager") as mock_events_manager:
            mock_instance = AsyncMock()
            mock_events_manager.return_value = mock_instance
            mock_instance.create_event.return_value = 123

            await on_event_create(mock_message, MagicMock(), mock_manager, "New Event")

            mock_message.answer.assert_called_once()
            mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_cr_title(self, mock_message, mock_manager):
        """–¢–µ—Å—Ç –≤–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
        mock_message.text = "Event Title"

        await on_cr_title(mock_message, MagicMock(), mock_manager, "Event Title")

        mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_cr_location(self, mock_message, mock_manager):
        """–¢–µ—Å—Ç –≤–≤–æ–¥–∞ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
        mock_message.text = "Event Location"

        await on_cr_location(mock_message, MagicMock(), mock_manager, "Event Location")

        mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_cr_desc(self, mock_message, mock_manager):
        """–¢–µ—Å—Ç –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
        mock_message.text = "Event Description"

        await on_cr_desc(mock_message, MagicMock(), mock_manager, "Event Description")

        mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_cr_link(self, mock_message, mock_manager):
        """–¢–µ—Å—Ç –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
        mock_message.text = "https://example.com"

        await on_cr_link(mock_message, MagicMock(), mock_manager, "https://example.com")

        mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_cr_confirm(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ dialog_data
        mock_manager.dialog_data = {
            "cr_title": "Test Event",
            "cr_date": "25.12.2024",
            "cr_time": "19:00",
            "cr_location": "Test Place",
            "cr_desc": "Test Description",
            "cr_link": "https://example.com",
        }
        mock_manager.middleware_data["session_factory"] = AsyncMock()

        # –ú–æ–∫–∞–µ–º EventsManager
        with patch("bot.dialogs.admin_menu.EventsManager") as mock_events_manager:
            mock_instance = AsyncMock()
            mock_events_manager.return_value = mock_instance
            mock_instance.create_event.return_value = 123

            await on_cr_confirm(mock_callback, MagicMock(), mock_manager)

            mock_callback.answer.assert_called_once()
            mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_get_semester_settings_data(self, mock_manager):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ–º–µ—Å—Ç—Ä–æ–≤."""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_manager.middleware_data["session_factory"] = AsyncMock()

        # –ú–æ–∫–∞–µ–º SemesterSettingsManager
        with patch("bot.dialogs.admin_menu.SemesterSettingsManager") as mock_settings_manager:
            mock_instance = AsyncMock()
            mock_settings_manager.return_value = mock_instance
            mock_instance.get_formatted_settings.return_value = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–º–µ—Å—Ç—Ä–æ–≤"

            result = await get_semester_settings_data(mock_manager)

            assert "semester_settings_text" in result
            assert result["semester_settings_text"] == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–º–µ—Å—Ç—Ä–æ–≤"

    @pytest.mark.asyncio
    async def test_on_user_id_input(self, mock_message, mock_manager):
        """–¢–µ—Å—Ç –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        mock_message.text = "123456789"

        await on_user_id_input(mock_message, MagicMock(), mock_manager, "123456789")

        mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_new_group_input(self, mock_message, mock_manager):
        """–¢–µ—Å—Ç –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã."""
        mock_message.text = "NEW_GROUP"
        mock_message.answer = AsyncMock()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_manager.dialog_data = {"found_user_info": {"user_id": 123, "group": "OLD_GROUP"}}
        mock_manager.middleware_data["manager"] = AsyncMock()
        mock_manager.middleware_data["manager"]._schedules = {"NEW_GROUP": {}}
        mock_manager.middleware_data["user_data_manager"] = AsyncMock()

        await on_new_group_input(mock_message, MagicMock(), mock_manager, "NEW_GROUP")

        mock_manager.switch_to.assert_called_once()
        mock_message.answer.assert_called_with(
            "‚úÖ –ì—Ä—É–ø–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>123</code> —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>NEW_GROUP</b>."
        )

    @pytest.mark.asyncio
    async def test_build_segment_users(self, mock_manager):
        """–¢–µ—Å—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞."""
        from datetime import datetime

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_user_data_manager = AsyncMock()
        mock_user_data_manager.get_all_user_ids.return_value = [123, 456, 789]

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è get_full_user_info, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
        mock_user_info = MagicMock()
        mock_user_info.user_id = 123
        mock_user_info.group = "TEST_GROUP"
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º datetime –≤–º–µ—Å—Ç–æ date
        mock_user_info.last_active_date = datetime.now()
        mock_user_data_manager.get_full_user_info.return_value = mock_user_info

        # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        result = await build_segment_users(mock_user_data_manager, "TEST", 7)

        assert isinstance(result, list)
        assert 123 in result

    @pytest.mark.asyncio
    async def test_on_period_selected(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ."""
        from aiogram_dialog.widgets.kbd import Select

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è dialog_data
        mock_dialog_data = MagicMock()
        mock_manager.dialog_data = mock_dialog_data

        await on_period_selected(mock_callback, MagicMock(spec=Select), mock_manager, "7")

        mock_dialog_data.__setitem__.assert_called_with("stats_period", 7)

    @pytest.mark.asyncio
    async def test_on_check_graduated_groups(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø—É—Å—Ç–∏–≤—à–∏—Ö—Å—è –≥—Ä—É–ø–ø."""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_manager.middleware_data["user_data_manager"] = AsyncMock()
        mock_manager.middleware_data["manager"] = AsyncMock()
        mock_manager.middleware_data["redis_client"] = AsyncMock()

        with patch("bot.scheduler.handle_graduated_groups") as mock_check:
            await on_check_graduated_groups(mock_callback, MagicMock(), mock_manager)

            mock_callback.answer.assert_called_once_with("üîç –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—ã–ø—É—Å—Ç–∏–≤—à–∏—Ö—Å—è –≥—Ä—É–ø–ø...")
            mock_manager.middleware_data["bot"].send_message.assert_called()
            mock_check.assert_called_once()

    @pytest.mark.asyncio
    async def test_build_segment_users_empty(self, mock_manager):
        """–¢–µ—Å—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—É—Å—Ç—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º."""
        from datetime import datetime

        from bot.dialogs.admin_menu import build_segment_users

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_user_data_manager = AsyncMock()
        mock_user_data_manager.get_all_user_ids.return_value = []

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º
        result = await build_segment_users(mock_user_data_manager, None, None)

        assert result == []
        mock_user_data_manager.get_all_user_ids.assert_called_once()

    @pytest.mark.asyncio
    async def test_build_segment_users_with_group_prefix(self, mock_manager):
        """–¢–µ—Å—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –≥—Ä—É–ø–ø—ã."""
        from datetime import datetime

        from bot.dialogs.admin_menu import build_segment_users

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_user_data_manager = AsyncMock()
        mock_user_data_manager.get_all_user_ids.return_value = [1, 2, 3]

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å—É
        mock_user_info = MagicMock()
        mock_user_info.group = "–û735–ë"
        mock_user_info.last_active_date = datetime.now()
        mock_user_data_manager.get_full_user_info.return_value = mock_user_info

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "–û7"
        result = await build_segment_users(mock_user_data_manager, "–û7", None)

        assert isinstance(result, list)
        mock_user_data_manager.get_all_user_ids.assert_called_once()

    @pytest.mark.asyncio
    async def test_build_segment_users_with_days_filter(self, mock_manager):
        """–¢–µ—Å—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –¥–Ω—è–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
        from datetime import datetime, timedelta

        from bot.dialogs.admin_menu import build_segment_users

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_user_data_manager = AsyncMock()
        mock_user_data_manager.get_all_user_ids.return_value = [1]

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ù–ï –∞–∫—Ç–∏–≤–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        mock_user_info = MagicMock()
        mock_user_info.group = "–û735–ë"
        mock_user_info.last_active_date = datetime.now() - timedelta(days=10)  # –°–ª–∏—à–∫–æ–º –¥–∞–≤–Ω–æ
        mock_user_data_manager.get_full_user_info.return_value = mock_user_info

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ñ–∏–ª—å—Ç—Ä–æ–º 7 –¥–Ω–µ–π
        result = await build_segment_users(mock_user_data_manager, None, 7)

        assert result == []  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–ø–∞—Å—Ç—å –≤ –≤—ã–±–æ—Ä–∫—É

    @pytest.mark.asyncio
    async def test_get_preview_data_text_message(self, mock_manager):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_manager.dialog_data.get.side_effect = lambda key: {
            "segment_group_prefix": "–û7",
            "segment_days_active": 7,
            "segment_template": "–ü—Ä–∏–≤–µ—Ç {username}!",
            "segment_message_type": "text",
        }.get(key)

        mock_user_data_manager = AsyncMock()
        mock_user_data_manager.get_all_user_ids.return_value = [1]

        mock_user_info = MagicMock()
        mock_user_info.user_id = 1
        mock_user_info.username = "testuser"
        mock_user_info.group = "–û735–ë"
        mock_user_info.last_active_date = datetime.now()
        mock_user_data_manager.get_full_user_info.return_value = mock_user_info

        mock_manager.middleware_data["user_data_manager"] = mock_user_data_manager

        # –ú–æ–∫–∞–µ–º build_segment_users
        with patch("bot.dialogs.admin_menu.build_segment_users", return_value=[1]) as mock_build:
            result = await get_preview_data(mock_manager)

            assert "preview_text" in result
            assert "selected_count" in result
            assert result["selected_count"] == 1

    @pytest.mark.asyncio
    async def test_get_preview_data_media_message(self, mock_manager):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_manager.dialog_data.get.side_effect = lambda key: {
            "segment_group_prefix": None,
            "segment_days_active": None,
            "segment_template": "",
            "segment_message_type": "media",
            "segment_message_chat_id": -123,
            "segment_message_id": 456,
        }.get(key)

        mock_user_data_manager = AsyncMock()
        mock_manager.middleware_data["user_data_manager"] = mock_user_data_manager

        # –ú–æ–∫–∞–µ–º build_segment_users
        with patch("bot.dialogs.admin_menu.build_segment_users", return_value=[1, 2]) as mock_build:
            result = await get_preview_data(mock_manager)

            assert "preview_text" in result
            assert "selected_count" in result
            assert result["selected_count"] == 2
            assert "–º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ" in result["preview_text"]

    @pytest.mark.asyncio
    async def test_get_preview_data_no_users(self, mock_manager):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_manager.dialog_data.get.side_effect = lambda key: {
            "segment_group_prefix": "–û7",
            "segment_days_active": 7,
            "segment_template": "–ü—Ä–∏–≤–µ—Ç {username}!",
            "segment_message_type": "text",
        }.get(key)

        mock_user_data_manager = AsyncMock()
        mock_manager.middleware_data["user_data_manager"] = mock_user_data_manager

        # –ú–æ–∫–∞–µ–º build_segment_users —Å –ø—É—Å—Ç—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        with patch("bot.dialogs.admin_menu.build_segment_users", return_value=[]) as mock_build:
            result = await get_preview_data(mock_manager)

            assert "preview_text" in result
            assert "selected_count" in result
            assert result["selected_count"] == 0

    @pytest.mark.asyncio
    async def test_on_period_selected_1_day(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ 1 –¥–µ–Ω—å."""
        from aiogram_dialog.widgets.kbd import Select

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è dialog_data
        mock_dialog_data = MagicMock()
        mock_manager.dialog_data = mock_dialog_data

        await on_period_selected(mock_callback, MagicMock(spec=Select), mock_manager, "1")

        mock_dialog_data.__setitem__.assert_called_with("stats_period", 1)

    @pytest.mark.asyncio
    async def test_on_period_selected_30_days(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ 30 –¥–Ω–µ–π."""
        from aiogram_dialog.widgets.kbd import Select

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è dialog_data
        mock_dialog_data = MagicMock()
        mock_manager.dialog_data = mock_dialog_data

        await on_period_selected(mock_callback, MagicMock(spec=Select), mock_manager, "30")

        mock_dialog_data.__setitem__.assert_called_with("stats_period", 30)

    @pytest.mark.asyncio
    async def test_get_event_admin_details_found(self, mock_manager):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–Ω–∞–π–¥–µ–Ω–æ)."""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_manager.dialog_data.get.return_value = 1

        mock_session_factory = AsyncMock()
        mock_manager.middleware_data["session_factory"] = mock_session_factory

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        mock_event = MagicMock()
        mock_event.title = "Test Event"
        mock_event.id = 1
        mock_event.is_published = True
        mock_event.start_at = None
        mock_event.location = None
        mock_event.link = None
        mock_event.description = "Test Description"

        with patch("bot.dialogs.admin_menu.EventsManager") as mock_events_manager:
            mock_instance = AsyncMock()
            mock_events_manager.return_value = mock_instance
            mock_instance.get_event.return_value = mock_event

            result = await get_event_admin_details(mock_manager)

            assert "event_text" in result
            assert "Test Event" in result["event_text"]
            assert "id=1" in result["event_text"]

    @pytest.mark.asyncio
    async def test_get_event_admin_details_not_found(self, mock_manager):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–Ω–µ –Ω–∞–π–¥–µ–Ω–æ)."""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_manager.dialog_data.get.return_value = 999

        mock_session_factory = AsyncMock()
        mock_manager.middleware_data["session_factory"] = mock_session_factory

        with patch("bot.dialogs.admin_menu.EventsManager") as mock_events_manager:
            mock_instance = AsyncMock()
            mock_events_manager.return_value = mock_instance
            mock_instance.get_event.return_value = None

            result = await get_event_admin_details(mock_manager)

            assert result["event_text"] == "–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

    @pytest.mark.asyncio
    async def test_get_event_admin_details_with_date_time(self, mock_manager):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º."""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_manager.dialog_data.get.return_value = 1

        mock_session_factory = AsyncMock()
        mock_manager.middleware_data["session_factory"] = mock_session_factory

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –¥–∞—Ç–æ–π
        mock_event = MagicMock()
        mock_event.title = "Test Event"
        mock_event.id = 1
        mock_event.is_published = False
        mock_event.start_at = datetime(2025, 1, 15, 14, 30)  # 15.01.2025 14:30
        mock_event.location = "Test Location"
        mock_event.link = "https://example.com"
        mock_event.description = "Test Description"

        with patch("bot.dialogs.admin_menu.EventsManager") as mock_events_manager:
            mock_instance = AsyncMock()
            mock_events_manager.return_value = mock_instance
            mock_instance.get_event.return_value = mock_event

            result = await get_event_admin_details(mock_manager)

            assert "event_text" in result
            assert "15.01.2025 14:30" in result["event_text"]
            assert "Test Location" in result["event_text"]
            assert "https://example.com" in result["event_text"]

    @pytest.mark.asyncio
    async def test_on_events_prev_first_page(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
        mock_manager.dialog_data = {"events_page": 0}

        await on_events_prev(mock_callback, MagicMock(), mock_manager)

        # –î–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ 0
        assert mock_manager.dialog_data["events_page"] == 0
        mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_events_next_normal(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ."""
        mock_manager.dialog_data = {"events_page": 2}

        await on_events_next(mock_callback, MagicMock(), mock_manager)

        assert mock_manager.dialog_data["events_page"] == 3
        mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_events_set_filter_all(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞ '–≤—Å–µ'."""
        await on_events_set_filter(mock_callback, MagicMock(), mock_manager)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä –±—ã–ª —Å–±—Ä–æ—à–µ–Ω –Ω–∞ 'all'
        assert mock_manager.dialog_data["events_page"] == 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è
        mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_get_events_list_with_search(self, mock_manager):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å –ø–æ–∏—Å–∫–æ–º."""

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º dialog_data
        def mock_get_side_effect(key, default=0):
            if key == "events_page":
                return 0
            elif key == "events_pub_filter":
                return "all"
            elif key == "events_search":
                return "test search"
            else:
                return default

        mock_manager.dialog_data.get.side_effect = mock_get_side_effect
        mock_manager.dialog_data.__setitem__ = MagicMock()

        with patch("bot.dialogs.admin_menu.EventsManager") as mock_events_manager:
            mock_instance = AsyncMock()
            mock_events_manager.return_value = mock_instance

            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            mock_event = MagicMock()
            mock_event.title = "Test Event with test search"
            mock_event.description = "Description"
            mock_event.location = "Location"
            mock_event.id = 1
            mock_event.is_published = True

            mock_instance.list_events.return_value = ([mock_event], 1)

            result = await get_events_list(mock_manager)

            assert "events_text" in result
            assert "total_events" in result
            assert result["total_events"] == 1
