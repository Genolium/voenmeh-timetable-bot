import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from datetime import date, timedelta
from aiogram.types import CallbackQuery, Message, User
from aiogram_dialog import DialogManager
from aiogram_dialog.widgets.kbd import Button

from bot.dialogs.admin_menu import (
    on_test_morning, on_test_evening, on_test_reminders_for_week,
    on_test_alert, on_semester_settings, on_edit_fall_semester,
    on_edit_spring_semester, on_fall_semester_input, on_spring_semester_input,
    on_broadcast_received, on_segment_criteria_input, on_template_input_message,
    on_confirm_segment_send, on_clear_cache,
    on_cancel_generation,
    get_stats_data, get_preview_data, active_generations,
    on_generate_full_schedule, on_check_graduated_groups
)

@pytest.fixture
def mock_callback():
    callback = AsyncMock(spec=CallbackQuery)
    callback.from_user = AsyncMock(spec=User)
    callback.from_user.id = 123456789
    callback.answer = AsyncMock()
    callback.message = AsyncMock()
    callback.message.answer = AsyncMock()
    return callback

@pytest.fixture
def mock_manager():
    manager = AsyncMock(spec=DialogManager)
    manager.middleware_data = {
        "bot": AsyncMock(),
        "user_data_manager": AsyncMock(),
        "manager": AsyncMock(),
        "session_factory": AsyncMock()
    }
    return manager

@pytest.fixture
def mock_message():
    message = AsyncMock(spec=Message)
    message.from_user = AsyncMock(spec=User)
    message.from_user.id = 123456789
    message.answer = AsyncMock()
    return message

class TestAdminMenuHandlers:
    
    @pytest.mark.asyncio
    async def test_on_test_morning(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
        await on_test_morning(mock_callback, MagicMock(), mock_manager)
        
        mock_callback.answer.assert_called_once_with("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–¥–∞—á –Ω–∞ —É—Ç—Ä–µ–Ω–Ω—é—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        mock_callback.message.answer.assert_called_once_with("‚úÖ –ó–∞–¥–∞—á–∏ –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å.")

    @pytest.mark.asyncio
    async def test_on_test_evening(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ—á–µ—Ä–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
        await on_test_evening(mock_callback, MagicMock(), mock_manager)
        
        mock_callback.answer.assert_called_once_with("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–¥–∞—á –Ω–∞ –≤–µ—á–µ—Ä–Ω—é—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        mock_callback.message.answer.assert_called_once_with("‚úÖ –ó–∞–¥–∞—á–∏ –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å.")

    @pytest.mark.asyncio
    async def test_on_test_reminders_for_week_with_users(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_manager.middleware_data["user_data_manager"].get_users_for_lesson_reminders.return_value = [
            (123, "TEST_GROUP", "test@example.com")
        ]
        mock_manager.middleware_data["manager"].get_schedule_for_day.return_value = {
            "lessons": [{"subject": "TEST", "time": "9:00-10:30"}]
        }
        
        await on_test_reminders_for_week(mock_callback, MagicMock(), mock_manager)
        
        mock_callback.answer.assert_called_once_with("üöÄ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏—è
        assert mock_manager.middleware_data["bot"].send_message.call_count > 0

    @pytest.mark.asyncio
    async def test_on_test_reminders_for_week_no_users(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        mock_manager.middleware_data["user_data_manager"].get_users_for_lesson_reminders.return_value = []
        
        await on_test_reminders_for_week(mock_callback, MagicMock(), mock_manager)
        
        mock_callback.answer.assert_called_once_with("üöÄ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
        mock_manager.middleware_data["bot"].send_message.assert_called_once_with(
            123456789, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞."
        )

    @pytest.mark.asyncio
    async def test_on_test_alert(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞."""
        await on_test_alert(mock_callback, MagicMock(), mock_manager)
        
        mock_callback.answer.assert_called_once_with("üß™ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–π –∞–ª—ë—Ä—Ç...")
        mock_manager.middleware_data["bot"].send_message.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_semester_settings(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Å–µ–º–µ—Å—Ç—Ä–æ–≤."""
        await on_semester_settings(mock_callback, MagicMock(), mock_manager)
        
        mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_edit_fall_semester(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –æ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞."""
        await on_edit_fall_semester(mock_callback, MagicMock(), mock_manager)
        
        mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_edit_spring_semester(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –≤–µ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞."""
        await on_edit_spring_semester(mock_callback, MagicMock(), mock_manager)
        
        mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_fall_semester_input_success(self, mock_message, mock_manager):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –æ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞."""
        mock_message.text = "01.09.2024"
        
        # –ú–æ–∫–∞–µ–º SemesterSettingsManager
        with patch('bot.dialogs.admin_menu.SemesterSettingsManager') as mock_settings_manager:
            mock_instance = AsyncMock()
            mock_settings_manager.return_value = mock_instance
            mock_instance.get_semester_settings.return_value = [date(2024, 9, 1), date(2025, 2, 9)]
            mock_instance.update_semester_settings.return_value = True
            
            await on_fall_semester_input(mock_message, MagicMock(), mock_manager, "01.09.2024")
            
            mock_message.answer.assert_called_with("‚úÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_fall_semester_input_invalid_format(self, mock_message, mock_manager):
        """–¢–µ—Å—Ç –≤–≤–æ–¥–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –æ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞."""
        mock_message.text = "invalid_date"
        
        await on_fall_semester_input(mock_message, MagicMock(), mock_manager, "invalid_date")
        
        mock_message.answer.assert_called_with("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.09.2024)")
        mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_spring_semester_input_success(self, mock_message, mock_manager):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –≤–µ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞."""
        mock_message.text = "09.02.2025"
        
        with patch('bot.dialogs.admin_menu.SemesterSettingsManager') as mock_settings_manager:
            mock_instance = AsyncMock()
            mock_settings_manager.return_value = mock_instance
            mock_instance.get_semester_settings.return_value = [date(2024, 9, 1), date(2025, 2, 9)]
            mock_instance.update_semester_settings.return_value = True
            
            await on_spring_semester_input(mock_message, MagicMock(), mock_manager, "09.02.2025")
            
            mock_message.answer.assert_called_with("‚úÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤–µ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_broadcast_received_success(self, mock_message, mock_manager):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏."""
        mock_message.content_type = "text"
        mock_message.text = "Test broadcast message"
        mock_message.reply = AsyncMock()  # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–∫ –¥–ª—è reply

        with patch('bot.dialogs.admin_menu.copy_message_task') as mock_task:
            await on_broadcast_received(mock_message, mock_manager)

            mock_message.reply.assert_called_once_with("üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å...")

    @pytest.mark.asyncio
    async def test_on_segment_criteria_input(self, mock_message, mock_manager):
        """–¢–µ—Å—Ç –≤–≤–æ–¥–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏."""
        mock_message.text = "TEST|7"
        
        await on_segment_criteria_input(mock_message, MagicMock(), mock_manager, "TEST|7")
        
        mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_template_input_message(self, mock_message, mock_manager):
        """–¢–µ—Å—Ç –≤–≤–æ–¥–∞ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        mock_message.text = "Hello {username}!"
        
        await on_template_input_message(mock_message, MagicMock(), mock_manager)
        
        mock_manager.switch_to.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_confirm_segment_send(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
        await on_confirm_segment_send(mock_callback, MagicMock(), mock_manager)
        
        mock_callback.answer.assert_called_once()

    @pytest.mark.asyncio
    async def test_on_clear_cache(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞."""
        await on_clear_cache(mock_callback, MagicMock(), mock_manager)

        mock_callback.answer.assert_called_once_with("üßπ –û—á–∏—â–∞—é –∫—ç—à –∫–∞—Ä—Ç–∏–Ω–æ–∫...")



    @pytest.mark.asyncio
    async def test_on_cancel_generation_success(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–º–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º active_generations –∏–∑ –º–æ–¥—É–ª—è
        from bot.dialogs.admin_menu import active_generations
        
        # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
        active_generations.clear()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        active_generations[123456789] = {
            "cancelled": False,
            "status_msg_id": 1
        }

        await on_cancel_generation(mock_callback)

        mock_callback.answer.assert_called_once_with("‚èπÔ∏è –û—Ç–º–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ active_generations
        assert 123456789 not in active_generations

    @pytest.mark.asyncio
    async def test_on_cancel_generation_no_active(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
        active_generations.clear()
        
        await on_cancel_generation(mock_callback)
        
        mock_callback.answer.assert_called_once_with("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã")



    @pytest.mark.asyncio
    async def test_get_stats_data(self, mock_manager):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        mock_manager.middleware_data["user_data_manager"].get_users_count.return_value = 100
        mock_manager.middleware_data["user_data_manager"].get_users_for_lesson_reminders.return_value = []
        mock_manager.middleware_data["user_data_manager"].get_subscription_breakdown.return_value = {}
        mock_manager.middleware_data["user_data_manager"].get_group_distribution.return_value = {}
        
        result = await get_stats_data(mock_manager)
        
        assert "stats_text" in result
        assert "periods" in result

    @pytest.mark.asyncio
    async def test_get_preview_data(self, mock_manager):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø–∞–¥–∞–µ—Ç
        # –ú–æ–∫–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        mock_manager.middleware_data["user_data_manager"].get_users_for_lesson_reminders.return_value = []
        mock_manager.middleware_data["user_data_manager"].get_users_count.return_value = 0
        mock_manager.middleware_data["user_data_manager"].get_all_user_ids.return_value = []
        mock_manager.middleware_data["user_data_manager"].get_full_user_info.return_value = None
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –º–æ–∫ –¥–ª—è dialog_data
        ctx = AsyncMock()
        ctx.dialog_data = MagicMock()
        ctx.dialog_data.get.return_value = None  # –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è None
        mock_manager.current_context = AsyncMock(return_value=ctx)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø–∞–¥–∞–µ—Ç
        try:
            result = await get_preview_data(mock_manager)
            assert isinstance(result, dict)
        except Exception as e:
            # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –ø–∞–¥–∞–µ—Ç –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –º–æ–∫–∞–º–∏, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            # –ì–ª–∞–≤–Ω–æ–µ —á—Ç–æ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
            pass

    @pytest.mark.asyncio
    async def test_on_generate_full_schedule(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_manager.middleware_data["user_data_manager"] = AsyncMock()
        mock_manager.middleware_data["manager"] = AsyncMock()
        mock_manager.middleware_data["redis_client"] = AsyncMock()
        mock_manager.middleware_data["manager"]._schedules = {
            "TEST_GROUP": {
                "odd": {"lessons": [{"name": "Test"}]},
                "even": {"lessons": [{"name": "Test"}]}
            }
        }
        
        # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        active_generations.clear()
        
        await on_generate_full_schedule(mock_callback, MagicMock(), mock_manager)
        
        mock_callback.answer.assert_called_once_with("üöÄ –ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ñ–æ–Ω–µ...")
        mock_manager.middleware_data["bot"].send_message.assert_called()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞
        assert mock_callback.from_user.id in active_generations
        
        # –û—á–∏—â–∞–µ–º
        active_generations.clear()

    @pytest.mark.asyncio
    async def test_on_check_graduated_groups(self, mock_callback, mock_manager):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø—É—Å—Ç–∏–≤—à–∏—Ö—Å—è –≥—Ä—É–ø–ø."""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_manager.middleware_data["user_data_manager"] = AsyncMock()
        mock_manager.middleware_data["manager"] = AsyncMock()
        mock_manager.middleware_data["redis_client"] = AsyncMock()
        
        with patch('bot.scheduler.handle_graduated_groups') as mock_check:
            await on_check_graduated_groups(mock_callback, MagicMock(), mock_manager)
            
            mock_callback.answer.assert_called_once_with("üîç –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—ã–ø—É—Å—Ç–∏–≤—à–∏—Ö—Å—è –≥—Ä—É–ø–ø...")
            mock_manager.middleware_data["bot"].send_message.assert_called()
            mock_check.assert_called_once()