import pytest
from unittest.mock import AsyncMock, MagicMock, ANY

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
from bot.dialogs.admin_menu import on_test_morning, on_broadcast_received, get_stats_data
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –º–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è
from bot.tasks import copy_message_task 
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫—É –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
from core.metrics import TASKS_SENT_TO_QUEUE 

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã Admin.stats –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω
from bot.dialogs.states import Admin 

@pytest.fixture
def mock_manager(mocker):
    manager = AsyncMock()
    manager.middleware_data = {
        "bot": AsyncMock(),
        "user_data_manager": AsyncMock()
    }
    # –ú–û–ö–ò–†–û–í–ê–ù–ò–ï –ê–ö–¢–û–†–ê: –ú—ã –º–æ–∫–∏—Ä—É–µ–º *–º–µ—Ç–æ–¥ `send`* –∞–∫—Ç–æ—Ä–∞ Dramatiq,
    # —á—Ç–æ–±—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –æ—á–µ—Ä–µ–¥—å –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞.
    mocker.patch('bot.tasks.copy_message_task.send', new_callable=MagicMock) 
    
    # –ú–û–ö–ò–†–û–í–ê–ù–ò–ï –ú–ï–¢–†–ò–ö–ò: –ú–æ–∫–∏—Ä—É–µ–º –≤—ã–∑–æ–≤—ã `labels().inc()` –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏,
    # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ Prometheus-–∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ.
    mocker.patch('core.metrics.TASKS_SENT_TO_QUEUE.labels', return_value=MagicMock(inc=MagicMock()))

    return manager

@pytest.mark.asyncio
class TestAdminMenu:
    async def test_on_test_broadcast_click(self, mock_manager, mocker):
        # –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å
        mocker.patch('bot.dialogs.admin_menu.morning_summary_broadcast', new_callable=AsyncMock)
        mock_callback = AsyncMock()
        mock_callback.message.answer = AsyncMock()
        
        await on_test_morning(mock_callback, None, mock_manager)
        
        mock_callback.answer.assert_called_once_with("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–¥–∞—á –Ω–∞ —É—Ç—Ä–µ–Ω–Ω—é—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        mock_callback.message.answer.assert_called_once_with("‚úÖ –ó–∞–¥–∞—á–∏ –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å.")

    async def test_get_stats_data(self, mock_manager):
        udm = mock_manager.middleware_data["user_data_manager"]
        udm.get_total_users_count.return_value = 100
        udm.get_new_users_count.side_effect = [10, 50]
        udm.get_subscribed_users_count.return_value = 25
        udm.get_active_users_by_period.side_effect = [15, 60, 90]
        udm.get_top_groups.return_value = [("–û735–ë", 20)]
        
        data = await get_stats_data(user_data_manager=udm)
        
        stats_text = data["stats_text"]
        assert "–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>100</b>" in stats_text
        assert "–ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: <b>10</b>" in stats_text
        assert "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å: <b>15</b>" in stats_text
        assert "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: <b>60</b>" in stats_text
        assert "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü: <b>90</b>" in stats_text
        assert "–° –ø–æ–¥–ø–∏—Å–∫–∞–º–∏: <b>25</b>" in stats_text
        assert "- –û735–ë: 20" in stats_text

    async def test_on_broadcast_received(self, mock_manager):
        udm = mock_manager.middleware_data["user_data_manager"]
        bot = mock_manager.middleware_data["bot"] 
        udm.get_all_user_ids.return_value = [1, 2, 3] # –¢—Ä–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        
        mock_message = AsyncMock()
        mock_message.from_user.id = 999 # ID –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É
        mock_message.chat.id = 999 # Chat ID, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–±—ã—á–Ω–æ —Ç–æ—Ç –∂–µ, —á—Ç–æ –∏ from_user.id –¥–ª—è –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º)
        mock_message.message_id = 12345 # ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
        
        await on_broadcast_received(mock_message, None, mock_manager)
        
        assert copy_message_task.send.call_count == 3
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–∞–∂–¥–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∞–∫—Ç–æ—Ä–∞
        copy_message_task.send.assert_any_call(1, 999, 12345)
        copy_message_task.send.assert_any_call(2, 999, 12345)
        copy_message_task.send.assert_any_call(3, 999, 12345)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥—å
        bot.send_message.assert_called_with(999, ANY)
        assert "–ó–∞–¥–∞—á–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å!" in bot.send_message.call_args.args[1]