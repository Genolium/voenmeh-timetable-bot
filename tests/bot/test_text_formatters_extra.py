import pytest
from datetime import datetime, date

from bot.text_formatters import (
    format_schedule_text,
    format_teacher_schedule_text,
    format_classroom_schedule_text,
    format_full_week_text,
    generate_dynamic_header,
)
from core.config import MOSCOW_TZ


class TestFormatScheduleText:
    def test_returns_error_when_no_data(self):
        assert "–û—à–∏–±–∫–∞" in format_schedule_text({})

    def test_returns_error_when_no_date(self):
        text = format_schedule_text({'lessons': []})
        assert "–î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" in text

    def test_no_lessons_branch(self):
        text = format_schedule_text({'date': date(2025, 1, 1), 'day_name': '–°—Ä–µ–¥–∞', 'week_name': '–ß–µ—Ç–Ω–∞—è', 'lessons': []})
        assert "–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç" in text

    def test_lessons_with_details(self):
        day_info = {
            'date': date(2025, 1, 1),
            'day_name': '–°—Ä–µ–¥–∞',
            'week_name': '–ß–µ—Ç–Ω–∞—è',
            'lessons': [
                {'time': '09:00-10:30', 'subject': '–ú–∞—Ç–∞–Ω', 'type': '–õ–µ–∫—Ü–∏—è', 'teachers': '–ò–≤–∞–Ω–æ–≤', 'room': '101'},
                {'time': '10:40-12:10', 'subject': '–§–∏–∑–∏–∫–∞'},
            ],
        }
        text = format_schedule_text(day_info)
        assert "–ú–∞—Ç–∞–Ω" in text and "–ò–≤–∞–Ω–æ–≤" in text and "101" in text
        assert "–§–∏–∑–∏–∫–∞" in text


class TestTeacherFormatter:
    def test_teacher_error_branch(self):
        assert "–û—à–∏–±–∫–∞" in format_teacher_schedule_text({'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'})

    def test_teacher_no_lessons(self):
        info = {'teacher': '–ü–µ—Ç—Ä–æ–≤', 'date': date(2025, 1, 2), 'day_name': '–ß–µ—Ç–≤–µ—Ä–≥', 'lessons': []}
        text = format_teacher_schedule_text(info)
        assert "–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç" in text

    def test_teacher_with_lessons(self):
        info = {
            'teacher': '–°–∏–¥–æ—Ä–æ–≤',
            'date': date(2025, 1, 2),
            'day_name': '–ß–µ—Ç–≤–µ—Ä–≥',
            'lessons': [
                {'time': '12:00-13:30', 'subject': '–¢–ê–£', 'groups': ['–û735–ë']},
            ],
        }
        text = format_teacher_schedule_text(info)
        assert "–¢–ê–£" in text and "–û735–ë" in text


class TestClassroomFormatter:
    def test_classroom_error_branch(self):
        assert "–û—à–∏–±–∫–∞" in format_classroom_schedule_text({'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'})

    def test_classroom_no_lessons(self):
        info = {'classroom': '505', 'date': date(2025, 1, 3), 'day_name': '–ü—è—Ç–Ω–∏—Ü–∞', 'lessons': []}
        text = format_classroom_schedule_text(info)
        assert "–ê—É–¥–∏—Ç–æ—Ä–∏—è —Å–≤–æ–±–æ–¥–Ω–∞" in text

    def test_classroom_with_lessons(self):
        info = {
            'classroom': '505',
            'date': date(2025, 1, 3),
            'day_name': '–ü—è—Ç–Ω–∏—Ü–∞',
            'lessons': [
                {'time': '08:30-10:00', 'subject': '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', 'teachers': '–°–º–∏—Ä–Ω–æ–≤'},
            ],
        }
        text = format_classroom_schedule_text(info)
        assert "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞" in text and "–°–º–∏—Ä–Ω–æ–≤" in text


class TestFullWeekFormatter:
    def test_week_with_no_lessons(self):
        text = format_full_week_text({}, '–Ω–µ—á–µ—Ç–Ω–∞—è')
        assert "–∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç" in text

    def test_week_orders_days_and_lessons(self):
        week = {
            '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': [
                {'time': '10:40-12:10', 'subject': '–§–∏–∑–∏–∫–∞'},
                {'time': '09:00-10:30', 'subject': '–ú–∞—Ç–∞–Ω'},
            ],
            '–ü—è—Ç–Ω–∏—Ü–∞': [
                {'time': '11:00-12:30', 'subject': '–ò—Å—Ç–æ—Ä–∏—è', 'type': '—Å–µ–º–∏–Ω–∞—Ä', 'room': '101', 'teachers': '–ò–≤–∞–Ω–æ–≤'},
            ],
        }
        text = format_full_week_text(week, '–Ω–µ—á–µ—Ç–Ω–∞—è')
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ–ª–µ–µ —Ä–∞–Ω–Ω—è—è –ø–∞—Ä–∞ –∏–¥—ë—Ç –ø–µ—Ä–≤–æ–π
        assert text.index('09:00-10:30') < text.index('10:40-12:10')
        assert '–ò—Å—Ç–æ—Ä–∏—è' in text and '–ò–≤–∞–Ω–æ–≤' in text and 'üìç 101' in text


def test_generate_dynamic_header_handles_exceptions(mocker):
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–æ–≤—É—Ç KeyError –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
    lessons = [{'time': '09:00-10:30'}]  # –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç start_time_raw/end_time_raw
    today = datetime.now(MOSCOW_TZ).date()
    mocker.patch('bot.text_formatters.logging')
    header, progress = generate_dynamic_header(lessons, today)
    assert header == ""
    assert progress == ""


