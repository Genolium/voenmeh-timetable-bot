#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–ø—É—Å—Ç–∏–≤—à–∏—Ö—Å—è –≥—Ä—É–ø–ø
"""

import asyncio
import json
from datetime import datetime
from pathlib import Path

async def test_graduated_groups_handling():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–ø—É—Å—Ç–∏–≤—à–∏—Ö—Å—è –≥—Ä—É–ø–ø."""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–ø—É—Å—Ç–∏–≤—à–∏—Ö—Å—è –≥—Ä—É–ø–ø")
    print("=" * 60)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≥—Ä—É–ø–ø–∞–º–∏
    users_with_groups = [
        (123456789, "–û735–ë"),  # –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –≥—Ä—É–ø–ø–∞
        (987654321, "–ê101–°"),  # –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –≥—Ä—É–ø–ø–∞
        (111222333, "–í–´–ü–£–°–ö–ù–ò–ö–ò_2024"),  # –í—ã–ø—É—Å—Ç–∏–≤—à–∞—è—Å—è –≥—Ä—É–ø–ø–∞
        (444555666, "–°–¢–ê–†–ê–Ø_–ì–†–£–ü–ü–ê"),  # –í—ã–ø—É—Å—Ç–∏–≤—à–∞—è—Å—è –≥—Ä—É–ø–ø–∞
        (777888999, "–ï211–ë"),  # –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –≥—Ä—É–ø–ø–∞
    ]
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã
    current_groups = {
        "–û735–ë", "–ê101–°", "–ï211–ë", "–ê102–°", "–û736–ë", "–ï212–ë"
    }
    
    print(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(users_with_groups)}")
    print(f"üìä –ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø: {len(current_groups)}")
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–ø—É—Å—Ç–∏–≤—à–∏–µ—Å—è –≥—Ä—É–ø–ø—ã
    graduated_groups = set()
    affected_users = []
    
    for user_id, group_name in users_with_groups:
        if group_name and group_name.upper() not in current_groups:
            graduated_groups.add(group_name.upper())
            affected_users.append((user_id, group_name))
    
    print(f"\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    print(f"‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_with_groups) - len(affected_users)}")
    print(f"‚ö†Ô∏è –í—ã–ø—É—Å—Ç–∏–≤—à–∏–µ—Å—è –≥—Ä—É–ø–ø—ã: {len(graduated_groups)}")
    print(f"üë• –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(affected_users)}")
    
    if graduated_groups:
        print(f"\nüìã –í—ã–ø—É—Å—Ç–∏–≤—à–∏–µ—Å—è –≥—Ä—É–ø–ø—ã:")
        for group in graduated_groups:
            print(f"   - {group}")
    
    if affected_users:
        print(f"\nüë§ –ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
        for user_id, group in affected_users:
            print(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –≥—Ä—É–ø–ø–∞ {group}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if affected_users:
        print(f"\nüì® –ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        available_groups = sorted(list(current_groups))
        message_text = (
            f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
            f"–ì—Ä—É–ø–ø–∞ <b>{affected_users[0][1]}</b> –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.\n"
            f"–í–æ–∑–º–æ–∂–Ω–æ, –≥—Ä—É–ø–ø–∞ –≤—ã–ø—É—Å—Ç–∏–ª–∞—Å—å –∏–ª–∏ –±—ã–ª–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞.\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É:\n"
            f"<code>/start</code> - –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã: {', '.join(available_groups[:10])}"
            + (f"\n... –∏ –µ—â–µ {len(available_groups) - 10} –≥—Ä—É–ø–ø" if len(available_groups) > 10 else "")
        )
        print(message_text)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_data = {
        "timestamp": datetime.now().isoformat(),
        "graduated_groups": list(graduated_groups),
        "affected_users": len(affected_users),
        "notified_users": len(affected_users),  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã
        "current_groups_count": len(current_groups),
        "total_users_checked": len(users_with_groups)
    }
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:")
    print(json.dumps(stats_data, indent=2, ensure_ascii=False))
    
    print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(test_graduated_groups_handling())
