import asyncio
import logging
import os
import sys
import time

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.filters import Command, CommandStart
from aiogram.fsm.storage.base import DefaultKeyBuilder
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.types import BotCommand, BotCommandScopeChat, BotCommandScopeDefault, Message
from aiogram_dialog import DialogManager, StartMode, setup_dialogs
from aiogram_dialog.api.exceptions import UnknownIntent
from aiohttp import ClientTimeout
from dotenv import load_dotenv
from prometheus_client import start_http_server
from pythonjsonlogger.json import JsonFormatter
from redis.asyncio.client import Redis

# --- –ò–º–ø–æ—Ä—Ç—ã –¥–∏–∞–ª–æ–≥–æ–≤ ---
from bot.dialogs.about_menu import about_dialog
from bot.dialogs.admin_menu import admin_dialog, on_cancel_generation
from bot.dialogs.events_menu import events_dialog
from bot.dialogs.feedback_menu import feedback_dialog
from bot.dialogs.find_menu import find_dialog
from bot.dialogs.main_menu import dialog as main_menu_dialog
from bot.dialogs.schedule_view import (
    on_check_subscription_callback,
    on_inline_back,
    on_send_original_file_callback,
    schedule_dialog,
)
from bot.dialogs.settings_menu import settings_dialog

# --- –ò–º–ø–æ—Ä—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
from bot.dialogs.states import About, Admin, Events, Feedback, MainMenu, Schedule, SettingsMenu
from bot.dialogs.theme_dialog import theme_dialog
from bot.handlers.feedback_reply_handler import feedback_reply_router

# --- –ò–º–ø–æ—Ä—Ç—ã –±–æ—Ç–∞ ---
from bot.handlers.inline_handlers import inline_query_handler
from bot.middlewares.logging_middleware import LoggingMiddleware
from bot.middlewares.manager_middleware import ManagerMiddleware
from bot.middlewares.session_middleware import SessionMiddleware
from bot.middlewares.user_data_middleware import UserDataMiddleware

# from bot.middlewares.chat_cleanup_middleware import ChatCleanupMiddleware  # –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞
from bot.scheduler import setup_scheduler
from core.alert_webhook import run_alert_webhook_server
from core.business_alerts import start_business_monitoring

# --- –ò–º–ø–æ—Ä—Ç—ã —è–¥—Ä–∞ ---
from core.config import ADMIN_IDS
from core.image_generator import shutdown_image_generator
from core.manager import TimetableManager
from core.user_data import UserDataManager

# from bot.utils.cleanup_bot import CleanupBot  # –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —á–∞—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞


# --- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ---
def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏."""
    # –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[logging.StreamHandler()],
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞ aiogram, —á—Ç–æ–±—ã –Ω–µ –≤–∏–¥–µ—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    logging.getLogger("aiogram").setLevel(logging.WARNING)


async def set_bot_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    user_commands = [
        BotCommand(command="start", description="ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="about", description="üìí –û –±–æ—Ç–µ"),
        BotCommand(command="feedback", description="ü§ù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"),
        BotCommand(command="events", description="üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"),
    ]
    try:
        await bot.set_my_commands(user_commands, scope=BotCommandScopeDefault())
        logging.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: {e}")
        return

    if ADMIN_IDS:
        admin_commands = user_commands + [BotCommand(command="admin", description="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")]
        for admin_id in ADMIN_IDS:
            try:
                await bot.set_my_commands(admin_commands, scope=BotCommandScopeChat(chat_id=admin_id))
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
        logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {ADMIN_IDS}")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start_command_handler(message: Message, dialog_manager: DialogManager):
    user_data_manager = dialog_manager.middleware_data.get("user_data_manager")
    if not isinstance(user_data_manager, UserDataManager):
        logging.error("UserDataManager is not available or has an invalid type in middleware data.")
        return

    if not message.from_user or not hasattr(message.from_user, "id"):
        logging.error("Message.from_user is None or does not have an 'id' attribute.")
        return

    saved_group = await user_data_manager.get_user_group(message.from_user.id)
    if saved_group:
        await dialog_manager.start(Schedule.view, data={"group": saved_group}, mode=StartMode.RESET_STACK)
    else:
        await dialog_manager.start(MainMenu.choose_user_type, mode=StartMode.RESET_STACK)


async def about_command_handler(message: Message, dialog_manager: DialogManager):
    try:
        await dialog_manager.start(About.page_1, mode=StartMode.RESET_STACK)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª '–û –±–æ—Ç–µ': {e}")
        try:
            await message.answer(
                "‚ÑπÔ∏è –†–∞–∑–¥–µ–ª '–û –±–æ—Ç–µ' –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞.\n"
                "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –∫–∞–Ω–∞–ª: https://t.me/voenmeh404"
            )
        except Exception:
            pass


async def feedback_command_handler(message: Message, dialog_manager: DialogManager):
    await dialog_manager.start(Feedback.enter_feedback, mode=StartMode.RESET_STACK)


async def admin_command_handler(message: Message, dialog_manager: DialogManager):
    await dialog_manager.start(Admin.menu, mode=StartMode.RESET_STACK)


async def events_command_handler(message: Message, dialog_manager: DialogManager):
    await dialog_manager.start(Events.list, mode=StartMode.RESET_STACK)


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ ---
async def run_metrics_server(port: int = 8000):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Prometheus –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É."""
    loop = asyncio.get_running_loop()
    await loop.run_in_executor(None, start_http_server, port)
    logging.info(f"Prometheus metrics server started on http://localhost:{port}")


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---
# –ü—Ä–æ—Å—Ç–æ–π –≤—Ö–æ–¥–Ω–æ–π —Ä–µ–π—Ç-–ª–∏–º–∏—Ç —á–µ—Ä–µ–∑ throttling middleware
class SimpleRateLimiter:
    def __init__(self, max_per_sec: float = 10.0, redis=None):
        self._max_per_sec = max_per_sec
        self.redis = redis  # Pass redis_client

    async def __call__(self, handler, event, data):
        user_id = getattr(getattr(event, "from_user", None), "id", None)
        if not user_id:
            return await handler(event, data)
        key = f"rate_limit:{user_id}"
        history = await self.redis.lrange(key, 0, -1)
        now = time.monotonic()
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ Redis (–º–æ–≥—É—Ç –±—ã—Ç—å bytes/str)
        parsed = []
        for t in history or []:
            try:
                val = float(t if isinstance(t, (int, float, str)) else t.decode())
                if now - val < 1.0:
                    parsed.append(val)
            except Exception:
                continue
        history = parsed
        if len(history) >= self._max_per_sec:
            # –í–º–µ—Å—Ç–æ –º–æ–ª—á–∞ –¥—Ä–æ–ø–∞–µ–º —Å–æ–±—ã—Ç–∏–µ, –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if hasattr(event, "answer"):
                try:
                    await event.answer(
                        "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                        show_alert=True,
                    )
                except Exception:
                    pass
            return
        await self.redis.rpush(key, now)
        await self.redis.expire(key, 2)
        return await handler(event, data)


async def error_handler(event=None, exception: Exception | None = None, *args, **kwargs):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫. –°–æ–≤–º–µ—Å—Ç–∏–º —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º–∏ aiogram.
    –¢–∏—Ö–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–æ–ª–±—ç–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤ (UnknownIntent)."""
    exc = exception
    if exc is None and hasattr(event, "exception"):
        exc = getattr(event, "exception", None)
    try:
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: —É—Å—Ç–∞—Ä–µ–≤—à–∏–π intent —É aiogram-dialog
        if isinstance(exc, UnknownIntent):
            update = getattr(event, "update", None)
            cq = getattr(update, "callback_query", None)
            cb = getattr(cq, "message", None)
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–µ–∂–ª–∏–≤–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫–æ–ª–±—ç–∫ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é
            try:
                if cq is not None and hasattr(cq, "answer"):
                    await cq.answer(
                        "–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –±–æ–ª—å—à–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞. –û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é –∑–∞–Ω–æ–≤–æ.",
                        show_alert=False,
                    )
            except Exception:
                pass
            try:
                bot: Bot = getattr(event, "bot", None)
                if cb is not None and bot is not None:
                    await bot.send_message(cb.chat.id, "–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ /start")
            except Exception:
                pass
            # –ü–æ–¥–∞–≤–ª—è–µ–º –¥–∞–ª—å–Ω–µ–π—à–µ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –æ—à–∏–±–∫–∏
            return True

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –≤ JSON
        logging.error("–û—à–∏–±–∫–∞ aiogram: %s", exc, exc_info=True)
    except Exception:
        # –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∞–¥–∞–µ–º –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
        pass
    return True


async def main():
    print("üöÄ Starting bot...")
    setup_logging()  # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    print("üìù Logging configured")
    load_dotenv()
    print("üîß Environment loaded")

    bot_token = os.getenv("BOT_TOKEN")
    redis_url = os.getenv("REDIS_URL")
    db_url = os.getenv("DATABASE_URL")
    print("üîë Environment variables checked")

    if not all([bot_token, redis_url, db_url]):
        print("‚ùå Missing environment variables")
        logging.critical("–û–¥–Ω–∞ –∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (BOT_TOKEN, REDIS_URL, DATABASE_URL).")
        return
    print("‚úÖ All environment variables found")

    redis_client = Redis.from_url(redis_url or "")

    timetable_manager = await TimetableManager.create(redis_client=redis_client)
    if not timetable_manager:
        logging.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å TimetableManager. –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")
        return

    user_data_manager = UserDataManager(db_url=db_url or "", redis_url=redis_url)
    logging.info("–ú–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")

    storage = RedisStorage(redis=redis_client, key_builder=DefaultKeyBuilder(with_destiny=True))
    default_properties = DefaultBotProperties(parse_mode="HTML")
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API (—á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥)
    # –í–∞–∂–Ω–æ: aiogram –æ–∂–∏–¥–∞–µ—Ç, —á—Ç–æ session.timeout –±—É–¥–µ—Ç —á–∏—Å–ª–æ–º, –∞ –Ω–µ ClientTimeout
    http_session = AiohttpSession(timeout=180)
    bot = Bot(
        token=bot_token or "",
        default=default_properties,
        session=http_session,
    )
    dp = Dispatcher(storage=storage)

    scheduler = setup_scheduler(
        bot=bot,
        manager=timetable_manager,
        user_data_manager=user_data_manager,
        redis_client=redis_client,
    )

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Middleware
    dp.update.middleware(ManagerMiddleware(timetable_manager))
    dp.update.middleware(UserDataMiddleware(user_data_manager))
    dp.update.middleware(SessionMiddleware(user_data_manager.async_session_maker))
    from bot.middlewares.activity_logging_middleware import ActivityLoggingMiddleware

    dp.update.middleware(ActivityLoggingMiddleware())  # Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    dp.update.middleware(LoggingMiddleware())  # Middleware –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ –∏ –ª–æ–≥–æ–≤
    # –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —á–∞—Ç–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–µ–Ω–∞
    dp.update.middleware(SimpleRateLimiter(max_per_sec=1, redis=redis_client))  # –∞–Ω—Ç–∏-—Ñ–ª—É–¥ –Ω–∞ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è
    dp.update.middleware(
        lambda handler, event, data: handler(
            event,
            {**data, "bot": bot, "scheduler": scheduler, "redis_client": redis_client},
        )
    )
    dp.errors.register(error_handler)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –∏ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º feedback_reply_router –ø–µ—Ä–≤—ã–º, —á—Ç–æ–±—ã –æ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª —Å–æ–æ–±—â–µ–Ω–∏—è –≤ FEEDBACK_CHAT_ID
    dp.include_router(feedback_reply_router)

    all_dialogs = [
        main_menu_dialog,
        schedule_dialog,
        settings_dialog,
        find_dialog,
        about_dialog,
        feedback_dialog,
        admin_dialog,
        events_dialog,
    ]
    for dialog in all_dialogs:
        dp.include_router(dialog)
    setup_dialogs(dp)

    # DEBUG: Print registered dialogs and windows
    from aiogram_dialog import Dialog

    print("--- DEBUG DIALOGS ---")
    # Access routers through the dispatcher's sub_routers attribute
    if hasattr(dp, "sub_routers"):
        for router in dp.sub_routers:
            if isinstance(router, Dialog):
                print(f"Registered Dialog: {router.states_group_name}")
                for state in router.windows:
                    print(f"  -> Window for state: {state!r}")
    else:
        # Fallback: try to access through different methods
        try:
            # In newer aiogram versions, routers might be stored differently
            routers = getattr(dp, "_sub_routers", []) or getattr(dp, "routers", [])
            for router in routers:
                if isinstance(router, Dialog):
                    print(f"Registered Dialog: {router.states_group_name}")
                    for state in router.windows:
                        print(f"  -> Window for state: {state!r}")
        except Exception as e:
            print(f"Could not access routers for debugging: {e}")
    print("--- END DEBUG DIALOGS ---")

    dp.message.register(start_command_handler, CommandStart())
    dp.message.register(about_command_handler, Command("about"))
    dp.message.register(feedback_command_handler, Command("feedback"))
    dp.message.register(events_command_handler, Command("events"))
    if ADMIN_IDS:
        dp.message.register(admin_command_handler, Command("admin"), F.from_user.id.in_(ADMIN_IDS))
    dp.inline_query.register(inline_query_handler)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –Ω–∞ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    dp.callback_query.register(on_inline_back, F.data == "back_to_day_img")
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    dp.callback_query.register(on_send_original_file_callback, F.data == "send_original_file")
    dp.callback_query.register(on_check_subscription_callback, F.data == "check_sub")
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    dp.callback_query.register(on_cancel_generation, F.data == "cancel_generation")
    # –í—Ä–µ–º–µ–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ: –∫–Ω–æ–ø–∫–∏ "–ø–æ–ª–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ" –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏

    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞, –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫ –∏ webhooks Alertmanager...")
    try:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É–¥–∞–ª—è–µ–º webhook, —á—Ç–æ–±—ã polling –ø–æ–ª—É—á–∞–ª –∞–ø–¥–µ–π—Ç—ã
        try:
            await bot.delete_webhook(drop_pending_updates=True)
            logging.info("Webhook —É–¥–∞–ª–µ–Ω (drop_pending_updates=True)")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook: {e}")

        await set_bot_commands(bot)
        scheduler.start()

        async def _notify_admins_start():
            if ADMIN_IDS:
                for admin_id in ADMIN_IDS:
                    try:
                        await bot.send_message(admin_id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                    except Exception:
                        pass

        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã, –∑–∞—Ç–µ–º –Ω–∞—á–∏–Ω–∞–µ–º polling
        logging.info("Starting background services...")
        asyncio.create_task(run_metrics_server())
        asyncio.create_task(run_alert_webhook_server(bot, ADMIN_IDS))
        asyncio.create_task(start_business_monitoring())
        asyncio.create_task(_notify_admins_start())

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
        logging.info("Starting bot polling...")
        try:
            await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
        except Exception as e:
            logging.error(f"Bot polling failed: {e}")
            raise
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ —Ä–µ—Å—É—Ä—Å—ã
        try:
            scheduler.shutdown()
        except Exception:
            pass
        try:
            await dp.storage.close()
        except Exception:
            pass
        try:
            await bot.session.close()
        except Exception:
            pass
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º Playwright/Chromium, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —É—Ç–µ—á–µ–∫
        try:
            await shutdown_image_generator()
        except Exception:
            pass
        logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, –±–æ—Ç –∏ —Ä–µ—Å—É—Ä—Å—ã —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é.")
