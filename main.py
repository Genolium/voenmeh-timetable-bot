import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandStart
from aiogram.fsm.storage.redis import RedisStorage, DefaultKeyBuilder
from aiogram.types import Message, BotCommand, BotCommandScopeDefault, BotCommandScopeChat
from aiogram_dialog import setup_dialogs, StartMode, DialogManager
from dotenv import load_dotenv
from redis.asyncio.client import Redis

# --- –ò–º–ø–æ—Ä—Ç—ã —è–¥—Ä–∞ ---
from core.config import DATABASE_FILENAME, ADMIN_IDS
from core.manager import TimetableManager
from core.user_data import UserDataManager

# --- –ò–º–ø–æ—Ä—Ç—ã –±–æ—Ç–∞ ---
from bot.middlewares.manager_middleware import ManagerMiddleware
from bot.middlewares.user_data_middleware import UserDataMiddleware
from bot.scheduler import setup_scheduler
from bot.handlers.inline_handlers import inline_query_handler

# --- –ò–º–ø–æ—Ä—Ç—ã –¥–∏–∞–ª–æ–≥–æ–≤ ---
from bot.dialogs.main_menu import dialog as main_menu_dialog
from bot.dialogs.schedule_view import schedule_dialog
from bot.dialogs.settings_menu import settings_dialog
from bot.dialogs.find_menu import find_dialog
from bot.dialogs.about_menu import about_dialog
from bot.dialogs.feedback_menu import feedback_dialog
from bot.dialogs.admin_menu import admin_dialog

# --- –ò–º–ø–æ—Ä—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
from bot.dialogs.states import MainMenu, Schedule, About, Feedback, Admin

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


async def set_bot_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_commands = [
        BotCommand(command="start", description="ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="about", description="üìí –û –±–æ—Ç–µ"),
        BotCommand(command="feedback", description="ü§ù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"),
    ]
    await bot.set_my_commands(user_commands, scope=BotCommandScopeDefault())
    logging.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if ADMIN_IDS:
        admin_commands = user_commands + [
            BotCommand(command="admin", description="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        ]
        for admin_id in ADMIN_IDS:
            try:
                await bot.set_my_commands(admin_commands, scope=BotCommandScopeChat(chat_id=admin_id))
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
        logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {ADMIN_IDS}")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start_command_handler(message: Message, dialog_manager: DialogManager):
    user_data_manager: UserDataManager = dialog_manager.middleware_data.get("user_data_manager")
    saved_group = await user_data_manager.get_user_group(message.from_user.id)
    if saved_group:
        await dialog_manager.start(Schedule.view, data={"group": saved_group}, mode=StartMode.RESET_STACK)
    else:
        await dialog_manager.start(MainMenu.enter_group, mode=StartMode.RESET_STACK)

async def about_command_handler(message: Message, dialog_manager: DialogManager):
    await dialog_manager.start(About.page_1, mode=StartMode.RESET_STACK)

async def feedback_command_handler(message: Message, dialog_manager: DialogManager):
    await dialog_manager.start(Feedback.enter_feedback, mode=StartMode.RESET_STACK)

async def admin_command_handler(message: Message, dialog_manager: DialogManager):
    await dialog_manager.start(Admin.menu, mode=StartMode.RESET_STACK)


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---
async def main():
    load_dotenv()
    bot_token = os.getenv("BOT_TOKEN")
    redis_url = os.getenv("REDIS_URL")

    if not bot_token:
        logging.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ .env —Ñ–∞–π–ª–µ.")
        return
    if not redis_url:
        logging.error("URL –¥–ª—è Redis –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–∫–∞–∂–∏—Ç–µ REDIS_URL –≤ .env —Ñ–∞–π–ª–µ.")
        return

    redis_client = Redis.from_url(redis_url)
    
    timetable_manager = await TimetableManager.create(redis_client=redis_client) 
    if not timetable_manager:
        logging.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å TimetableManager. –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")
        return
    
    user_data_manager = UserDataManager(db_path=DATABASE_FILENAME)
    await user_data_manager.init_db()
    logging.info("–ú–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")

    storage = RedisStorage(redis=redis_client, key_builder=DefaultKeyBuilder(with_destiny=True))
    default_properties = DefaultBotProperties(parse_mode="HTML")
    bot = Bot(token=bot_token, default=default_properties)
    dp = Dispatcher(storage=storage)

    scheduler = setup_scheduler(
        bot=bot,
        manager=timetable_manager,
        user_data_manager=user_data_manager,
        redis_client=redis_client
    )

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Middleware
    dp.update.middleware(ManagerMiddleware(timetable_manager))
    dp.update.middleware(UserDataMiddleware(user_data_manager))
    dp.update.middleware(lambda handler, event, data: handler(event, {**data, 'bot': bot}))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
    all_dialogs = [
        main_menu_dialog, schedule_dialog, settings_dialog, find_dialog,
        about_dialog, feedback_dialog, admin_dialog
    ]
    for dialog in all_dialogs:
        dp.include_router(dialog)
    setup_dialogs(dp)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
    dp.message.register(start_command_handler, CommandStart())
    dp.message.register(about_command_handler, Command("about"))
    dp.message.register(feedback_command_handler, Command("feedback"))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if ADMIN_IDS:
        dp.message.register(admin_command_handler, Command("admin"), F.from_user.id.in_(ADMIN_IDS))
    
    dp.inline_query.register(inline_query_handler)

    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
    try:
        await set_bot_commands(bot)
        
        scheduler.start()
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    finally:
        scheduler.shutdown()
        await dp.storage.close()
        await bot.session.close()
        logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é.")