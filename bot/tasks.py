import asyncio
import logging
import os
import time
from typing import Dict, Any
from datetime import datetime

import dramatiq
from aiogram import Bot
from aiolimiter import AsyncLimiter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, InputMediaPhoto
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from dramatiq.brokers.redis import RedisBroker
from redis.asyncio import Redis
import redis

from bot.text_formatters import generate_reminder_text
from core.image_generator import generate_schedule_image
from core.config import MEDIA_PATH
from bot.utils.image_compression import get_telegram_safe_image_path
import os
from core.image_cache_manager import ImageCacheManager

load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—Ä–æ–∫–µ—Ä–∞ –∏ –ª–æ–≥–≥–µ—Ä–∞ ---
redis_url = os.getenv("REDIS_URL")
redis_password = os.getenv("REDIS_PASSWORD")
if not redis_url or not redis_password:
    raise RuntimeError("REDIS_URL –∏–ª–∏ REDIS_PASSWORD –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ—Ä–∫–µ—Ä –Ω–µ –º–æ–∂–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å.")

redis_broker = RedisBroker(url=redis_url, password=redis_password)
dramatiq.set_broker(redis_broker)

# Redis-–∫–ª–∏–µ–Ω—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏

log = logging.getLogger(__name__)
log.setLevel(logging.INFO)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞ ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ—Ä–∫–µ—Ä –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")

BOT_INSTANCE = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
# –£–±–∏—Ä–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π LOOP - –±—É–¥–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å event loop –ª–æ–∫–∞–ª—å–Ω–æ –≤ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–µ

# –£–±–∏—Ä–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç-–ª–∏–º–∏—Ç–µ—Ä - –±—É–¥–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ –≤ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–µ
# Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –æ–∫–æ–ª–æ 30 msg/s –Ω–∞ –±–æ—Ç–∞

# –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ä–µ–π—Ç –ª–∏–º–∏—Ç–µ—Ä–∞
_rate_limit_counter = 0

# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ö–µ–ª–ø–µ—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ---
async def _send_message(user_id: int, text: str):
    global _rate_limit_counter
    try:
        _rate_limit_counter += 1
        log.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è #{_rate_limit_counter} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç-–ª–∏–º–∏—Ç–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–∑–æ–≤–∞
        rate_limiter = AsyncLimiter(25, time_period=1)
        async with rate_limiter:
            await BOT_INSTANCE.send_message(user_id, text, disable_web_page_preview=True)
        log.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ #{_rate_limit_counter} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        log.error(f"Dramatiq task FAILED to send message #{_rate_limit_counter} to {user_id}: {e}")
        raise

async def _copy_message(user_id: int, from_chat_id: int, message_id: int):
    global _rate_limit_counter
    try:
        _rate_limit_counter += 1
        log.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è #{_rate_limit_counter} (ID: {message_id}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç-–ª–∏–º–∏—Ç–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–∑–æ–≤–∞
        rate_limiter = AsyncLimiter(25, time_period=1)
        async with rate_limiter:
            await BOT_INSTANCE.copy_message(chat_id=user_id, from_chat_id=from_chat_id, message_id=message_id)
        log.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ #{_rate_limit_counter} (ID: {message_id}) —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        log.error(f"Dramatiq task FAILED to copy message #{_rate_limit_counter} (ID: {message_id}) to {user_id}: {e}")
        raise

# --- –ê–∫—Ç–æ—Ä—ã ---
@dramatiq.actor
def send_message_task(user_id: int, text: str):
    # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Redis-–∫–ª–∏–µ–Ω—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å event loop
    sync_redis_client = redis.Redis.from_url(redis_url, password=redis_password, decode_responses=False)
    
    # Add unique key, e.g., hash of user_id + text
    unique_key = f"send_msg_{user_id}_{hash(text)}"
    if sync_redis_client.get(unique_key):  # Use sync client directly
        return  # Already sent

    # Add retry for set
    for _ in range(3):
        try:
            asyncio.run(_send_message(user_id, text))
            sync_redis_client.set(unique_key, "done", ex=3600)
            break
        except Exception as e:
            logging.warning(f"Retry redis/set for {unique_key}: {e}")

@dramatiq.actor(max_retries=5, min_backoff=1000, time_limit=30000)
def copy_message_task(user_id: int, from_chat_id: int, message_id: int):
    asyncio.run(_copy_message(user_id, from_chat_id, message_id))

@dramatiq.actor(max_retries=5, min_backoff=1000, time_limit=30000)
def send_lesson_reminder_task(user_id: int, lesson: Dict[str, Any] | None, reminder_type: str, break_duration: int | None, reminder_time_minutes: int | None = None):
    try:
        text_to_send = generate_reminder_text(lesson, reminder_type, break_duration, reminder_time_minutes)
        if text_to_send:
            send_message_task.send(user_id, text_to_send)
    except Exception as e:
        log.error(f"Dramatiq task send_lesson_reminder_task FAILED to prepare reminder for {user_id}: {e}")


# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ ---
@dramatiq.actor(max_retries=3, min_backoff=2000, time_limit=300000)
def generate_week_image_task(cache_key: str = None, week_schedule: Dict[str, Any] = None, week_name: str = None, group: str = None, user_id: int | None = None, placeholder_msg_id: int | None = None, final_caption: str | None = None, **kwargs):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.
    –ù–ï –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –±–æ—Ç–∞ –±–ª–∞–≥–æ–¥–∞—Ä—è Dramatiq.
    
    –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–∑–æ–≤–∞ —Å cache_key,
    —Ç–∞–∫ –∏ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å week_key (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –≤ –æ—á–µ—Ä–µ–¥–∏).
    """
    async def _run():
        nonlocal cache_key, week_schedule, week_name, group, user_id, placeholder_msg_id, final_caption
        
        # –û–ë–†–ê–ë–û–¢–ö–ê –£–°–¢–ê–†–ï–í–®–ï–ì–û –§–û–†–ú–ê–¢–ê –í–´–ó–û–í–ê
        # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (week_key –≤–º–µ—Å—Ç–æ cache_key)
        if 'week_key' in kwargs and cache_key is None:
            week_key = kwargs.get('week_key')
            group = kwargs.get('group', group)
            week_schedule = kwargs.get('week_schedule', week_schedule)
            week_name = kwargs.get('week_name', week_name)
            user_id = kwargs.get('user_id', user_id)
            placeholder_msg_id = kwargs.get('placeholder_msg_id', placeholder_msg_id)
            final_caption = kwargs.get('final_caption', final_caption)
            
            # –°–æ–∑–¥–∞–µ–º cache_key –∏–∑ group –∏ week_key
            cache_key = f"{group}_{week_key}"
            log.warning(f"‚ö†Ô∏è –£–°–¢–ê–†–ï–í–®–ò–ô –í–´–ó–û–í generate_week_image_task —Å week_key='{week_key}', –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ cache_key='{cache_key}'")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not cache_key or not group or week_schedule is None:
            log.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è generate_week_image_task: cache_key={cache_key}, group={group}, week_schedule={'None' if week_schedule is None else 'provided'}")
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Redis-–∫–ª–∏–µ–Ω—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å event loop
            sync_redis_client = redis.Redis.from_url(redis_url, password=redis_password, decode_responses=False)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            is_auto_generation = user_id is None
            
            if is_auto_generation:
                log.info(f"üé® [–ê–í–¢–û] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {cache_key}")
            else:
                log.info(f"üé® –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {cache_key}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ Redis
            class SyncRedisWrapper:
                def __init__(self, sync_client):
                    self.sync_client = sync_client
                
                async def get(self, key):
                    return self.sync_client.get(key)
                
                async def set(self, key, value, ex=None):
                    return self.sync_client.set(key, value, ex=ex)
                
                async def delete(self, key):
                    return self.sync_client.delete(key)
                
                async def keys(self, pattern):
                    return self.sync_client.keys(pattern)
                
                async def exists(self, key):
                    return self.sync_client.exists(key)
                
                def __getattr__(self, name):
                    return getattr(self.sync_client, name)
            
            redis_wrapper = SyncRedisWrapper(sync_redis_client)
            cache_manager = ImageCacheManager(redis_wrapper, cache_ttl_hours=24)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            from core.image_service import ImageService
            image_service = ImageService(cache_manager, BOT_INSTANCE)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º week_key –∏–∑ cache_key
            week_key = cache_key.split("_")[-1] if "_" in cache_key else "even"
            
            if is_auto_generation:
                # –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –∫—ç—à–∏—Ä—É–µ–º
                success, file_path = await image_service._generate_and_cache_image(
                    cache_key, week_schedule, week_name, group
                )
                if success:
                    log.info(f"‚úÖ [–ê–í–¢–û] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {cache_key} —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à")
                else:
                    log.error(f"‚ùå [–ê–í–¢–û] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {cache_key}")
            else:
                # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π —Å–µ—Ä–≤–∏—Å
                success, file_path = await image_service.get_or_generate_week_image(
                    group=group,
                    week_key=week_key,
                    week_name=week_name,
                    week_schedule=week_schedule,
                    user_id=user_id,
                    placeholder_msg_id=placeholder_msg_id,
                    final_caption=final_caption
                )
                
                if not success:
                    await _send_error_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            
        except Exception as e:
            log.error(f"‚ùå generate_week_image_task failed: {e}")
            if not is_auto_generation and user_id:
                await _send_error_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    
    # –í Dramatiq workers –≤—Å–µ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π event loop
    asyncio.run(_run())

async def _send_cached_image(cache_key: str, user_id: int, placeholder_msg_id: int, final_caption: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Redis-–∫–ª–∏–µ–Ω—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å event loop
        sync_redis_client = redis.Redis.from_url(redis_url, password=redis_password, decode_responses=False)
        
        # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±–µ—Ä—Ç–∫—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ Redis-–∫–ª–∏–µ–Ω—Ç–∞
        class SyncRedisWrapper:
            def __init__(self, sync_client):
                self.sync_client = sync_client
            
            async def get(self, key):
                return self.sync_client.get(key)
            
            async def set(self, key, value, ex=None):
                return self.sync_client.set(key, value, ex=ex)
            
            async def delete(self, key):
                return self.sync_client.delete(key)
            
            async def keys(self, pattern):
                return self.sync_client.keys(pattern)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ hasattr –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            def __getattr__(self, name):
                return getattr(self.sync_client, name)
        
        redis_wrapper = SyncRedisWrapper(sync_redis_client)
        cache_manager = ImageCacheManager(redis_wrapper, cache_ttl_hours=24)
        image_bytes = await cache_manager.get_cached_image(cache_key)
        
        if not image_bytes:
            await _send_error_message(user_id, "–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        temp_path = MEDIA_PATH / "generated" / f"temp_{cache_key}.png"
        with open(temp_path, 'wb') as f:
            f.write(image_bytes)
        
        await _send_generated_image(str(temp_path), user_id, placeholder_msg_id, final_caption)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(temp_path)
        except:
            pass
            
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await _send_error_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

async def _send_generated_image(output_path: str, user_id: int, placeholder_msg_id: int, final_caption: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è Telegram –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        safe_image_path = get_telegram_safe_image_path(output_path)
        photo = FSInputFile(safe_image_path)
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_day_img")]
        ])
        
        global _rate_limit_counter
        _rate_limit_counter += 1
        log.info(f"üì§ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è #{_rate_limit_counter} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç-–ª–∏–º–∏—Ç–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–∑–æ–≤–∞
        rate_limiter = AsyncLimiter(25, time_period=1)
        async with rate_limiter:
            if placeholder_msg_id:
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    media = InputMediaPhoto(media=photo, caption=final_caption or "")
                    await BOT_INSTANCE.edit_message_media(
                        chat_id=user_id, 
                        message_id=placeholder_msg_id, 
                        media=media, 
                        reply_markup=kb
                    )
                    log.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ #{_rate_limit_counter} —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    if "message is not modified" in str(e).lower():
                        await BOT_INSTANCE.send_photo(
                            chat_id=user_id, 
                            photo=photo, 
                            caption=final_caption or "", 
                            reply_markup=kb
                        )
                        log.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ #{_rate_limit_counter} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    else:
                        raise
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await BOT_INSTANCE.send_photo(
                    chat_id=user_id, 
                    photo=photo, 
                    caption=final_caption or "", 
                    reply_markup=kb
                )
                log.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ #{_rate_limit_counter} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await _send_error_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

async def _send_error_message(user_id: int, error_text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_day_img")]
        ])
        
        error_message = f"‚ùå {error_text}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        
        global _rate_limit_counter
        _rate_limit_counter += 1
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç-–ª–∏–º–∏—Ç–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–∑–æ–≤–∞
        rate_limiter = AsyncLimiter(25, time_period=1)
        async with rate_limiter:
            await BOT_INSTANCE.send_message(
                chat_id=user_id,
                text=error_message,
                reply_markup=kb
            )
        log.info(f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        log.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")