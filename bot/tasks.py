import asyncio
import logging
import os
import time
from typing import Dict, Any

import dramatiq
from aiogram import Bot
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest
# Compatibility layer for RetryAfter across aiogram versions
try:
    # aiogram v3.x
    from aiogram.exceptions import TelegramRetryAfter as RetryAfter
except Exception:
    try:
        # aiogram v2.x
        from aiogram.utils.exceptions import RetryAfter  # type: ignore
    except Exception:  # Fallback: define a stub to keep logic working
        class RetryAfter(Exception):
            pass
from aiolimiter import AsyncLimiter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, InputMediaPhoto
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from dramatiq.brokers.rabbitmq import RabbitmqBroker
from dramatiq.encoder import JSONEncoder
from redis import asyncio as redis

from bot.text_formatters import generate_reminder_text
from core.config import MEDIA_PATH, SUBSCRIPTION_CHANNEL
from bot.utils.image_compression import get_telegram_safe_image_path
from core.image_cache_manager import ImageCacheManager
from core.image_service import ImageService
from core.image_generator import generate_schedule_image

load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—Ä–æ–∫–µ—Ä–∞ RabbitMQ ---
broker_url = os.getenv("DRAMATIQ_BROKER_URL")
if not broker_url:
    raise RuntimeError("DRAMATIQ_BROKER_URL –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ—Ä–∫–µ—Ä –Ω–µ –º–æ–∂–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ
# NOTE: When using 'url', do not pass pika parameters; set timeouts via environment if needed
rabbitmq_broker = RabbitmqBroker(url=broker_url, confirm_delivery=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–Ω–∫–æ–¥–µ—Ä–∞
rabbitmq_broker.encoder = JSONEncoder()

dramatiq.set_broker(rabbitmq_broker)

# Redis-–∫–ª–∏–µ–Ω—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –Ω—É–∂–¥ (–Ω–µ –¥–ª—è –±—Ä–æ–∫–µ—Ä–∞)
redis_url = os.getenv("REDIS_URL")
redis_password = os.getenv("REDIS_PASSWORD")

log = logging.getLogger(__name__)
log.setLevel(logging.INFO)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–æ—Ç–∞ ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ—Ä–∫–µ—Ä –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")

# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ—Å—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–∞—Ç—á–∞—Ç BOT_INSTANCE
BOT_INSTANCE = None  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é; –±–æ—Ç —Å–æ–∑–¥–∞—ë—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∑–∞–¥–∞—á
rate_limiter = AsyncLimiter(25, 1)

async def _send_message(user_id: int, text: str):
    try:
        log.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–∫—É—â–µ–≥–æ event loop,
        # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –ª—É–ø–∞/—Å–µ—Å—Å–∏–∏
        bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
        async with bot:
            async with rate_limiter:
                await bot.send_message(user_id, text, disable_web_page_preview=True)
        log.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except TelegramForbiddenError as e:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ ‚Äî –Ω–µ —Ä–µ—Ç—Ä–∞–µ–º, –ø—Ä–æ—Å—Ç–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º
        log.info(f"User {user_id} blocked the bot. Skipping send.")
        return
    except TelegramBadRequest as e:
        # –ß–∞—Å—Ç—ã–µ –∫–µ–π—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ —Ä–µ—Ç—Ä–∞–∏—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä 'bot was blocked by the user'
        text = str(e)
        if 'bot was blocked by the user' in text.lower():
            log.info(f"User {user_id} blocked the bot (BadRequest). Skipping send.")
            return
        log.error(f"BadRequest sending to {user_id}: {e}")
        raise
    except RetryAfter as e:
        # –†–µ–π—Ç-–ª–∏–º–∏—Ç –æ—Ç Telegram: –ø—Ä–æ–±—Ä–æ—Å–∏–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å—Ä–∞–±–æ—Ç–∞–ª dramatiq retry/backoff
        log.warning(f"RetryAfter while sending to {user_id}: {e}")
        raise
    except Exception as e:
        log.error(f"Dramatiq task FAILED to send message to {user_id}: {e}")
        raise

async def _copy_message(user_id: int, from_chat_id: int, message_id: int):
    try:
        log.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (ID: {message_id}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
        async with bot:
            async with rate_limiter:
                await bot.copy_message(chat_id=user_id, from_chat_id=from_chat_id, message_id=message_id)
        log.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ (ID: {message_id}) —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        log.error(f"Dramatiq task FAILED to copy message (ID: {message_id}) to {user_id}: {e}")
        raise

@dramatiq.actor
def send_message_task(user_id: int, text: str):
    asyncio.run(_send_message(user_id, text))

@dramatiq.actor(max_retries=5, min_backoff=1000, time_limit=30000)
def copy_message_task(user_id: int, from_chat_id: int, message_id: int):
    asyncio.run(_copy_message(user_id, from_chat_id, message_id))

@dramatiq.actor(max_retries=5, min_backoff=1000, time_limit=30000)
def send_lesson_reminder_task(user_id: int, lesson: Dict[str, Any] | None, reminder_type: str, break_duration: int | None, reminder_time_minutes: int | None = None):
    async def _inner():
        try:
            text_to_send = generate_reminder_text(lesson, reminder_type, break_duration, reminder_time_minutes)
            if text_to_send:
                await _send_message(user_id, text_to_send)
        except Exception as e:
            log.error(f"Dramatiq task send_lesson_reminder_task FAILED to prepare reminder for {user_id}: {e}")
    asyncio.run(_inner())

@dramatiq.actor(max_retries=3, min_backoff=2000, time_limit=300000)
def generate_week_image_task(cache_key: str, week_schedule: Dict[str, Any], week_name: str, group: str, user_id: int | None = None, placeholder_msg_id: int | None = None, final_caption: str | None = None):
    async def _inner():
        is_auto_generation = user_id is None
        log.info(f"üé® [{'–ê–í–¢–û' if is_auto_generation else 'USER'}] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {cache_key}")

        try:
            redis_client = redis.Redis.from_url(redis_url, password=redis_password, decode_responses=False)
            cache_manager = ImageCacheManager(redis_client, cache_ttl_hours=192)
            # –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–º –ª—É–ø–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
            bot_for_images: Bot | None = None
            if not is_auto_generation:
                bot_for_images = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
            image_service = ImageService(cache_manager, bot_for_images)
            
            week_key = cache_key.split("_")[-1]
            
            if is_auto_generation:
                success, _ = await image_service._generate_and_cache_image(
                    cache_key,
                    week_schedule,
                    week_name,
                    group,
                    generated_by="mass"
                )
                if success:
                    log.info(f"‚úÖ [–ê–í–¢–û] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {cache_key} —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à")
                else:
                    log.error(f"‚ùå [–ê–í–¢–û] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {cache_key}")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞
                assert bot_for_images is not None
                async with bot_for_images:
                    success, _ = await image_service.get_or_generate_week_image(
                        group=group,
                        week_key=week_key,
                        week_name=week_name,
                        week_schedule=week_schedule,
                        user_id=user_id,
                        placeholder_msg_id=placeholder_msg_id,
                        final_caption=final_caption
                    )
                if not success and user_id:
                    await _send_error_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        except Exception as e:
            log.error(f"‚ùå generate_week_image_task failed: {e}")
            if not is_auto_generation and user_id:
                await _send_error_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        finally:
            if 'redis_client' in locals():
                try:
                    aclose = getattr(redis_client, 'aclose', None)
                    if aclose and asyncio.iscoroutinefunction(aclose):
                        await aclose()
                except Exception:
                    pass
    asyncio.run(_inner())

async def _send_error_message(user_id: int, error_text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_day_img")]
        ])
        error_message = f"‚ùå {error_text}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        await _send_message(user_id, error_message)
        log.info(f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        log.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


@dramatiq.actor(max_retries=3, min_backoff=1500, time_limit=60000)
def send_week_original_if_subscribed_task(user_id: int, group: str, week_key: str):
    async def _inner():
        try:
            r = redis.Redis.from_url(redis_url, password=redis_password, decode_responses=True)
            bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
            async with bot:
                is_subscribed = False
                cache_key = f"sub_status:{user_id}"
                try:
                    cached = await r.get(cache_key)
                    if cached is not None:
                        is_subscribed = cached == '1'
                    else:
                        if SUBSCRIPTION_CHANNEL:
                            try:
                                member = await bot.get_chat_member(SUBSCRIPTION_CHANNEL, user_id)
                                status = getattr(member, "status", None)
                                is_subscribed = status in ("member", "administrator", "creator")
                            except Exception:
                                is_subscribed = False
                        await r.set(cache_key, '1' if is_subscribed else '0', ex=21600 if is_subscribed else 60)
                except Exception:
                    pass

                if not is_subscribed and SUBSCRIPTION_CHANNEL:
                    kb = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{str(SUBSCRIPTION_CHANNEL).lstrip('@')}")]
                    ])
                    await bot.send_message(user_id, "–î–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–º—É –∫–∞—á–µ—Å—Ç–≤—É –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª.", reply_markup=kb)
                    return

                file_path = MEDIA_PATH / "generated" / f"{group}_{week_key}.png"
                if not file_path.exists():
                    await bot.send_message(user_id, "‚è≥ –ì–æ—Ç–æ–≤–ª—é –æ—Ä–∏–≥–∏–Ω–∞–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ‚Ä¶")
                    return
                await bot.send_document(user_id, FSInputFile(file_path))
        except Exception as e:
            log.error(f"send_week_original_if_subscribed_task failed: {e}")
    asyncio.run(_inner())