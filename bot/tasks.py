import asyncio
import logging
import os
import random
import sys
from typing import Dict, Any

import dramatiq
import graypy
from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from dramatiq.brokers.redis import RedisBroker
from pythonjsonlogger import jsonlogger


load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
redis_url = os.getenv("REDIS_URL")
redis_password = os.getenv("REDIS_PASSWORD")
if not redis_url or not redis_password:
    raise RuntimeError("REDIS_URL –∏–ª–∏ REDIS_PASSWORD –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ—Ä–∫–µ—Ä –Ω–µ –º–æ–∂–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å.")

redis_broker = RedisBroker(url=redis_url, password=redis_password)
dramatiq.set_broker(redis_broker)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞
def setup_worker_logging():
    log = logging.getLogger("dramatiq")
    log.setLevel(logging.INFO)
    
    if log.hasHandlers():
        log.handlers.clear()

    formatter = jsonlogger.JsonFormatter(
        '%(asctime)s %(name)s %(levelname)s %(message)s'
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(formatter)
    log.addHandler(console_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Graylog/Logstash
    try:
        gelf_handler = graypy.GELFUDPHandler('logstash', 12201, extra_fields=True)
        gelf_handler.setFormatter(formatter)
        log.addHandler(gelf_handler)
        log.info("Worker GELF logging to Logstash enabled.")
    except Exception as e:
        log.error(f"Worker failed to set up GELF logging to Logstash: {e}")

setup_worker_logging()

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ—Ä–∫–µ—Ä –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")

BOT_INSTANCE = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
LOOP = asyncio.get_event_loop()

UNSUBSCRIBE_FOOTER = "\n\n<tg-spoiler><i>–û—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç—É —Ä–∞—Å—Å—ã–ª–∫—É –º–æ–∂–Ω–æ –≤ ¬´‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª</i></tg-spoiler>"

async def _send_message(user_id: int, text: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ö–µ–ª–ø–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    try:
        await BOT_INSTANCE.send_message(user_id, text, disable_web_page_preview=True)
    except Exception as e:
        logging.error(f"Failed to send message to {user_id}: {e}")

async def _copy_message(user_id: int, from_chat_id: int, message_id: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ö–µ–ª–ø–µ—Ä –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è."""
    try:
        await BOT_INSTANCE.copy_message(chat_id=user_id, from_chat_id=from_chat_id, message_id=message_id)
    except Exception as e:
        logging.error(f"Failed to copy message to {user_id}: {e}")

@dramatiq.actor(max_retries=1, time_limit=30000)
def send_message_task(user_id: int, text: str):
    """–ó–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π loop –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏."""
    LOOP.run_until_complete(_send_message(user_id, text))

@dramatiq.actor(max_retries=1, time_limit=30000)
def copy_message_task(user_id: int, from_chat_id: int, message_id: int):
    """–ó–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π loop –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è."""
    LOOP.run_until_complete(_copy_message(user_id, from_chat_id, message_id))

@dramatiq.actor(max_retries=1, time_limit=30000)
def send_lesson_reminder_task(user_id: int, lesson: Dict[str, Any] | None, reminder_type: str, break_duration: int | None):
    text = ""
    try:
        if reminder_type == "first" and lesson:
            greetings = ["–ü–µ—Ä–≤–∞—è –ø–∞—Ä–∞ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç!", "–°–∫–æ—Ä–æ –Ω–∞—á–∞–ª–æ, –Ω–µ –æ–ø–∞–∑–¥—ã–≤–∞–π—Ç–µ!", "–ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –ø–µ—Ä–≤–æ–π –ø–∞—Ä–µ!"]
            text = f"üîî <b>{random.choice(greetings)}</b>\n\n"
        
        elif reminder_type == "break" and lesson:
            next_lesson_time = lesson.get('time', 'N/A').split('-')[0].strip()
            if break_duration and break_duration >= 40:
                break_ideas = ["–ú–æ–∂–Ω–æ —É—Å–ø–µ—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –ø–æ–æ–±–µ–¥–∞—Ç—å!", "–û—Ç–ª–∏—á–Ω—ã–π —à–∞–Ω—Å —Å—Ö–æ–¥–∏—Ç—å –≤ —Å—Ç–æ–ª–æ–≤—É—é."]
                break_text = f"–£ –≤–∞—Å –±–æ–ª—å—à–æ–π –ø–µ—Ä–µ—Ä—ã–≤ {break_duration} –º–∏–Ω—É—Ç –¥–æ {next_lesson_time}. {random.choice(break_ideas)}"
            elif break_duration and break_duration >= 15:
                break_ideas = ["–í—Ä–µ–º—è –≤—ã–ø–∏—Ç—å —á–∞—é.", "–ú–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —Ä–∞–∑–º—è—Ç—å—Å—è."]
                break_text = f"–ü–µ—Ä–µ—Ä—ã–≤ {break_duration} –º–∏–Ω—É—Ç –¥–æ {next_lesson_time}. {random.choice(break_ideas)}"
            else:
                break_ideas = ["–£—Å–ø–µ–π—Ç–µ –¥–æ–π—Ç–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏.", "–ö–æ—Ä–æ—Ç–∫–∞—è –ø–µ—Ä–µ–¥—ã—à–∫–∞."]
                break_text = random.choice(break_ideas)
            text = f"‚úÖ <b>–ü–∞—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!</b>\n{break_text}\n\n‚òïÔ∏è <b>–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞:</b>\n"

        elif reminder_type == "final":
            final_phrases = ["–ü–∞—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å—ë! –ú–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å.", "–£—á–µ–±–Ω—ã–π –¥–µ–Ω—å –æ–∫–æ–Ω—á–µ–Ω. –•–æ—Ä–æ—à–µ–≥–æ –≤–µ—á–µ—Ä–∞!"]
            text = f"üéâ <b>{random.choice(final_phrases)}</b>{UNSUBSCRIBE_FOOTER}"
            send_message_task.send(user_id, text)
            return
        
        else:
            return 
        
        if lesson:
            text += f"<b>{lesson.get('subject', 'N/A')}</b> ({lesson.get('type', 'N/A')}) –≤ <b>{lesson.get('time', 'N/A')}</b>\n"
            info_parts = []
            if room := lesson.get('room'): info_parts.append(f"üìç {room}")
            if teachers := lesson.get('teachers'): info_parts.append(f"<i>—Å {teachers}</i>")
            if info_parts: text += " ".join(info_parts)
        
        text += UNSUBSCRIBE_FOOTER
        send_message_task.send(user_id, text)

    except Exception as e:
        logging.error(f"Dramatiq task send_lesson_reminder_task FAILED to prepare reminder for {user_id}: {e}")