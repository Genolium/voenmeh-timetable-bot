import logging
import random
from datetime import datetime, time, date, timedelta
from typing import Dict, Any, List, Optional, Tuple

from core.config import MOSCOW_TZ
from core.semester_settings import SemesterSettingsManager

async def calculate_semester_week_number(target_date: date, session_factory) -> int:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ —Å –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ë–î.

    Args:
        target_date: –î–∞—Ç–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        session_factory: –§–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î

    Returns:
        int: –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ (1-32, –º–∏–Ω–∏–º—É–º 1)
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–º–µ—Å—Ç—Ä–æ–≤ –∏–∑ –ë–î
        settings_manager = SemesterSettingsManager(session_factory)
        semester_settings = await settings_manager.get_semester_settings()

        if not semester_settings:
            # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            # –û—Å–µ–Ω–Ω–∏–π —Å–µ–º–µ—Å—Ç—Ä: 1 —Å–µ–Ω—Ç—è–±—Ä—è, –í–µ—Å–µ–Ω–Ω–∏–π —Å–µ–º–µ—Å—Ç—Ä: 9 —Ñ–µ–≤—Ä–∞–ª—è
            year = target_date.year
            if target_date < date(year, 9, 1):
                year -= 1
            fall_start = date(year, 9, 1)
            spring_start = date(year, 2, 9)
        else:
            fall_start, spring_start = semester_settings
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≥–æ–¥ –¥–ª—è –¥–∞—Ç —Å–µ–º–µ—Å—Ç—Ä–æ–≤
            year = target_date.year
            if target_date < fall_start:
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ –¥–æ –æ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥–æ–¥
                year -= 1
            fall_start = fall_start.replace(year=year)
            spring_start = spring_start.replace(year=year)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫–æ–º —Å–µ–º–µ—Å—Ç—Ä–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¥–∞—Ç–∞
        # –°—á–∏—Ç–∞–µ–º –Ω–µ–¥–µ–ª–∏ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞—Ç —Å–µ–º–µ—Å—Ç—Ä–æ–≤

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –Ω–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥
        current_year_fall = fall_start.replace(year=target_date.year)
        current_year_spring = spring_start.replace(year=target_date.year)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å–µ–º–µ—Å—Ç—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∏—á–Ω–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        # –û—Å–µ–Ω–Ω–∏–π —Å–µ–º–µ—Å—Ç—Ä: –æ–±—ã—á–Ω–æ 17-18 –Ω–µ–¥–µ–ª—å (—Å–µ–Ω—Ç—è–±—Ä—å - —è–Ω–≤–∞—Ä—å)
        # –í–µ—Å–µ–Ω–Ω–∏–π —Å–µ–º–µ—Å—Ç—Ä: –æ–±—ã—á–Ω–æ 17-18 –Ω–µ–¥–µ–ª—å (—Ñ–µ–≤—Ä–∞–ª—å - –∏—é–Ω—å)

        if fall_start.month > spring_start.month:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ª—É—á–∞–π: –æ—Å–µ–Ω–Ω–∏–π —Å —Å–µ–Ω—Ç—è–±—Ä—è, –≤–µ—Å–µ–Ω–Ω–∏–π —Å —Ñ–µ–≤—Ä–∞–ª—è

            # –í–µ—Å–µ–Ω–Ω–∏–π —Å–µ–º–µ—Å—Ç—Ä: —Å spring_start –¥–æ spring_start + 17 –Ω–µ–¥–µ–ª—å
            spring_end = current_year_spring + timedelta(weeks=17)

            # –û—Å–µ–Ω–Ω–∏–π —Å–µ–º–µ—Å—Ç—Ä: —Å fall_start –¥–æ fall_start + 17 –Ω–µ–¥–µ–ª—å
            fall_end = current_year_fall + timedelta(weeks=17)

            if current_year_spring <= target_date < spring_end:
                # –í–µ—Å–µ–Ω–Ω–∏–π —Å–µ–º–µ—Å—Ç—Ä - —Å—á–∏—Ç–∞–µ–º –Ω–µ–¥–µ–ª–∏
                semester_start = current_year_spring
            elif current_year_fall <= target_date < fall_end:
                # –û—Å–µ–Ω–Ω–∏–π —Å–µ–º–µ—Å—Ç—Ä - —Å—á–∏—Ç–∞–µ–º –Ω–µ–¥–µ–ª–∏
                semester_start = current_year_fall
            else:
                # –î–∞—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–º–µ—Å—Ç—Ä–æ–≤
                # –ù–µ —Å—á–∏—Ç–∞–µ–º –Ω–µ–¥–µ–ª–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
                return 0
        else:
            # –í–µ—Å–µ–Ω–Ω–∏–π —Å–µ–º–µ—Å—Ç—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–∞–Ω—å—à–µ –æ—Å–µ–Ω–Ω–µ–≥–æ –≤ –≥–æ–¥—É

            # –í–µ—Å–µ–Ω–Ω–∏–π —Å–µ–º–µ—Å—Ç—Ä: —Å spring_start –¥–æ spring_start + 17 –Ω–µ–¥–µ–ª—å
            spring_end = current_year_spring + timedelta(weeks=17)

            # –û—Å–µ–Ω–Ω–∏–π —Å–µ–º–µ—Å—Ç—Ä: —Å fall_start –¥–æ fall_start + 17 –Ω–µ–¥–µ–ª—å
            fall_end = current_year_fall + timedelta(weeks=17)

            if current_year_spring <= target_date < spring_end:
                # –í–µ—Å–µ–Ω–Ω–∏–π —Å–µ–º–µ—Å—Ç—Ä - —Å—á–∏—Ç–∞–µ–º –Ω–µ–¥–µ–ª–∏
                semester_start = current_year_spring
            elif current_year_fall <= target_date < fall_end:
                # –û—Å–µ–Ω–Ω–∏–π —Å–µ–º–µ—Å—Ç—Ä - —Å—á–∏—Ç–∞–µ–º –Ω–µ–¥–µ–ª–∏
                semester_start = current_year_fall
            else:
                # –î–∞—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–º–µ—Å—Ç—Ä–æ–≤
                # –ù–µ —Å—á–∏—Ç–∞–µ–º –Ω–µ–¥–µ–ª–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
                return 0

        # –°—á–∏—Ç–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö
        days_diff = (target_date - semester_start).days

        # –°—á–∏—Ç–∞–µ–º –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ (–Ω–∞—á–∏–Ω–∞–µ–º —Å 1)
        week_number = (days_diff // 7) + 1

        return max(week_number, 1)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –Ω–æ–º–µ—Ä–∞ –Ω–µ–¥–µ–ª–∏ —Å–µ–º–µ—Å—Ç—Ä–∞: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å—á–µ—Ç –ø–æ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ (1 —Å–µ–Ω—Ç—è–±—Ä—è)
        year = target_date.year
        if target_date < date(year, 9, 1):
            year -= 1
        semester_start = date(year, 9, 1)
        days_diff = (target_date - semester_start).days
        week_number = (days_diff // 7) + 1
        return max(week_number, 1)


def calculate_semester_week_number_fallback(target_date: date) -> int:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ —Å 1 —Å–µ–Ω—Ç—è–±—Ä—è.

    Args:
        target_date: –î–∞—Ç–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞

    Returns:
        int: –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ (1-32, –º–∏–Ω–∏–º—É–º 1)
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞ (1 —Å–µ–Ω—Ç—è–±—Ä—è)
    year = target_date.year
    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –¥–æ 1 —Å–µ–Ω—Ç—è–±—Ä—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥–æ–¥
    if target_date < date(year, 9, 1):
        year -= 1

    semester_start = date(year, 9, 1)

    # –°—á–∏—Ç–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö
    days_diff = (target_date - semester_start).days

    # –°—á–∏—Ç–∞–µ–º –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ (–Ω–∞—á–∏–Ω–∞–µ–º —Å 1)
    week_number = (days_diff // 7) + 1

    return max(week_number, 1)

# --- –û–ë–©–ò–ï –§–û–†–ú–ê–¢–¢–ï–†–´ ---

def format_schedule_text(day_info: dict, week_number: int | None = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å –¥–ª—è –≥—Ä—É–ø–ø—ã."""
    if not day_info or 'error' in day_info:
        return f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {day_info.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"

    date_obj = day_info.get('date')
    if not date_obj:
        return "‚ùå <b>–û—à–∏–±–∫–∞:</b> –î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."

    date_str = date_obj.strftime('%d.%m.%Y')
    day_name = day_info.get('day_name', '')
    week_type = f"({day_info.get('week_name', '')})" if day_info.get('week_name') else ""

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    week_info = f" ¬∑ –ù–µ–¥–µ–ª—è {week_number}" if week_number and week_number <= 32 else ""

    header = f"üóì <b>{date_str} ¬∑ {day_name}</b> {week_type}{week_info}\n"
    
    lessons = day_info.get('lessons')
    if not lessons:
        return header + "\nüéâ <b>–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç!</b>"

    lesson_parts = []
    for lesson in lessons:
        time_str = lesson.get('time', '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        subject_str = lesson.get('subject', '–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω')
        type_str = f"({lesson.get('type', '')})" if lesson.get('type') else ""
        
        lesson_header = f"<b>{time_str}</b>\n{subject_str} {type_str}"
        
        details_parts = []
        teachers = lesson.get('teachers')
        if teachers:
            details_parts.append(f"üßë‚Äçüè´ {teachers}")
        
        room = lesson.get('room')
        if room:
            details_parts.append(f"üìç {room}")
        
        details_str = "\n" + " ".join(details_parts) if details_parts else ""
        lesson_parts.append(f"{lesson_header}{details_str}")

    return header + "\n\n".join(lesson_parts)


def format_teacher_schedule_text(schedule_info: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è."""
    if not schedule_info or schedule_info.get('error'):
        return f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {schedule_info.get('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.')}"

    teacher_name = schedule_info.get('teacher', '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å')
    date_str = schedule_info['date'].strftime('%d.%m.%Y')
    day_name = schedule_info.get('day_name', '')

    header = f"üßë‚Äçüè´ <b>{teacher_name}</b>\nüóì <b>{date_str} ¬∑ {day_name}</b>\n"
    
    lessons = schedule_info.get('lessons')
    if not lessons:
        return header + "\nüéâ <b>–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç!</b>"

    lesson_parts = []
    for lesson in lessons:
        time_str = lesson.get('time', '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        subject_str = lesson.get('subject', '–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω')
        group_str = f" ({', '.join(lesson.get('groups', []))})"

        lesson_header = f"<b>{time_str}</b>\n{subject_str}{group_str}"
        
        details_parts = []
        room = lesson.get('room')
        if room:
            details_parts.append(f"üìç {room}")
        
        details_str = "\n" + " ".join(details_parts) if details_parts else ""
        lesson_parts.append(f"{lesson_header}{details_str}")

    return header + "\n\n".join(lesson_parts)


def format_classroom_schedule_text(schedule_info: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏."""
    if not schedule_info or schedule_info.get('error'):
        return f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {schedule_info.get('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏.')}"

    classroom_number = schedule_info.get('classroom', '–ê—É–¥–∏—Ç–æ—Ä–∏—è')
    date_str = schedule_info['date'].strftime('%d.%m.%Y')
    day_name = schedule_info.get('day_name', '')

    header = f"üö™ <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è {classroom_number}</b>\nüóì <b>{date_str} ¬∑ {day_name}</b>\n"
    
    lessons = schedule_info.get('lessons')
    if not lessons:
        return header + "\n‚úÖ <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è —Å–≤–æ–±–æ–¥–Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å!</b>"

    lesson_parts = []
    for lesson in lessons:
        time_str = lesson.get('time', '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        subject_str = lesson.get('subject', '–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω')
        group_str = f" ({', '.join(lesson.get('groups', []))})"
        
        lesson_header = f"<b>{time_str}</b>\n{subject_str}{group_str}"
        
        details_parts = []
        teachers = lesson.get('teachers')
        if teachers:
            details_parts.append(f"üßë‚Äçüè´ {teachers}")
        
        details_str = "\n" + " ".join(details_parts) if details_parts else ""
        lesson_parts.append(f"{lesson_header}{details_str}")

    return header + "\n\n".join(lesson_parts)


def format_full_week_text(week_schedule: dict, week_name: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–∞—Ä."""
    days_order = ["–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö", "–í–¢–û–†–ù–ò–ö", "–°–†–ï–î–ê", "–ß–ï–¢–í–ï–†–ì", "–ü–Ø–¢–ù–ò–¶–ê", "–°–£–ë–ë–û–¢–ê"]
    text_parts = [f"üóì <b>{week_name.capitalize()}</b>"]
    
    sorted_days = sorted(week_schedule.keys(), key=lambda day: days_order.index(day.upper()) if day.upper() in days_order else 99)

    for day_name in sorted_days:
        lessons = week_schedule.get(day_name)
        
        if lessons:
            text_parts.append(f"\n--- <b>{day_name.upper()}</b> ---")
            
            try:
                sorted_lessons = sorted(
                    lessons, 
                    key=lambda lesson: datetime.strptime(lesson.get('time', '23:59').split('-')[0].strip(), '%H:%M').time()
                )
            except (ValueError, IndexError):
                sorted_lessons = lessons

            for lesson in sorted_lessons:
                time_str = lesson.get('time', '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
                subject_str = lesson.get('subject', '–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω')
                type_str = f"({lesson.get('type', '')})" if lesson.get('type') else ""
                
                text_parts.append(f"{time_str} - <b>{subject_str}</b> {type_str}")
                
                details_parts = []
                teachers = lesson.get('teachers')
                if teachers:
                    details_parts.append(f"üßë‚Äçüè´ {teachers}")
                
                room = lesson.get('room')
                if room:
                    details_parts.append(f"üìç {room}")
                
                if details_parts:
                    text_parts.append(" ".join(details_parts))
    
    if len(text_parts) == 1:
        return f"üóì <b>{week_name.capitalize()}</b>\n\nüéâ –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç!"
        
    return "\n".join(text_parts)

# --- –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ï –ó–ê–ì–û–õ–û–í–ö–ò ---

def generate_dynamic_header(lessons: list, target_date: date) -> tuple[str, str]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä."""
    is_today = target_date == datetime.now(MOSCOW_TZ).date()

    if is_today and not lessons:
        return "‚ú® <b>–°–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.</b> –û—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è!", ""

    if not is_today or not lessons:
        return "", ""

    try:
        sorted_lessons = sorted(lessons, key=lambda x: datetime.strptime(x['start_time_raw'], '%H:%M').time())
        now_time = datetime.now(MOSCOW_TZ).time()
        
        MORNING_START_TIME = time(5, 0)
        
        passed_lessons_count = sum(1 for lesson in sorted_lessons if now_time > datetime.strptime(lesson['end_time_raw'], '%H:%M').time())
        total_lessons = len(sorted_lessons)
        progress_bar_emojis = 'üü©' * passed_lessons_count + '‚¨úÔ∏è' * (total_lessons - passed_lessons_count)
        progress_bar = f"<i>–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–Ω—è: {passed_lessons_count}/{total_lessons}</i> {progress_bar_emojis}\n"

        first_lesson_start = datetime.strptime(sorted_lessons[0]['start_time_raw'], '%H:%M').time()
        last_lesson_end = datetime.strptime(sorted_lessons[-1]['end_time_raw'], '%H:%M').time()
        
        def get_safe_times(time_str: str) -> tuple[str, str]:
            time_str_unified = time_str.replace('‚Äì', '-').replace('‚Äî', '-')
            parts = [p.strip() for p in time_str_unified.split('-')]
            return (parts[0], parts[1]) if len(parts) >= 2 else (parts[0] if parts else "", "")

        if now_time < MORNING_START_TIME:
            return "üåô <b>–ü–æ–∑–¥–Ω—è—è –Ω–æ—á—å.</b> –°–∫–æ—Ä–æ —É—Ç—Ä–æ!", progress_bar
            
        if now_time < first_lesson_start:
            start_time_str, _ = get_safe_times(sorted_lessons[0]['time'])
            return f"‚òÄÔ∏è <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!</b> –ü–µ—Ä–≤–∞—è –ø–∞—Ä–∞ –≤ {start_time_str}.", progress_bar

        if now_time > last_lesson_end:
            return "‚úÖ <b>–ü–∞—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.</b> –û—Ç–¥—ã—Ö–∞–π—Ç–µ!", progress_bar

        for i, lesson in enumerate(sorted_lessons):
            start_time = datetime.strptime(lesson['start_time_raw'], '%H:%M').time()
            end_time = datetime.strptime(lesson['end_time_raw'], '%H:%M').time()
            _, lesson_end_time_str = get_safe_times(lesson['time'])

            if start_time <= now_time <= end_time:
                end_text = f"–ó–∞–∫–æ–Ω—á–∏—Ç—Å—è –≤ {lesson_end_time_str}." if lesson_end_time_str else ""
                return f"‚è≥ <b>–ò–¥–µ—Ç –ø–∞—Ä–∞:</b> {lesson['subject']}.\n{end_text}", progress_bar
            
            if i + 1 < len(sorted_lessons):
                next_lesson = sorted_lessons[i+1]
                next_start_time_obj = datetime.strptime(next_lesson['start_time_raw'], '%H:%M').time()
                next_start_time_str, _ = get_safe_times(next_lesson['time'])
                if end_time < now_time < next_start_time_obj:
                    return f"‚òïÔ∏è <b>–ü–µ—Ä–µ—Ä—ã–≤ –¥–æ {next_start_time_str}.</b>\n–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞: {next_lesson['subject']}.", progress_bar

        return "", progress_bar 
    except (ValueError, IndexError, KeyError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}. –î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞: {lessons}")
        return "", ""

# --- –¢–ï–ö–°–¢–´ –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ---

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤ ---
UNSUBSCRIBE_FOOTER = "\n\n<tg-spoiler><i>–û—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç—É —Ä–∞—Å—Å—ã–ª–∫—É –º–æ–∂–Ω–æ –≤ ¬´‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª</i></tg-spoiler>"

# –†–µ–∫–ª–∞–º–∞ –∫–∞–Ω–∞–ª–∞ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ 30% —Å–ª—É—á–∞–µ–≤)
CHANNEL_PROMO = "\n\nüì¢ <i>–ù–æ–≤–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–∞: <a href='https://t.me/voenmeh404'>–ê—É–¥–∏—Ç–æ—Ä–∏—è 404 | –í–æ–µ–Ω–º–µ—Ö</a></i>"

def get_footer_with_promo() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç footer —Å –≤–æ–∑–º–æ–∂–Ω–æ–π —Ä–µ–∫–ª–∞–º–æ–π –∫–∞–Ω–∞–ª–∞ (30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)"""
    if random.random() < 0.3:  # 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã
        return UNSUBSCRIBE_FOOTER + CHANNEL_PROMO
    return UNSUBSCRIBE_FOOTER

EVENING_GREETINGS = ["–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! üëã", "–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º—É –¥–Ω—é.", "–í–µ—á–µ—Ä–Ω—è—è —Å–≤–æ–¥–∫–∞ –Ω–∞ –ø–æ–¥—Ö–æ–¥–µ."]
MORNING_GREETINGS = ["–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è", "–£—Ç—Ä–æ –¥–æ–±—Ä–æ–µ! –£—á–µ–±–∞ –∂–¥–µ—Ç.", "–£—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–æ–¥–∫–∞ –≥–æ—Ç–æ–≤–∞!"]
DAY_OF_WEEK_CONTEXT = {
    0: ["–ó–∞–≤—Ç—Ä–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –Ω–µ–¥–µ–ª—é —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!", "–ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –Ω–∞—á–∞–ª—É –Ω–æ–≤–æ–π –Ω–µ–¥–µ–ª–∏."],
    1: ["–ó–∞–≤—Ç—Ä–∞ –≤—Ç–æ—Ä–Ω–∏–∫, –≤—Ç—è–≥–∏–≤–∞–µ–º—Å—è –≤ —Ä–∏—Ç–º.", "–ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –≤—Ç–æ—Ä–Ω–∏–∫."],
    2: ["–ó–∞–≤—Ç—Ä–∞ —Å—Ä–µ–¥–∞ ‚Äî —ç–∫–≤–∞—Ç–æ—Ä –Ω–µ–¥–µ–ª–∏!", "–°–µ—Ä–µ–¥–∏–Ω–∞ –Ω–µ–¥–µ–ª–∏ —É–∂–µ –∑–∞–≤—Ç—Ä–∞. –î–µ—Ä–∂–∏–º—Å—è!"],
    3: ["–ó–∞–≤—Ç—Ä–∞ —á–µ—Ç–≤–µ—Ä–≥, —Ñ–∏–Ω–∏—à–Ω–∞—è –ø—Ä—è–º–∞—è –±–ª–∏–∑–∫–æ.", "–ï—â–µ –æ–¥–∏–Ω —Ä—ã–≤–æ–∫ –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏!"],
    4: ["–ó–∞–≤—Ç—Ä–∞ –ø—è—Ç–Ω–∏—Ü–∞! –í–ø–µ—Ä–µ–¥–∏ –∑–∞—Å–ª—É–∂–µ–Ω–Ω—ã–π –æ—Ç–¥—ã—Ö.", "–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä—ã–≤–æ–∫ –ø–µ—Ä–µ–¥ —á–∏–ª–ª–æ–º!"],
    5: ["–ó–∞–≤—Ç—Ä–∞ —É—á–µ–±–Ω–∞—è —Å—É–±–±–æ—Ç–∞ ‚Äî –¥–ª—è —Å–∞–º—ã—Ö —Å—Ç–æ–π–∫–∏—Ö.", "–ï—â–µ –æ–¥–∏–Ω –¥–µ–Ω—å –∑–Ω–∞–Ω–∏–π, –∞ –ø–æ—Ç–æ–º –æ—Ç–¥—ã—Ö."],
    6: ["–ó–∞–≤—Ç—Ä–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ ‚Äî –º–æ–∂–Ω–æ –≤—ã—Å–ø–∞—Ç—å—Å—è!", "–í–ø–µ—Ä–µ–¥–∏ –≤—ã—Ö–æ–¥–Ω–æ–π, –Ω–æ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –¥–æ–º–∞—à–∫—É üòâ"]
}
CLOTHING_ADVICES = {
    "cold": ["–ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –º–æ—Ä–æ–∑–Ω–æ, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —à–∞–ø–∫—É –∏ –ø–µ—Ä—á–∞—Ç–∫–∏!", "–°–æ–≤–µ—Ç—É–µ–º –æ–¥–µ—Ç—å—Å—è –ø–æ—Ç–µ–ø–ª–µ–µ."],
    "cool": ["–ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º –±—É–¥–µ—Ç –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ, –ª–µ–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞ –∏–ª–∏ —Å–≤–∏—Ç–µ—Ä –±—É–¥—É—Ç –≤ —Å–∞–º—ã–π —Ä–∞–∑.", "–û—Å–µ–Ω–Ω—è—è –ø—Ä–æ—Ö–ª–∞–¥–∞ —Ç—Ä–µ–±—É–µ—Ç —É—é—Ç–∞."],
    "warm": ["–ó–∞–≤—Ç—Ä–∞ –æ–±–µ—â–∞—é—Ç —Ç–µ–ø–ª–æ, –º–æ–∂–Ω–æ –æ–¥–µ—Ç—å—Å—è –ø–æ–ª–µ–≥—á–µ.", "–û—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏ –ø–æ—Å–ª–µ —É—á–µ–±—ã."],
    "hot": ["–ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –∂–∞—Ä–∫–æ! –ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã.", "–ù–∞—Å—Ç–æ—è—â–µ–µ –ª–µ—Ç–æ! –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ª–µ–≥–∫–æ–π –æ–¥–µ–∂–¥—ã."]
}
EVENING_ENGAGEMENT_BLOCKS = {
    "prep_tip": ["üí° –°–æ–≤–µ—Ç: –°–æ–±–µ—Ä–∏—Ç–µ —Ä—é–∫–∑–∞–∫ —Å –≤–µ—á–µ—Ä–∞, —á—Ç–æ–±—ã —É—Ç—Ä–æ–º –±—ã–ª–æ –º–µ–Ω—å—à–µ —Å—É–µ—Ç—ã.", "üí° –°–æ–≤–µ—Ç: –•–æ—Ä–æ—à–∏–π —Å–æ–Ω ‚Äî –∑–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è."],
    "planning_question": ["ü§î –í–æ–ø—Ä–æ—Å: –ö–∞–∫–∞—è –ø–∞—Ä–∞ –∑–∞–≤—Ç—Ä–∞ –∫–∞–∂–µ—Ç—Å—è —Å–∞–º–æ–π —Å–ª–æ–∂–Ω–æ–π?", "ü§î –í–æ–ø—Ä–æ—Å: –ö–∞–∫–∏–µ —Ü–µ–ª–∏ —Å—Ç–∞–≤–∏—Ç–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞?"],
    "quote": ["üìñ –¶–∏—Ç–∞—Ç–∞: ¬´–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ —É—Å–ø–µ—Ç—å¬ª.", "üìñ –¶–∏—Ç–∞—Ç–∞: ¬´–ü–ª–∞–Ω—ã ‚Äî –Ω–∏—á—Ç–æ, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî –≤—Å—ë¬ª."]
}

def generate_evening_intro(weather_forecast: Dict[str, Any] | None, target_date: datetime) -> str:
    weekday = target_date.weekday()
    greeting_line = random.choice(EVENING_GREETINGS)
    day_context_line = random.choice(DAY_OF_WEEK_CONTEXT.get(weekday, [""]))
    weather_block = ""
    if weather_forecast:
        temp = int(weather_forecast['temperature'])
        description = weather_forecast.get('description', '').lower()
        advice_line = ""
        if temp <= 0: advice_line = random.choice(CLOTHING_ADVICES["cold"])
        elif 0 < temp <= 12: advice_line = random.choice(CLOTHING_ADVICES["cool"])
        elif 12 < temp <= 20: advice_line = random.choice(CLOTHING_ADVICES["warm"])
        else: advice_line = random.choice(CLOTHING_ADVICES["hot"])
        weather_block = f"{weather_forecast.get('emoji', '')} –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {description.capitalize()}, {temp}¬∞C.\n<i>{advice_line}</i>"
    engagement_type = random.choice(list(EVENING_ENGAGEMENT_BLOCKS.keys()))
    engagement_line = random.choice(EVENING_ENGAGEMENT_BLOCKS[engagement_type])
    parts = [day_context_line, weather_block, engagement_line]
    random.shuffle(parts)
    return "\n\n".join(filter(None, [greeting_line] + parts)) + "\n\n"

def generate_morning_intro(weather_forecast: Dict[str, Any] | None) -> str:
    greeting_line = random.choice(MORNING_GREETINGS)
    weather_block = ""
    if weather_forecast:
        temp = int(weather_forecast['temperature'])
        description = weather_forecast.get('description', '').lower()
        weather_block = f"–ó–∞ –æ–∫–Ω–æ–º —Å–µ–π—á–∞—Å {description.capitalize()}, {temp}¬∞C."
    return f"{greeting_line}\n{weather_block}\n"

def generate_reminder_text(lesson: Dict[str, Any] | None, reminder_type: str, break_duration: int | None, reminder_time_minutes: int | None = 20) -> str | None:
    text = ""
    if reminder_type == "first" and lesson:
        greetings = [f"–ü–µ—Ä–≤–∞—è –ø–∞—Ä–∞ —á–µ—Ä–µ–∑ {reminder_time_minutes} –º–∏–Ω—É—Ç!", "–°–∫–æ—Ä–æ –Ω–∞—á–∞–ª–æ, –Ω–µ –æ–ø–∞–∑–¥—ã–≤–∞–π—Ç–µ!", "–ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –ø–µ—Ä–≤–æ–π –ø–∞—Ä–µ!"]
        text = f"üîî <b>{random.choice(greetings)}</b>\n\n"
    elif reminder_type == "break" and lesson:
        next_lesson_time = lesson.get('time', 'N/A').split('-')[0].strip()
        if break_duration and break_duration >= 40:
            break_text = f"–£ –≤–∞—Å –±–æ–ª—å—à–æ–π –ø–µ—Ä–µ—Ä—ã–≤ {break_duration} –º–∏–Ω—É—Ç –¥–æ {next_lesson_time}. {random.choice(['–ú–æ–∂–Ω–æ —É—Å–ø–µ—Ç—å –ø–æ–æ–±–µ–¥–∞—Ç—å!', '–û—Ç–ª–∏—á–Ω—ã–π —à–∞–Ω—Å —Å—Ö–æ–¥–∏—Ç—å –≤ —Å—Ç–æ–ª–æ–≤—É—é.'])}"
        elif break_duration and break_duration >= 15:
            break_text = f"–ü–µ—Ä–µ—Ä—ã–≤ {break_duration} –º–∏–Ω—É—Ç –¥–æ {next_lesson_time}. {random.choice(['–í—Ä–µ–º—è –≤—ã–ø–∏—Ç—å —á–∞—é.', '–ú–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —Ä–∞–∑–º—è—Ç—å—Å—è.'])}"
        else:
            break_text = random.choice(["–£—Å–ø–µ–π—Ç–µ –¥–æ–π—Ç–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏.", "–ö–æ—Ä–æ—Ç–∫–∞—è –ø–µ—Ä–µ–¥—ã—à–∫–∞."])
        text = f"‚úÖ <b>–ü–∞—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!</b>\n{break_text}\n\n‚òïÔ∏è <b>–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞:</b>\n"
    elif reminder_type == "final":
        final_phrases = ["–ü–∞—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å—ë! –ú–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å.", "–£—á–µ–±–Ω—ã–π –¥–µ–Ω—å –æ–∫–æ–Ω—á–µ–Ω. –•–æ—Ä–æ—à–µ–≥–æ –≤–µ—á–µ—Ä–∞!"]
        return f"üéâ <b>{random.choice(final_phrases)}</b>{UNSUBSCRIBE_FOOTER}"
    else:
        return None

    if lesson:
        text += f"<b>{lesson.get('subject', 'N/A')}</b> ({lesson.get('type', 'N/A')}) –≤ <b>{lesson.get('time', 'N/A')}</b>\n"
        info_parts = [f"üìç {room}" for room in [lesson.get('room')] if room]
        if teachers := lesson.get('teachers'): info_parts.append(f"<i>—Å {teachers}</i>")
        if info_parts: text += " ".join(info_parts)
    
    return text + UNSUBSCRIBE_FOOTER