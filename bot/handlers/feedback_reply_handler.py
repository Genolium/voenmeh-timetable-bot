"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Ñ–∏–¥–±–µ–∫ –≤ —á–∞—Ç–µ FEEDBACK_CHAT_ID
"""
import logging
import re
from aiogram import Bot, Router, F
from aiogram.types import Message

from core.config import FEEDBACK_CHAT_ID
from core.feedback_manager import FeedbackManager

logger = logging.getLogger(__name__)
feedback_reply_router = Router()

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏–º FEEDBACK_CHAT_ID, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –ø—Ä–∏ None/–ø—É—Å—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏ –≤ —Ç–µ—Å—Ç–∞—Ö –∏–ª–∏ CI
try:
    FEEDBACK_CHAT_ID_INT = int(FEEDBACK_CHAT_ID) if FEEDBACK_CHAT_ID is not None else None
except Exception:
    FEEDBACK_CHAT_ID_INT = None


if FEEDBACK_CHAT_ID_INT is not None:
    @feedback_reply_router.message(
        F.chat.id == FEEDBACK_CHAT_ID_INT,
        F.reply_to_message,
    )
    async def handle_feedback_reply(message: Message, bot: Bot, session_factory):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ñ–∏–¥–±–µ–∫ –≤ —á–∞—Ç–µ FEEDBACK_CHAT_ID.
    
    –ö–æ–≥–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–∏–¥–±–µ–∫–∞ –∏–ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ,
    –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not message.reply_to_message:
            return
    
    replied_msg = message.reply_to_message
    user_id = None
    
    # –í–∞—Ä–∏–∞–Ω—Ç 1: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —É –Ω–µ–≥–æ –Ω–µ —Å–∫—Ä—ã—Ç–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∞)
    if replied_msg.forward_from:
        user_id = replied_msg.forward_from.id
        logger.info(f"Found user_id from forward_from: {user_id}")
    
    # –í–∞—Ä–∏–∞–Ω—Ç 2: –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å ID –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (user info message –æ—Ç –±–æ—Ç–∞)
    if not user_id and (replied_msg.text or replied_msg.caption):
        text = replied_msg.text or replied_msg.caption
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "ID: <code>123456</code>" –∏–ª–∏ "ID: 123456"
        match = re.search(r'ID:\s*(?:<code>)?(\d+)(?:</code>)?', text)
        if match:
            user_id = int(match.group(1))
            logger.info(f"Found user_id from text pattern: {user_id}")
    
    # –í–∞—Ä–∏–∞–Ω—Ç 3: –ï—Å–ª–∏ —ç—Ç–æ reply –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–∫—Ä—ã—Ç—ã–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º,
    # –∏—â–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ü–µ–ø–æ—á–∫–µ (—Å–æ–æ–±—â–µ–Ω–∏–µ —Å info –æ—Ç –±–æ—Ç–∞)
    if not user_id and (replied_msg.forward_sender_name or replied_msg.forward_from_chat):
        logger.info("Forward from hidden user, trying to find user_id from next message")
        # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã–ª –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        # –ù–æ –º—ã –Ω–µ –º–æ–∂–µ–º –ª–µ–≥–∫–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å–∏–º –∞–¥–º–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        await message.reply(
            "‚ö†Ô∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫—Ä—ã–ª –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ "
            "(–æ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).",
            parse_mode="HTML"
        )
        return
    
    if not user_id:
        await message.reply(
            "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞</b>\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞:\n"
            "‚Ä¢ –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "‚Ä¢ –ò–ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (—Å –µ–≥–æ ID)",
            parse_mode="HTML"
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        admin_response = message.text or message.caption or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–∏—Å–ª–∞–ª –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ"
        
        if message.content_type == 'text':
            await bot.send_message(
                chat_id=user_id,
                text=(
                    "üì¨ <b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à —Ñ–∏–¥–±–µ–∫</b>\n\n"
                    f"üîÑ <b>–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n{admin_response}\n\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å. ü§ñ"
                ),
                parse_mode="HTML"
            )
        else:
            # –ö–æ–ø–∏—Ä—É–µ–º –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ
            caption_text = (
                "üì¨ <b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à —Ñ–∏–¥–±–µ–∫</b>\n\n"
                f"üîÑ <b>–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n{message.caption or ''}\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å. ü§ñ"
            )
            await bot.copy_message(
                chat_id=user_id,
                from_chat_id=message.chat.id,
                message_id=message.message_id,
                caption=caption_text,
                parse_mode="HTML"
            )
        
        # –û—Ç–º–µ—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∏–¥–±–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π
        try:
            feedback_manager = FeedbackManager(session_factory)
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π —Ñ–∏–¥–±–µ–∫ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with session_factory() as session:
                from sqlalchemy import select
                from core.db.models import Feedback
                result = await session.execute(
                    select(Feedback)
                    .where(Feedback.user_id == user_id, Feedback.is_answered == False)
                    .order_by(Feedback.created_at.desc())
                )
                feedback = result.scalar_one_or_none()
                
                if feedback:
                    await feedback_manager.answer_feedback(
                        feedback.id,
                        message.from_user.id,
                        admin_response
                    )
                    logger.info(f"Marked feedback #{feedback.id} as answered")
        except Exception as e:
            logger.error(f"Error marking feedback as answered: {e}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await message.reply(
            f"‚úÖ <b>–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!</b>\n"
            f"üë§ User ID: <code>{user_id}</code>",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error sending reply to user {user_id}: {e}")
        await message.reply(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞</b>\n\n"
            f"User ID: <code>{user_id}</code>\n"
            f"–û—à–∏–±–∫–∞: {str(e)}",
            parse_mode="HTML"
        )
else:
    # –ï—Å–ª–∏ FEEDBACK_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è ‚Äî —ç—Ç–æ –¥–æ–ø—É—Å—Ç–∏–º–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤/CI
    pass
