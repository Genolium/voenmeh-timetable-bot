import logging
import re
import random
from datetime import date, timedelta, datetime
from uuid import uuid4

from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent
from core.manager import TimetableManager
from bot.text_formatters import format_schedule_text
from core.config import MOSCOW_TZ

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
DAY_ALIASES = {
    '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0, '–ø–Ω': 0,
    '–≤—Ç–æ—Ä–Ω–∏–∫': 1, '–≤—Ç': 1,
    '—Å—Ä–µ–¥–∞': 2, '—Å—Ä': 2,
    '—á–µ—Ç–≤–µ—Ä–≥': 3, '—á—Ç': 3,
    '–ø—è—Ç–Ω–∏—Ü–∞': 4, '–ø—Ç': 4,
    '—Å—É–±–±–æ—Ç–∞': 5, '—Å–±': 5,
    '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 6, '–≤—Å': 6,
}

def parse_day_from_query(query_parts: list[str]) -> tuple[date, list[str]]:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å —Ü–µ–ª–µ–≤—É—é –¥–∞—Ç—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞.
    """
    today = datetime.now(MOSCOW_TZ).date()
    query_lower = " ".join(query_parts).lower()

    if "—Å–µ–≥–æ–¥–Ω—è" in query_lower:
        remaining_parts = [p for p in query_parts if p.lower() != "—Å–µ–≥–æ–¥–Ω—è"]
        return today, remaining_parts
    if "–∑–∞–≤—Ç—Ä–∞" in query_lower:
        remaining_parts = [p for p in query_parts if p.lower() != "–∑–∞–≤—Ç—Ä–∞"]
        return today + timedelta(days=1), remaining_parts

    target_day = None
    remaining_parts = list(query_parts) # –ö–æ–ø–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω—è—Ç—å
    for i, part in enumerate(query_parts):
        day_num = DAY_ALIASES.get(part.lower())
        if day_num is not None:
            target_day = day_num
            # –£–¥–∞–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —á–∞—Å—Ç–µ–π
            remaining_parts.pop(i)
            break
            
    if target_day is not None:
        days_diff = target_day - today.weekday()
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π –¥–µ–Ω—å —É–∂–µ –ø—Ä–æ—à–µ–ª –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ, –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â—É—é
        if days_diff < 0:
            days_diff += 7
        return today + timedelta(days=days_diff), remaining_parts

    # –ï—Å–ª–∏ –¥–µ–Ω—å –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è
    return today, remaining_parts


async def inline_query_handler(query: InlineQuery, manager: TimetableManager):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: @bot_name –û735–ë –∑–∞–≤—Ç—Ä–∞
    """
    query_text = query.query.strip()
    if not query_text:
        return

    # –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Å—Ç–∏
    parts = re.split(r'\s+', query_text)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞ (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ, –≥—Ä—É–ø–ø–∞)
    target_date, remaining_parts = parse_day_from_query(parts)
    
    if not remaining_parts:
        return # –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥—Ä—É–ø–ø—É

    group_name = remaining_parts[0].upper()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –≥—Ä—É–ø–ø–∞
    if group_name not in manager._schedules:
        result = InlineQueryResultArticle(
            id=str(uuid4()),
            title=f"–ì—Ä—É–ø–ø–∞ '{group_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            description="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã.",
            input_message_content=InputTextMessageContent(
                message_text=f"‚ùå –ì—Ä—É–ø–ø–∞ <b>{group_name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            )
        )
        await query.answer([result], cache_time=10, is_personal=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    schedule_info = manager.get_schedule_for_day(group_name, target_date)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    result_title = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {group_name} –Ω–∞ {target_date.strftime('%d.%m')} ({schedule_info.get('day_name', '')})"
    
    if schedule_info.get("lessons"):
        num_lessons = len(schedule_info["lessons"])
        first_lesson_time = schedule_info["lessons"][0]['time'].split('‚Äì')[0].strip()
        result_description = f"–ü–∞—Ä: {num_lessons}. –ù–∞—á–∞–ª–æ –≤ {first_lesson_time}."
    else:
        result_description = "üéâ –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç, –º–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å!"
    
    formatted_text = format_schedule_text(schedule_info)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º—É –∫–∞–Ω–∞–ª–∞ –≤ 20% —Å–ª—É—á–∞–µ–≤
    if random.random() < 0.2:
        formatted_text += "\n\nüì¢ <i>–ù–æ–≤–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: <a href='https://t.me/voenmeh404'>–ê—É–¥–∏—Ç–æ—Ä–∏—è 404 | –í–æ–µ–Ω–º–µ—Ö</a></i>"

    result = InlineQueryResultArticle(
        id=f"{group_name}:{target_date.isoformat()}",
        title=result_title,
        description=result_description,
        input_message_content=InputTextMessageContent(
            message_text=formatted_text,
            parse_mode="HTML",
            disable_web_page_preview=True
        ),
        thumb_url="https://images2.imgbox.com/d2/af/ztPHjmSO_o.png", 
        thumb_width=48,
        thumb_height=48
    )

    try:
        await query.answer([result], cache_time=60, is_personal=True)
    except Exception as e:
        logging.error(f"Error answering inline query: {e}")