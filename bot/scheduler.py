import logging
from datetime import datetime, time, timedelta
import os
import asyncio
import json

from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from redis.asyncio.client import Redis

from bot.tasks import send_lesson_reminder_task, send_message_task
from bot.text_formatters import (
    format_schedule_text, format_teacher_schedule_text, generate_evening_intro, generate_morning_intro, get_footer_with_promo
)
from core.config import (
    CHECK_INTERVAL_MINUTES, MOSCOW_TZ, OPENWEATHERMAP_API_KEY,
    OPENWEATHERMAP_CITY_ID, OPENWEATHERMAP_UNITS, REDIS_SCHEDULE_HASH_KEY,
    REDIS_SCHEDULE_CACHE_KEY,
)
from core.manager import TimetableManager
from core.schedule_diff import ScheduleDiffDetector, ScheduleDiffFormatter
from core.metrics import SUBSCRIBED_USERS, TASKS_SENT_TO_QUEUE, USERS_TOTAL, LAST_SCHEDULE_UPDATE_TS, ERRORS_TOTAL
from core.parser import fetch_and_parse_all_schedules
from datetime import datetime as _dt
from core.user_data import UserDataManager
from core.weather_api import WeatherAPI
from core.image_cache_manager import ImageCacheManager
from core.image_generator import generate_schedule_image
from core.admin_reports import send_daily_reports, send_weekly_reports, send_monthly_reports
from aiogram.types import CallbackQuery

logger = logging.getLogger(__name__)

def print_progress_bar(current: int, total: int, prefix: str = "–ü—Ä–æ–≥—Ä–µ—Å—Å", suffix: str = "", length: int = 50):
    """
    –í—ã–≤–æ–¥–∏—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤ –∫–æ–Ω—Å–æ–ª—å.
    
    Args:
        current: –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        total: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        prefix: –ü—Ä–µ—Ñ–∏–∫—Å —Å–æ–æ–±—â–µ–Ω–∏—è
        suffix: –°—É—Ñ—Ñ–∏–∫—Å —Å–æ–æ–±—â–µ–Ω–∏—è
        length: –î–ª–∏–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    """
    filled_length = int(length * current // total)
    bar = '‚ñà' * filled_length + '-' * (length - filled_length)
    percent = f"{100 * current // total}%"
    print(f'\r{prefix} |{bar}| {percent} {suffix}', end='', flush=True)
    if current == total:
        print()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –∫–æ–Ω—Ü–µ

async def evening_broadcast(user_data_manager: UserDataManager, timetable_manager: TimetableManager):
    tomorrow = datetime.now(MOSCOW_TZ) + timedelta(days=1)
    logger.info(f"–ù–∞—á–∏–Ω–∞—é –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–¥–∞—á –Ω–∞ –≤–µ—á–µ—Ä–Ω—é—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è –¥–∞—Ç—ã {tomorrow.date().isoformat()}")

    weather_api = WeatherAPI(OPENWEATHERMAP_API_KEY, OPENWEATHERMAP_CITY_ID, OPENWEATHERMAP_UNITS)
    tomorrow_9am = MOSCOW_TZ.localize(datetime.combine(tomorrow.date(), time(9, 0)))
    weather_forecast = await weather_api.get_forecast_for_time(tomorrow_9am)

    users_to_notify = await user_data_manager.get_users_for_evening_notify()
    if not users_to_notify:
        logger.info("–í–µ—á–µ—Ä–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        return

    for user_id, group_name in users_to_notify:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_data_manager.get_full_user_info(user_id)
        user_type = getattr(user, 'user_type', 'student')

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º intro —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        intro_text = generate_evening_intro(weather_forecast, target_date=tomorrow, user_type=user_type)

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_type == 'teacher':
            schedule_info = await timetable_manager.get_teacher_schedule(group_name, target_date=tomorrow.date())
        else:
            schedule_info = await timetable_manager.get_schedule_for_day(group_name, target_date=tomorrow.date())

        has_lessons = bool(schedule_info and not schedule_info.get('error') and schedule_info.get('lessons'))

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if has_lessons:
            if user_type == 'teacher':
                schedule_text = format_teacher_schedule_text(schedule_info)
                text_body = f"<b>–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:</b>\n\n{schedule_text}"
            else:
                schedule_text = format_schedule_text(schedule_info)
                text_body = f"<b>–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:</b>\n\n{schedule_text}"
        else:
            if user_type == 'teacher':
                text_body = "–ó–∞–≤—Ç—Ä–∞ –∑–∞–Ω—è—Ç–∏–π –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ."
            else:
                text_body = "üéâ <b>–ó–∞–≤—Ç—Ä–∞ –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç!</b>"
        
        text = f"{intro_text}{text_body}{get_footer_with_promo()}"

        send_message_task.send(user_id, text)
        TASKS_SENT_TO_QUEUE.labels(actor_name='send_message_task').inc()

async def morning_summary_broadcast(user_data_manager: UserDataManager, timetable_manager: TimetableManager):
    today = datetime.now(MOSCOW_TZ)
    logger.info(f"–ù–∞—á–∏–Ω–∞—é –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–¥–∞—á –Ω–∞ —É—Ç—Ä–µ–Ω–Ω—é—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è –¥–∞—Ç—ã {today.date().isoformat()}")

    weather_api = WeatherAPI(OPENWEATHERMAP_API_KEY, OPENWEATHERMAP_CITY_ID, OPENWEATHERMAP_UNITS)
    today_9am = MOSCOW_TZ.localize(datetime.combine(today.date(), time(9, 0)))
    weather_forecast = await weather_api.get_forecast_for_time(today_9am)

    users_to_notify = await user_data_manager.get_users_for_morning_summary()
    if not users_to_notify:
        logger.info("–£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        return

    for user_id, group_name in users_to_notify:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_data_manager.get_full_user_info(user_id)
        user_type = getattr(user, 'user_type', 'student')

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º intro —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        intro_text = generate_morning_intro(weather_forecast, user_type=user_type)

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_type == 'teacher':
            schedule_info = await timetable_manager.get_teacher_schedule(group_name, target_date=today.date())
        else:
            schedule_info = await timetable_manager.get_schedule_for_day(group_name, target_date=today.date())

        if schedule_info and not schedule_info.get('error') and schedule_info.get('lessons'):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_type == 'teacher':
                schedule_text = format_teacher_schedule_text(schedule_info)
            else:
                schedule_text = format_schedule_text(schedule_info)
            
            text = f"{intro_text}\n<b>–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n{schedule_text}{get_footer_with_promo()}"
            send_message_task.send(user_id, text)
            TASKS_SENT_TO_QUEUE.labels(actor_name='send_message_task').inc()

async def lesson_reminders_planner(scheduler: AsyncIOScheduler, user_data_manager: UserDataManager, timetable_manager: TimetableManager):
    now_in_moscow = datetime.now(MOSCOW_TZ)
    today = now_in_moscow.date()

    users_to_plan = await user_data_manager.get_users_for_lesson_reminders()
    if not users_to_plan:
        return

    for user_id, group_name, reminder_time in users_to_plan:
        try:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
            user = await user_data_manager.get_full_user_info(user_id)
            if getattr(user, 'user_type', 'student') == 'teacher':
                continue
        except Exception:
            pass
        schedule_info = await timetable_manager.get_schedule_for_day(group_name, target_date=today)
        if not (schedule_info and not schedule_info.get('error') and schedule_info.get('lessons')):
            continue

        try:
            lessons = sorted(schedule_info['lessons'], key=lambda x: datetime.strptime(x['start_time_raw'], '%H:%M').time())
        except (ValueError, KeyError):
            continue
        
        if lessons:
            try:
                start_time_obj = datetime.strptime(lessons[0]['start_time_raw'], '%H:%M').time()
                start_dt = MOSCOW_TZ.localize(datetime.combine(today, start_time_obj))
                reminder_dt = start_dt - timedelta(minutes=reminder_time)

                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ
                if reminder_dt >= now_in_moscow:
                    run_at = reminder_dt
                    scheduler.add_job(
                        send_lesson_reminder_task.send,
                        trigger=DateTrigger(run_date=run_at),
                        args=(user_id, lessons[0], "first", None, reminder_time),
                        id=f"reminder_{user_id}_{today.isoformat()}_first",
                        replace_existing=True,
                    )
                else:
                    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    continue
            except (ValueError, KeyError) as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–µ—Ä–≤–æ–π –ø–∞—Ä–µ –¥–ª—è user_id={user_id}: {e}")

        for i, lesson in enumerate(lessons):
            try:
                end_time_obj = datetime.strptime(lesson['end_time_raw'], '%H:%M').time()
                reminder_dt = MOSCOW_TZ.localize(datetime.combine(today, end_time_obj))
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ
                if reminder_dt < now_in_moscow:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                run_at = reminder_dt
                is_last_lesson = (i == len(lessons) - 1)
                reminder_type = "final" if is_last_lesson else "break"
                next_lesson = lessons[i+1] if not is_last_lesson else None
                break_duration = None
                if next_lesson:
                    next_start_time_obj = datetime.strptime(next_lesson['start_time_raw'], '%H:%M').time()
                    break_duration = int((datetime.combine(today, next_start_time_obj) - datetime.combine(today, end_time_obj)).total_seconds() / 60)
                
                scheduler.add_job(
                    send_lesson_reminder_task.send,
                    trigger=DateTrigger(run_date=run_at),
                    args=(user_id, next_lesson, reminder_type, break_duration, None),
                    id=f"reminder_{user_id}_{today.isoformat()}_{lesson['end_time_raw']}",
                    replace_existing=True,
                )
            except (ValueError, KeyError) as e:
                 logger.warning(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø–µ—Ä–µ—Ä—ã–≤–µ –¥–ª—è user_id={user_id}: {e}")

async def cancel_reminders_for_user(scheduler: AsyncIOScheduler, user_id: int):
    try:
        now_in_moscow = datetime.now(MOSCOW_TZ)
        today_iso = now_in_moscow.date().isoformat()
        for job in list(scheduler.get_jobs()):
            if job.id and job.id.startswith(f"reminder_{user_id}_{today_iso}"):
                try:
                    scheduler.remove_job(job.id)
                except Exception:
                    pass
    except Exception as e:
        logger.warning(f"cancel_reminders_for_user failed for {user_id}: {e}")

async def plan_reminders_for_user(scheduler: AsyncIOScheduler, user_data_manager: UserDataManager, timetable_manager: TimetableManager, user_id: int):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        user = await user_data_manager.get_full_user_info(user_id)
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
        if user and getattr(user, 'user_type', 'student') == 'teacher':
            return
        if not user or not user.group or not user.lesson_reminders:
            return
        today = datetime.now(MOSCOW_TZ).date()
        now_in_moscow = datetime.now(MOSCOW_TZ)
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Å–º—ã—Å–ª –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –µ—â–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ
        schedule_info = await timetable_manager.get_schedule_for_day(user.group, target_date=today)
        if not (schedule_info and not schedule_info.get('error') and schedule_info.get('lessons')):
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—ã
        try:
            lessons = sorted(schedule_info['lessons'], key=lambda x: datetime.strptime(x['start_time_raw'], '%H:%M').time())
        except (ValueError, KeyError):
            return
        
        # –ü–µ—Ä–≤–∞—è –ø–∞—Ä–∞ —Å —É—á—ë—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if lessons:
            try:
                start_time_obj = datetime.strptime(lessons[0]['start_time_raw'], '%H:%M').time()
                start_dt = MOSCOW_TZ.localize(datetime.combine(today, start_time_obj))
                reminder_dt = start_dt - timedelta(minutes=(user.reminder_time_minutes or 60))
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ü–ï–†–ï–î –ª—é–±—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                if reminder_dt < now_in_moscow:
                    logger.info(f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–∂–µ –ø—Ä–æ—à–ª–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å –≤ {reminder_dt}, —Å–µ–π—á–∞—Å {now_in_moscow}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    return
                    
                run_at = reminder_dt
                scheduler.add_job(
                    send_lesson_reminder_task.send,
                    trigger=DateTrigger(run_date=run_at),
                    args=(user_id, lessons[0], "first", None, user.reminder_time_minutes),
                    id=f"reminder_{user_id}_{today.isoformat()}_first",
                    replace_existing=True,
                )
                logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {reminder_dt}")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–µ—Ä–≤–æ–π –ø–∞—Ä–µ –¥–ª—è user_id={user_id}: {e}")
        # –ü–µ—Ä–µ—Ä—ã–≤—ã/–∫–æ–Ω–µ—Ü
        for i, lesson in enumerate(lessons):
            try:
                end_time_obj = datetime.strptime(lesson['end_time_raw'], '%H:%M').time()
                reminder_dt = MOSCOW_TZ.localize(datetime.combine(today, end_time_obj))
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ
                if reminder_dt < now_in_moscow:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                run_at = reminder_dt
                is_last = (i == len(lessons) - 1)
                next_lesson = lessons[i+1] if not is_last else None
                break_duration = None
                if next_lesson:
                    next_start_time_obj = datetime.strptime(next_lesson['start_time_raw'], '%H:%M').time()
                    break_duration = int((datetime.combine(today, next_start_time_obj) - datetime.combine(today, end_time_obj)).total_seconds() / 60)
                scheduler.add_job(
                    send_lesson_reminder_task.send,
                    trigger=DateTrigger(run_date=run_at),
                    args=(user_id, next_lesson, ("final" if is_last else "break"), break_duration, None),
                    id=f"reminder_{user_id}_{today.isoformat()}_{lesson['end_time_raw']}",
                    replace_existing=True,
                )
            except Exception:
                continue
    except Exception as e:
        logger.warning(f"plan_reminders_for_user failed for {user_id}: {e}")

async def monitor_schedule_changes(user_data_manager: UserDataManager, redis_client: Redis, bot: Bot):
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏...")
    
    global global_timetable_manager_instance # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è
    
    old_hash = (await redis_client.get(REDIS_SCHEDULE_HASH_KEY) or b'').decode()
    # Add retries
    attempts = 0
    while attempts < 3:
        try:
            new_schedule_data = await fetch_and_parse_all_schedules()
            break
        except Exception as e:
            attempts += 1
            logger.warning(f"Parse attempt {attempts} failed: {e}")
            if attempts == 3:
                logger.critical("Schedule parse failed after retries.")
                # Send alert
                from core.alert_sender import AlertSender
                async with AlertSender({}) as sender:
                    await sender.send({"severity": "critical", "summary": "Schedule parse failed"})
                return

    # For race condition: Use Redis lock
    async with redis_client.lock("timetable_manager_update_lock"):
        if new_schedule_data is None:
            logger.info("–î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (—É—Å–ª–æ–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å).")
            LAST_SCHEDULE_UPDATE_TS.set(_dt.now(MOSCOW_TZ).timestamp())
            return

        if not new_schedule_data:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤—É–∑–∞.")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫—ç—à–µ
            cached_data = await redis_client.get(REDIS_SCHEDULE_CACHE_KEY)
            if not cached_data:
                logger.warning("–û—Å–Ω–æ–≤–Ω–æ–π –∫—ç—à —Ç–∞–∫–∂–µ –ø—É—Å—Ç. –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏—è—Ö.")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏—è—Ö
            return
            
        new_hash = new_schedule_data.get('__current_xml_hash__')
        if new_hash != old_hash:
            logger.warning(f"–û–ë–ù–ê–†–£–ñ–ï–ù–´ –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –†–ê–°–ü–ò–°–ê–ù–ò–ò! –°—Ç–∞—Ä—ã–π —Ö–µ—à: {old_hash}, –ù–æ–≤—ã–π: {new_hash}")
            await redis_client.set(REDIS_SCHEDULE_HASH_KEY, new_hash)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            new_manager = TimetableManager(new_schedule_data, redis_client)
            await new_manager.save_to_cache()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏—Ñ—Ñ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–û–¢–ö–õ–Æ–ß–ï–ù–û)
            # await send_schedule_diff_notifications(
            #     user_data_manager=user_data_manager,
            #     old_manager=global_timetable_manager_instance,
            #     new_manager=new_manager
            # )
            
            # –ü–µ—Ä–µ–ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
            global_timetable_manager_instance = new_manager
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            try:
                admin_users = await user_data_manager.get_admin_users()
                admin_message = (
                    "üîÑ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b>\n\n"
                    "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏!\n"
                    "‚úÖ –ó–∞–ø—É—â–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø\n"
                    "üìä –ó–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å Dramatiq\n"
                    "‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
                )
                for admin_id in admin_users:
                    send_message_task.send(admin_id, admin_message)
                    TASKS_SENT_TO_QUEUE.labels(actor_name='send_message_task').inc()
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
        else:
            logger.info("–ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –ö–ê–ñ–î–û–ô —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
    LAST_SCHEDULE_UPDATE_TS.set(_dt.now(MOSCOW_TZ).timestamp())


# --- –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ---
BACKUP_PREFIX = "timetable:backup:"

async def backup_current_schedule(redis_client: Redis):
    try:
        data = await redis_client.get(REDIS_SCHEDULE_HASH_KEY)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ¬´—Å–Ω–∞–ø—à–æ—Ç¬ª –∫–ª—é—á–∞ —Ö–µ—à–∞ –∏ –¥–∞–º–ø –¥–∞–Ω–Ω—ã—Ö –∫—ç—à–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        from core.config import REDIS_SCHEDULE_CACHE_KEY
        cached_json = await redis_client.get(REDIS_SCHEDULE_CACHE_KEY)
        if cached_json:
            ts = _dt.now(MOSCOW_TZ).strftime('%Y%m%d_%H%M%S')
            await redis_client.set(f"{BACKUP_PREFIX}{ts}", cached_json)
            logger.info("–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: %s", ts)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: %s", e)

async def collect_db_metrics(user_data_manager: UserDataManager):
    try:
        total_users = await user_data_manager.get_total_users_count()
        subscribed_users = await user_data_manager.get_subscribed_users_count()
        USERS_TOTAL.set(total_users)
        SUBSCRIBED_USERS.set(subscribed_users)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –º–µ—Ç—Ä–∏–∫ –∏–∑ –ë–î: {e}")

async def cleanup_image_cache(redis_client: Redis):
    try:
        cache = ImageCacheManager(redis_client, cache_ttl_hours=192)
        await cache.cleanup_expired_cache()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–æ–≤–æ–π –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")

# –ú–∞—Å—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É–¥–∞–ª–µ–Ω—ã: —Ç–µ–ø–ª—ã–π –ø—Ä–æ–≥—Ä–µ–≤, –ø–æ–ª–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, pre-cache helper

async def auto_backup(redis_client: Redis):
    try:
        # Backup DB using Docker (safer approach)
        db_url = os.getenv("DATABASE_URL")
        if db_url:
            backup_file = f"db_backup_{datetime.now(MOSCOW_TZ).strftime('%Y%m%d_%H%M%S')}.sql"
            backup_path = f"/app/data/{backup_file}"
            
            # Extract connection details from DATABASE_URL
            import re
            match = re.match(r'postgresql://([^:]+):([^@]+)@([^:]+):(\d+)/(.+)', db_url)
            if match:
                user, password, host, port, dbname = match.groups()
                
                # Use docker exec to run pg_dump inside PostgreSQL container
                cmd = [
                    "docker", "exec", "-i", "voenmeh_postgres",
                    "pg_dump", "-h", "localhost", "-U", user, "-d", dbname
                ]
                
                try:
                    import subprocess
                    with open(backup_path, 'w') as f:
                        result = subprocess.run(cmd, stdout=f, stderr=subprocess.PIPE, 
                                              text=True, timeout=300, 
                                              env={**os.environ, 'PGPASSWORD': password})
                    
                    if result.returncode == 0:
                        logger.info(f"Database backup created: {backup_file}")
                    else:
                        logger.error(f"Failed to create database backup: {backup_file}")
                        logger.error(f"Error: {result.stderr}")
                except subprocess.TimeoutExpired:
                    logger.error(f"Database backup timed out: {backup_file}")
                except Exception as e:
                    logger.error(f"Exception during database backup: {e}")
            else:
                logger.error("Could not parse DATABASE_URL for backup")
        else:
            logger.warning("DATABASE_URL not found, skipping database backup")

        # Backup schedules from Redis
        from core.config import REDIS_SCHEDULE_CACHE_KEY
        schedules = await redis_client.get(REDIS_SCHEDULE_CACHE_KEY)

        if schedules:
            try:
                # Try to decompress the data (it's likely gzip-compressed)
                import gzip
                import pickle
                import json

                try:
                    # First try to decompress as gzip + pickle (the format used by TimetableManager)
                    decompressed = gzip.decompress(schedules)
                    schedule_data = pickle.loads(decompressed)
                    logger.info("Successfully decompressed schedule data using gzip+pickle")
                except (gzip.BadGzipFile, pickle.UnpicklingError):
                    try:
                        # Fallback: try as plain JSON
                        schedule_data = json.loads(schedules.decode('utf-8'))
                        logger.info("Successfully parsed schedule data as plain JSON")
                    except UnicodeDecodeError:
                        # Last resort: try to decode with error handling
                        schedule_data = json.loads(schedules.decode('utf-8', errors='replace'))
                        logger.warning("Successfully parsed schedule data with error replacement")

                # Write the decompressed data as readable JSON
                backup_file = f"schedules_backup_{datetime.now(MOSCOW_TZ).strftime('%Y%m%d_%H%M%S')}.json"
                with open(backup_file, "w", encoding='utf-8') as f:
                    json.dump(schedule_data, f, ensure_ascii=False, indent=2)
                logger.info(f"Schedule backup created: {backup_file}")

            except Exception as e:
                logger.error(f"Failed to process schedule data for backup: {e}")
                # Fallback: save raw data as binary
                backup_file = f"schedules_backup_raw_{datetime.now(MOSCOW_TZ).strftime('%Y%m%d_%H%M%S')}.bin"
                with open(backup_file, "wb") as f:
                    f.write(schedules)
                logger.info(f"Raw schedule backup created: {backup_file}")
        else:
            logger.info("No schedule data found in Redis cache")

        logger.info("Auto-backup completed successfully")

    except Exception as e:
        logger.error(f"Auto-backup failed with error: {e}")
        import traceback
        logger.error(traceback.format_exc())

async def send_schedule_diff_notifications(
    user_data_manager: UserDataManager,
    old_manager: TimetableManager,
    new_manager: TimetableManager
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö –≥—Ä—É–ø–ø–∞–º–∏
        users_with_groups = await user_data_manager.get_all_users_with_groups()
        if not users_with_groups:
            logger.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∏—Ñ—Ñ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≥—Ä—É–ø–ø–∞–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        groups_to_users = {}
        for user_id, group_name in users_with_groups:
            if group_name:
                if group_name not in groups_to_users:
                    groups_to_users[group_name] = []
                groups_to_users[group_name].append(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
        from datetime import date, timedelta
        today = date.today()
        dates_to_check = [today + timedelta(days=i) for i in range(7)]  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥
        
        total_notifications_sent = 0
        groups_with_changes = set()  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≥—Ä—É–ø–ø—ã —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        
        for group_name, user_ids in groups_to_users.items():
            group_has_changes = False
            
            for check_date in dates_to_check:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–∞—Ç—É
                    old_schedule = await old_manager.get_schedule_for_day(group_name, target_date=check_date)
                    new_schedule = await new_manager.get_schedule_for_day(group_name, target_date=check_date)
                    
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                    diff = ScheduleDiffDetector.compare_group_schedules(
                        group=group_name,
                        target_date=check_date,
                        old_schedule_data=old_schedule,
                        new_schedule_data=new_schedule
                    )
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    if diff.has_changes():
                        group_has_changes = True
                        groups_with_changes.add(group_name)  # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ —Å–ø–∏—Å–æ–∫ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
                        message = ScheduleDiffFormatter.format_group_diff(diff)
                        
                        if message:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≥—Ä—É–ø–ø—ã
                            for user_id in user_ids:
                                send_message_task.send(user_id, message)
                                TASKS_SENT_TO_QUEUE.labels(actor_name='send_message_task').inc()
                                total_notifications_sent += 1
                            
                            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–∏—Ñ—Ñ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} –Ω–∞ {check_date}: {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã {group_name} –Ω–∞ {check_date}: {e}")
                    continue
            
            if not group_has_changes:
                logger.debug(f"–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã {group_name}")
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {total_notifications_sent} –¥–∏—Ñ—Ñ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if total_notifications_sent > 0:
            try:
                admin_users = await user_data_manager.get_admin_users()
                admin_message = (
                    f"üìä <b>–û—Ç—á–µ—Ç –æ –¥–∏—Ñ—Ñ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö</b>\n\n"
                    f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏\n"
                    f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {total_notifications_sent}\n"
                    f"üë• –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ –≥—Ä—É–ø–ø: {len(groups_with_changes)}\n"
                    f"‚è±Ô∏è –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã –¥–∞—Ç—ã: {len(dates_to_check)} –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥"
                )
                for admin_id in admin_users:
                    send_message_task.send(admin_id, admin_message)
                    TASKS_SENT_TO_QUEUE.labels(actor_name='send_message_task').inc()
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –¥–∏—Ñ—Ñ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö: {e}")
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∏—Ñ—Ñ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        import traceback
        logger.error(traceback.format_exc())

async def handle_graduated_groups(user_data_manager: UserDataManager, timetable_manager: TimetableManager, redis_client: Redis):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –≥—Ä—É–ø–ø—ã –≤—ã–ø—É—Å—Ç–∏–ª–∏—Å—å –∏ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É.
    """
    try:
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ –≤—ã–ø—É—Å—Ç–∏–≤—à–∏—Ö—Å—è –≥—Ä—É–ø–ø...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö –≥—Ä—É–ø–ø–∞–º–∏
        users_with_groups = await user_data_manager.get_all_users_with_groups()
        if not users_with_groups:
            logger.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        current_groups = set(timetable_manager._schedules.keys())
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–ª—é—á–∏
        current_groups = {g for g in current_groups if not g.startswith('__')}
        
        graduated_groups = set()
        affected_users = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user_id, group_name in users_with_groups:
            if group_name and group_name.upper() not in current_groups:
                graduated_groups.add(group_name.upper())
                affected_users.append((user_id, group_name))
        
        if not affected_users:
            logger.info("‚úÖ –í—Å–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã")
            return
        
        logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤—ã–ø—É—Å—Ç–∏–≤—à–∏–µ—Å—è –≥—Ä—É–ø–ø—ã: {', '.join(graduated_groups)}")
        logger.info(f"üìä –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(affected_users)}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        available_groups = sorted(list(current_groups))
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        bot = None
        try:
            from main import bot_instance
            bot = bot_instance
        except:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return
        
        if not bot:
            logger.warning("–ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return
        
        notified_count = 0
        for user_id, old_group in affected_users:
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_text = (
                    f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
                    f"–ì—Ä—É–ø–ø–∞ <b>{old_group}</b> –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.\n"
                    f"–í–æ–∑–º–æ–∂–Ω–æ, –≥—Ä—É–ø–ø–∞ –≤—ã–ø—É—Å—Ç–∏–ª–∞—Å—å –∏–ª–∏ –±—ã–ª–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞.\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É:\n"
                    f"<code>/start</code> - –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã\n\n"
                    f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã: {', '.join(available_groups[:10])}"
                    + (f"\n... –∏ –µ—â–µ {len(available_groups) - 10} –≥—Ä—É–ø–ø" if len(available_groups) > 10 else "")
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await bot.send_message(
                    chat_id=user_id,
                    text=message_text,
                    parse_mode="HTML"
                )
                
                # –û—á–∏—â–∞–µ–º –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await user_data_manager.set_user_group(user_id, None)
                
                notified_count += 1
                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ –≤—ã–ø—É—Å–∫–µ –≥—Ä—É–ø–ø—ã {old_group}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        logger.info(f"üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {notified_count}/{len(affected_users)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ Redis –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        try:
            stats_key = "graduated_groups_stats"
            stats_data = {
                "timestamp": datetime.now(MOSCOW_TZ).isoformat(),
                "graduated_groups": list(graduated_groups),
                "affected_users": len(affected_users),
                "notified_users": notified_count
            }
            await redis_client.set(stats_key, json.dumps(stats_data, ensure_ascii=False), ex=86400)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–ø—É—Å—Ç–∏–≤—à–∏—Ö—Å—è –≥—Ä—É–ø–ø: {e}")
        import traceback
        logger.error(traceback.format_exc())

def setup_scheduler(bot: Bot, manager: TimetableManager, user_data_manager: UserDataManager, redis_client: Redis) -> AsyncIOScheduler:
    scheduler = AsyncIOScheduler(timezone=str(MOSCOW_TZ))
    
    global global_timetable_manager_instance
    global_timetable_manager_instance = manager

    scheduler.add_job(evening_broadcast, 'cron', hour=20, minute=0, args=[user_data_manager, manager])
    scheduler.add_job(morning_summary_broadcast, 'cron', hour=8, minute=0, args=[user_data_manager, manager])
    scheduler.add_job(lesson_reminders_planner, 'cron', hour=6, minute=0, args=[scheduler, user_data_manager, manager])
    scheduler.add_job(monitor_schedule_changes, 'interval', minutes=CHECK_INTERVAL_MINUTES, args=[user_data_manager, redis_client, bot])
    scheduler.add_job(collect_db_metrics, 'interval', minutes=1, args=[user_data_manager])
    scheduler.add_job(backup_current_schedule, 'cron', hour='*/6', args=[redis_client])
    scheduler.add_job(auto_backup, 'cron', hour=2, args=[redis_client])
    scheduler.add_job(handle_graduated_groups, 'interval', minutes=10, args=[user_data_manager, manager, redis_client])

    # –ó–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    scheduler.add_job(send_daily_reports, 'cron', hour=9, minute=0, args=[bot, user_data_manager])  # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 9:00
    scheduler.add_job(send_weekly_reports, 'cron', hour=9, minute=0, day_of_week='mon', args=[bot, user_data_manager])  # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –≤ 9:00
    scheduler.add_job(send_monthly_reports, 'cron', hour=9, minute=0, day=1, args=[bot, user_data_manager])  # –ï–∂–µ–º–µ—Å—è—á–Ω–æ 1-–≥–æ —á–∏—Å–ª–∞ –≤ 9:00
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å —á–µ—Ä–µ–∑ —Ñ–ª–∞–≥ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω—ã –¥–ª—è –æ–±–ª–µ–≥—á–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ—Å—Ç–∞–º–∏)
    if os.getenv('ENABLE_IMAGE_CACHE_JOBS', '0') in ('1', 'true', 'True'):
        # –ï–∂–µ—á–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –∫—ç—à–∞
        scheduler.add_job(cleanup_image_cache, 'cron', minute=5, args=[redis_client])
    
    return scheduler