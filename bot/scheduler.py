import logging
import random
from datetime import datetime, time, timedelta
from typing import Dict, Any, List 

from aiogram import Bot 
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from redis.asyncio.client import Redis

from bot.tasks import send_lesson_reminder_task, send_message_task 
from bot.utils import format_schedule_text
from core.config import (
    CHECK_INTERVAL_MINUTES, MOSCOW_TZ, OPENWEATHERMAP_API_KEY,
    OPENWEATHERMAP_CITY_ID, OPENWEATHERMAP_UNITS, REDIS_SCHEDULE_HASH_KEY
)
from core.manager import TimetableManager

from core.metrics import SUBSCRIBED_USERS, TASKS_SENT_TO_QUEUE, USERS_TOTAL
from core.parser import fetch_and_parse_all_schedules
from core.user_data import UserDataManager
from core.weather_api import WeatherAPI

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
global_timetable_manager_instance = None

UNSUBSCRIBE_FOOTER = "\n\n<tg-spoiler><i>–û—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç—É —Ä–∞—Å—Å—ã–ª–∫—É –º–æ–∂–Ω–æ –≤ ¬´‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª</i></tg-spoiler>"

# --- –ë–õ–û–ö–ò –ö–û–ù–¢–ï–ù–¢–ê –î–õ–Ø –ì–ï–ù–ï–†–ê–¢–û–†–ê ---
EVENING_GREETINGS = ["–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! üëã", "–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º—É –¥–Ω—é.", "–í–µ—á–µ—Ä–Ω—è—è —Å–≤–æ–¥–∫–∞ –Ω–∞ –ø–æ–¥—Ö–æ–¥–µ.", "–ö–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å?", "–í—Ä–µ–º—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤—Ç—Ä–∞."]
MORNING_GREETINGS = ["–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è", "–£—Ç—Ä–æ –¥–æ–±—Ä–æ–µ! –£—á–µ–±–∞ –∂–¥–µ—Ç.", "–£—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–æ–¥–∫–∞ –≥–æ—Ç–æ–≤–∞!", "–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–µ–Ω—å!", "–í—Å–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —É—Ç—Ä–∞!"]

DAY_OF_WEEK_CONTEXT = {
    0: ["–ó–∞–≤—Ç—Ä–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –Ω–µ–¥–µ–ª—é —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!", "–ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –Ω–∞—á–∞–ª—É –Ω–æ–≤–æ–π –Ω–µ–¥–µ–ª–∏.", "–ó–∞–≤—Ç—Ä–∞ —Å–Ω–æ–≤–∞ –≤ –±–æ–π! üí™"],
    1: ["–ó–∞–≤—Ç—Ä–∞ –≤—Ç–æ—Ä–Ω–∏–∫, –≤—Ç—è–≥–∏–≤–∞–µ–º—Å—è –≤ —Ä–∏—Ç–º.", "–ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –≤—Ç–æ—Ä–Ω–∏–∫.", "–ó–∞–≤—Ç—Ä–∞ –≤—Ç–æ—Ä–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –ø–æ–ª–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π."],
    2: ["–ó–∞–≤—Ç—Ä–∞ —Å—Ä–µ–¥–∞ ‚Äî —ç–∫–≤–∞—Ç–æ—Ä –Ω–µ–¥–µ–ª–∏!", "–°–µ—Ä–µ–¥–∏–Ω–∞ –Ω–µ–¥–µ–ª–∏ —É–∂–µ –∑–∞–≤—Ç—Ä–∞. –î–µ—Ä–∂–∏–º—Å—è!", "–ó–∞–≤—Ç—Ä–∞ ‚Äî –º–∞–ª–µ–Ω—å–∫–∞—è –ø—è—Ç–Ω–∏—Ü–∞."],
    3: ["–ó–∞–≤—Ç—Ä–∞ —á–µ—Ç–≤–µ—Ä–≥, —Ñ–∏–Ω–∏—à–Ω–∞—è –ø—Ä—è–º–∞—è –±–ª–∏–∑–∫–æ.", "–ï—â–µ –æ–¥–∏–Ω —Ä—ã–≤–æ–∫ –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏!", "–ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–º—É —á–µ—Ç–≤–µ—Ä–≥—É."],
    4: ["–ó–∞–≤—Ç—Ä–∞ –ø—è—Ç–Ω–∏—Ü–∞! –í–ø–µ—Ä–µ–¥–∏ –∑–∞—Å–ª—É–∂–µ–Ω–Ω—ã–π –æ—Ç–¥—ã—Ö.", "–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä—ã–≤–æ–∫ –ø–µ—Ä–µ–¥ —á–∏–ª–ª–æ–º!", "–ö–∞–∫–∏–µ –ø–ª–∞–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –≤–µ—á–µ—Ä –ø—è—Ç–Ω–∏—Ü—ã?"],
    5: ["–ó–∞–≤—Ç—Ä–∞ —É—á–µ–±–Ω–∞—è —Å—É–±–±–æ—Ç–∞ ‚Äî –¥–ª—è —Å–∞–º—ã—Ö —Å—Ç–æ–π–∫–∏—Ö.", "–ï—â–µ –æ–¥–∏–Ω –¥–µ–Ω—å –∑–Ω–∞–Ω–∏–π, –∞ –ø–æ—Ç–æ–º –æ—Ç–¥—ã—Ö.", "–ì–æ—Ç–æ–≤–∏–º—Å—è –∫ —É—á–µ–±–Ω–æ–π —Å—É–±–±–æ—Ç–µ."],
    6: ["–ó–∞–≤—Ç—Ä–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ ‚Äî –º–æ–∂–Ω–æ –≤—ã—Å–ø–∞—Ç—å—Å—è!", "–í–ø–µ—Ä–µ–¥–∏ –≤—ã—Ö–æ–¥–Ω–æ–π, –Ω–æ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –¥–æ–º–∞—à–∫—É üòâ", "–ó–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å –æ—Ç–¥—ã—Ö–∞!"]
}

WEATHER_OBSERVATIONS = {
    "clear": ["–ù–∞—Å –∂–¥–µ—Ç —è—Å–Ω–æ–µ –Ω–µ–±–æ. ‚òÄÔ∏è", "–ü—Ä–æ–≥–Ω–æ–∑ –æ–±–µ—â–∞–µ—Ç —Å–æ–ª–Ω—Ü–µ!", "–ü–æ—Ö–æ–∂–µ, –∑–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –æ—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞."],
    "rain": ["–û–∂–∏–¥–∞–µ—Ç—Å—è –¥–æ–∂–¥—å. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–æ–Ω—Ç! üåßÔ∏è", "–ü–∏—Ç–µ—Ä—Å–∫–∞—è –∫–ª–∞—Å—Å–∏–∫–∞: –∑–∞–≤—Ç—Ä–∞ {description}.", "–î–æ–∂–¥—å ‚Äî –Ω–µ –ø–æ–º–µ—Ö–∞ –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –¥–µ–ª."],
    "snow": ["–ì–æ—Ç–æ–≤–∏–º—Å—è –∫ —Å–Ω–µ–≥—É! ‚ùÑÔ∏è", "–ó–∞–≤—Ç—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∫–æ–ª—å–∑–∫–æ, –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã.", "–ù–∞—Å –∂–¥–µ—Ç –∑–∏–º–Ω—è—è —Å–∫–∞–∑–∫–∞."],
    "clouds": ["–ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –æ–±–ª–∞—á–Ω–æ, –Ω–æ –±–µ–∑ –æ—Å–∞–¥–∫–æ–≤. ‚òÅÔ∏è", "–°–æ–ª–Ω—Ü–µ –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å –≤ –ø—Ä—è—Ç–∫–∏ –∑–∞ —Ç—É—á–∞–º–∏.", "–û–∂–∏–¥–∞–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å."],
    "default": ["–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {description}.", "–°–∏–Ω–æ–ø—Ç–∏–∫–∏ –æ–±–µ—â–∞—é—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ {description}."]
}

CLOTHING_ADVICES = {
    "cold": ["–ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –º–æ—Ä–æ–∑–Ω–æ, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —à–∞–ø–∫—É –∏ –ø–µ—Ä—á–∞—Ç–∫–∏!", "–°–æ–≤–µ—Ç—É–µ–º –æ–¥–µ—Ç—å—Å—è –ø–æ—Ç–µ–ø–ª–µ–µ. –õ—É—á—à–µ —Å–Ω—è—Ç—å –ª–∏—à–Ω–µ–µ, —á–µ–º –∑–∞–º–µ—Ä–∑–Ω—É—Ç—å.", "–û—â—É—â–∞—Ç—å—Å—è –±—É–¥–µ—Ç –∫–∞–∫ –≤—Å–µ {temp_feels_like}¬∞C, —É—Ç–µ–ø–ª—è–π—Ç–µ—Å—å!"],
    "cool": ["–ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º –±—É–¥–µ—Ç –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ, –ª–µ–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞ –∏–ª–∏ —Å–≤–∏—Ç–µ—Ä –±—É–¥—É—Ç –≤ —Å–∞–º—ã–π —Ä–∞–∑.", "–û—Å–µ–Ω–Ω—è—è –ø—Ä–æ—Ö–ª–∞–¥–∞ —Ç—Ä–µ–±—É–µ—Ç —É—é—Ç–Ω–æ–≥–æ —à–∞—Ä—Ñ–∞.", "–ù–µ –¥–∞–π—Ç–µ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π –ø–æ–≥–æ–¥–µ –∑–∞—Å—Ç–∞—Ç—å –≤–∞—Å –≤—Ä–∞—Å–ø–ª–æ—Ö!"],
    "warm": ["–ó–∞–≤—Ç—Ä–∞ –æ–±–µ—â–∞—é—Ç —Ç–µ–ø–ª–æ, –º–æ–∂–Ω–æ –æ–¥–µ—Ç—å—Å—è –ø–æ–ª–µ–≥—á–µ.", "–û—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞, —á—Ç–æ–±—ã –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –≥–æ—Ä–æ–¥–æ–º –ø–æ—Å–ª–µ —É—á–µ–±—ã.", "–ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å —Ç—è–∂–µ–ª—ã–µ –∫—É—Ä—Ç–∫–∏ –¥–æ–º–∞."],
    "hot": ["–ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –∂–∞—Ä–∫–æ! –ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã.", "–ù–∞—Å—Ç–æ—è—â–µ–µ –ª–µ—Ç–æ! –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ª–µ–≥–∫–æ–π –æ–¥–µ–∂–¥—ã –∏ —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –æ—á–∫–æ–≤.", "–ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Ç–µ–ø–ª–æ–º—É –¥–Ω—é!"],
}

EVENING_ENGAGEMENT_BLOCKS = {
    "prep_tip": [
        "üí° –°–æ–≤–µ—Ç –Ω–∞ –≤–µ—á–µ—Ä: –°–æ–±–µ—Ä–∏—Ç–µ —Ä—é–∫–∑–∞–∫ —Å –≤–µ—á–µ—Ä–∞, —á—Ç–æ–±—ã —É—Ç—Ä–æ–º –±—ã–ª–æ –º–µ–Ω—å—à–µ —Å—É–µ—Ç—ã.",
        "üí° –°–æ–≤–µ—Ç –Ω–∞ –≤–µ—á–µ—Ä: –•–æ—Ä–æ—à–∏–π —Å–æ–Ω ‚Äî –∑–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ª–µ—á—å –ø–æ—Ä–∞–Ω—å—à–µ!",
        "üí° –°–æ–≤–µ—Ç –Ω–∞ –≤–µ—á–µ—Ä: –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å–ø–µ–∫—Ç—ã —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –ª–µ–∫—Ü–∏–π, —á—Ç–æ–±—ã –ª—É—á—à–µ –∏—Ö –∑–∞–ø–æ–º–Ω–∏—Ç—å."
    ],
    "planning_question": [
        "ü§î –í–æ–ø—Ä–æ—Å –Ω–∞ –≤–µ—á–µ—Ä: –ö–∞–∫–∞—è –ø–∞—Ä–∞ –∑–∞–≤—Ç—Ä–∞ –∫–∞–∂–µ—Ç—Å—è —Å–∞–º–æ–π —Å–ª–æ–∂–Ω–æ–π?",
        "ü§î –í–æ–ø—Ä–æ—Å –Ω–∞ –≤–µ—á–µ—Ä: –ö–∞–∫–∏–µ —Ü–µ–ª–∏ —Å—Ç–∞–≤–∏—Ç–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å, –∫—Ä–æ–º–µ —É—á–µ–±—ã?",
        "ü§î –í–æ–ø—Ä–æ—Å –Ω–∞ –≤–µ—á–µ—Ä: –£–∂–µ —Ä–µ—à–∏–ª–∏, –≥–¥–µ –±—É–¥–µ—Ç–µ –æ–±–µ–¥–∞—Ç—å –∑–∞–≤—Ç—Ä–∞?"
    ],
    "quote": [
        "üìñ –¶–∏—Ç–∞—Ç–∞ –≤–µ—á–µ—Ä–∞: ¬´–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ —É—Å–ø–µ—Ç—å¬ª. –ì–æ—Ç–æ–≤–∏–º—Å—è —É—Å–ø–µ—Ç—å –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ!",
        "üìñ –¶–∏—Ç–∞—Ç–∞ –≤–µ—á–µ—Ä–∞: ¬´–õ—É—á—à–µ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –ø–æ—Å–∞–¥–∏—Ç—å –¥–µ—Ä–µ–≤–æ, –±—ã–ª–æ 20 –ª–µ—Ç –Ω–∞–∑–∞–¥. –°–ª–µ–¥—É—é—â–µ–µ –ª—É—á—à–µ–µ –≤—Ä–µ–º—è ‚Äî —Å–µ–≥–æ–¥–Ω—è¬ª. ‚Äî –ö–∏—Ç–∞–π—Å–∫–∞—è –ø–æ—Å–ª–æ–≤–∏—Ü–∞",
        "üìñ –¶–∏—Ç–∞—Ç–∞ –≤–µ—á–µ—Ä–∞: ¬´–ü–ª–∞–Ω—ã ‚Äî –Ω–∏—á—Ç–æ, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî –≤—Å—ë¬ª. ‚Äî –î—É–∞–π—Ç –≠–π–∑–µ–Ω—Ö–∞—É—ç—Ä"
    ]
}


def generate_evening_intro(weather_forecast: Dict[str, Any] | None, target_date: datetime) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≤–µ—á–µ—Ä–Ω—é—é –ø–æ–¥–≤–æ–¥–∫—É —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º –¥–Ω–µ."""
    weekday = target_date.weekday()
    greeting_line = random.choice(EVENING_GREETINGS)
    day_context_line = random.choice(DAY_OF_WEEK_CONTEXT.get(weekday, [""]))
    weather_block = ""
    if weather_forecast:
        temp = int(weather_forecast['temperature'])
        description = weather_forecast.get('description', '').lower()
        advice_line = ""
        if temp <= 0: advice_line = random.choice(CLOTHING_ADVICES["cold"]).format(temp_feels_like=temp - 5)
        elif 0 < temp <= 12: advice_line = random.choice(CLOTHING_ADVICES["cool"])
        elif 12 < temp <= 20: advice_line = random.choice(CLOTHING_ADVICES["warm"])
        else: advice_line = random.choice(CLOTHING_ADVICES["hot"])
        weather_block = f"{weather_forecast.get('emoji', '')} –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {description.capitalize()}, {temp}¬∞C.\n<i>{advice_line}</i>"
    engagement_type = random.choice(list(EVENING_ENGAGEMENT_BLOCKS.keys()))
    engagement_line = random.choice(EVENING_ENGAGEMENT_BLOCKS[engagement_type])
    parts = [day_context_line, weather_block, engagement_line]
    random.shuffle(parts)
    return "\n\n".join(filter(None, [greeting_line] + parts)) + "\n\n"


async def evening_broadcast(user_data_manager: UserDataManager):
    """(–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ 20:00) –°—Ç–∞–≤–∏—Ç –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞."""
    logging.info("–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á –Ω–∞ –≤–µ—á–µ—Ä–Ω—é—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ –æ—á–µ—Ä–µ–¥—å...")
    weather_api = WeatherAPI(OPENWEATHERMAP_API_KEY, OPENWEATHERMAP_CITY_ID, OPENWEATHERMAP_UNITS)
    tomorrow = datetime.now(MOSCOW_TZ) + timedelta(days=1)
    tomorrow_9am = datetime.combine(tomorrow.date(), time(9, 0), tzinfo=MOSCOW_TZ)
    weather_forecast = await weather_api.get_forecast_for_time(tomorrow_9am)
    intro_text = generate_evening_intro(weather_forecast, target_date=tomorrow)
    
    users_to_notify = await user_data_manager.get_users_for_evening_notify()
    for user_id, group_name in users_to_notify:
        schedule_info = global_timetable_manager_instance.get_schedule_for_day(group_name, target_date=tomorrow.date())
        text_body = "üéâ <b>–ó–∞–≤—Ç—Ä–∞ –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç!</b> –ú–æ–∂–Ω–æ –∫–∞–∫ —Å–ª–µ–¥—É–µ—Ç –æ—Ç–¥–æ—Ö–Ω—É—Ç—å."
        if schedule_info and not schedule_info.get('error') and schedule_info.get('lessons'):
            text_body = f"<b>–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:</b>\n\n{format_schedule_text(schedule_info)}"
        text = f"{intro_text}{text_body}{UNSUBSCRIBE_FOOTER}"
        send_message_task.send(user_id, text) 
        TASKS_SENT_TO_QUEUE.labels(actor_name='send_message_task').inc() 
    logging.info(f"–ó–∞–¥–∞—á–∏ –Ω–∞ –≤–µ—á–µ—Ä–Ω—é—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users_to_notify)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å.")


async def morning_summary_broadcast(user_data_manager: UserDataManager):
    """(–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ 8:00) –°—Ç–∞–≤–∏—Ç –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á–∏ –Ω–∞ —É—Ç—Ä–µ–Ω–Ω—é—é —Ä–∞—Å—Å—ã–ª–∫—É."""
    logging.info("–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á –Ω–∞ —É—Ç—Ä–µ–Ω–Ω—é—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ –æ—á–µ—Ä–µ–¥—å...")
    weather_api = WeatherAPI(OPENWEATHERMAP_API_KEY, OPENWEATHERMAP_CITY_ID, OPENWEATHERMAP_UNITS)
    today = datetime.now(MOSCOW_TZ)
    today_9am = datetime.combine(today.date(), time(9, 0), tzinfo=MOSCOW_TZ)
    weather_forecast = await weather_api.get_forecast_for_time(today_9am)
    
    greeting_line = random.choice(MORNING_GREETINGS)
    weather_block = ""
    if weather_forecast:
        temp = int(weather_forecast['temperature'])
        description = weather_forecast.get('description', '').lower()
        weather_block = f"–ó–∞ –æ–∫–Ω–æ–º —Å–µ–π—á–∞—Å {description.capitalize()}, {temp}¬∞C."

    intro_text = f"{greeting_line}\n{weather_block}\n"
    
    users_to_notify = await user_data_manager.get_users_for_morning_summary()
    for user_id, group_name in users_to_notify:
        schedule_info = global_timetable_manager_instance.get_schedule_for_day(group_name, target_date=today.date())
        if schedule_info and not schedule_info.get('error') and schedule_info.get('lessons'):
            text = f"{intro_text}\n<b>–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n{format_schedule_text(schedule_info)}{UNSUBSCRIBE_FOOTER}"
            send_message_task.send(user_id, text) 
            TASKS_SENT_TO_QUEUE.labels(actor_name='send_message_task').inc() 
    logging.info(f"–ó–∞–¥–∞—á–∏ –Ω–∞ —É—Ç—Ä–µ–Ω–Ω—é—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users_to_notify)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å.")


async def lesson_reminders_planner(scheduler: AsyncIOScheduler, user_data_manager: UserDataManager):
    """(–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ 6:00) –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–∞—Ä–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É—è DateTrigger."""
    logging.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–∞—Ä–∞—Ö...")
    today = datetime.now(MOSCOW_TZ).date()
    users_to_plan = await user_data_manager.get_users_for_lesson_reminders()

    if not users_to_plan:
        logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    for user_id, group_name in users_to_plan:
        schedule_info = global_timetable_manager_instance.get_schedule_for_day(group_name, target_date=today)
        if not (schedule_info and not schedule_info.get('error') and schedule_info.get('lessons')):
            continue
        
        try:
            lessons = sorted(schedule_info['lessons'], key=lambda x: datetime.strptime(x['start_time_raw'], '%H:%M').time())
        except (ValueError, KeyError) as e:
            logging.warning(f"–ü—Ä–æ–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {group_name} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            continue
        
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 20 –º–∏–Ω—É—Ç –¥–æ –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã
        if lessons:
            first_lesson = lessons[0]
            try:
                start_time_obj = datetime.strptime(first_lesson['start_time_raw'], '%H:%M').time()
                naive_dt = datetime.combine(today, start_time_obj)
                reminder_dt = MOSCOW_TZ.localize(naive_dt) - timedelta(minutes=20)
                if reminder_dt > datetime.now(MOSCOW_TZ):
                    job_id = f"reminder_{user_id}_{today.isoformat()}_first"
                    scheduler.add_job(send_lesson_reminder_task.send, trigger=DateTrigger(run_date=reminder_dt),
                                      args=(user_id, first_lesson, "first", None), id=job_id, replace_existing=True)
            except (ValueError, KeyError) as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–µ—Ä–≤–æ–π –ø–∞—Ä–µ –¥–ª—è user_id={user_id}: {e}")

        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞
        for i, lesson in enumerate(lessons):
            try:
                end_time_obj = datetime.strptime(lesson['end_time_raw'], '%H:%M').time()
                naive_dt = datetime.combine(today, end_time_obj)
                reminder_dt = MOSCOW_TZ.localize(naive_dt)
                
                if reminder_dt > datetime.now(MOSCOW_TZ):
                    is_last_lesson = (i == len(lessons) - 1)
                    reminder_type = "final" if is_last_lesson else "break"
                    next_lesson = lessons[i+1] if not is_last_lesson else None
                    break_duration = None
                    if next_lesson:
                        next_start_time_obj = datetime.strptime(next_lesson['start_time_raw'], '%H:%M').time()
                        break_duration = int((datetime.combine(today, next_start_time_obj) - datetime.combine(today, end_time_obj)).total_seconds() / 60)
                    
                    job_id = f"reminder_{user_id}_{today.isoformat()}_{lesson['end_time_raw']}"
                    scheduler.add_job(send_lesson_reminder_task.send, trigger=DateTrigger(run_date=reminder_dt),
                                      args=(user_id, next_lesson, reminder_type, break_duration), id=job_id, replace_existing=True)
            except (ValueError, KeyError) as e:
                 logging.warning(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø–µ—Ä–µ—Ä—ã–≤–µ –¥–ª—è user_id={user_id}: {e}")
    
    logging.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {len(users_to_plan)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    
    
async def monitor_schedule_changes(user_data_manager: UserDataManager, redis_client: Redis):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏ —Å—Ç–∞–≤–∏—Ç –≤ –æ—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏...")
    old_hash_bytes = await redis_client.get(REDIS_SCHEDULE_HASH_KEY)
    old_hash = old_hash_bytes.decode() if old_hash_bytes else ""
    new_schedule_data = await fetch_and_parse_all_schedules()

    if not new_schedule_data:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤—É–∑–∞.")
        return
        
    new_hash = new_schedule_data.get('__current_xml_hash__')
    if new_hash and old_hash != new_hash:
        logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏! –°—Ç–∞—Ä—ã–π —Ö–µ—à: {old_hash}, –ù–æ–≤—ã–π: {new_hash}")
        await redis_client.set(REDIS_SCHEDULE_HASH_KEY, new_hash)
        
        new_manager = TimetableManager(new_schedule_data, redis_client)
        await new_manager.save_to_cache()
        global global_timetable_manager_instance
        global_timetable_manager_instance = new_manager
        
        all_users = await user_data_manager.get_all_user_ids()
        message_text = "‚ùóÔ∏è <b>–í–ù–ò–ú–ê–ù–ò–ï! –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!</b>\n\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –±–æ—Ç–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã."
        for user_id in all_users:
            send_message_task.send(user_id, message_text)
            TASKS_SENT_TO_QUEUE.labels(actor_name='send_message_task').inc() 
    else:
        logging.info("–ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")

async def collect_db_metrics(user_data_manager: UserDataManager):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –ë–î –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç Prometheus Gauges."""
    try:
        logging.info("–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        total_users = await user_data_manager.get_total_users_count()
        subscribed_users = await user_data_manager.get_subscribed_users_count()
        
        USERS_TOTAL.set(total_users)
        SUBSCRIBED_USERS.set(subscribed_users)
        logging.info(f"–ú–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: total_users={total_users}, subscribed_users={subscribed_users}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –º–µ—Ç—Ä–∏–∫ –∏–∑ –ë–î: {e}")


def setup_scheduler(bot: Bot, manager: TimetableManager, user_data_manager: UserDataManager, redis_client: Redis) -> AsyncIOScheduler:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –∑–∞–¥–∞—á–∞–º–∏."""
    scheduler = AsyncIOScheduler(timezone=str(MOSCOW_TZ))
    
    global global_timetable_manager_instance
    global_timetable_manager_instance = manager

    scheduler.add_job(evening_broadcast, 'cron', hour=20, minute=0, args=[user_data_manager])
    scheduler.add_job(morning_summary_broadcast, 'cron', hour=8, minute=0, args=[user_data_manager])
    
    scheduler.add_job(lesson_reminders_planner, 'cron', hour=6, minute=0, args=[scheduler, user_data_manager])
    
    # –°–ª—É–∂–µ–±–Ω—ã–µ –∑–∞–¥–∞—á–∏
    scheduler.add_job(monitor_schedule_changes, 'interval', minutes=CHECK_INTERVAL_MINUTES, args=[user_data_manager, redis_client])
    scheduler.add_job(collect_db_metrics, 'interval', minutes=1, args=[user_data_manager]) 
    
    return scheduler