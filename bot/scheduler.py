import logging
from datetime import datetime, timedelta, time

from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger

from core.manager import TimetableManager
from core.user_data import UserDataManager
from core.config import MOSCOW_TZ
from bot.utils import format_schedule_text


async def evening_broadcast(bot: Bot, manager: TimetableManager, user_data_manager: UserDataManager):
    """
    (–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ 20:00)
    –†–∞—Å—Å—ã–ª–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —Ç–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º,
    —É –∫–æ—Ç–æ—Ä—ã—Ö –≤–∫–ª—é—á–µ–Ω–∞ –æ–ø—Ü–∏—è `evening_notify`.
    """
    logging.info("–ó–∞–ø—É—Å–∫ –≤–µ—á–µ—Ä–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏...")
    try:
        users_to_notify = await user_data_manager.get_users_for_evening_notify()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ –ë–î: {e}")
        return

    for user_id, group_name in users_to_notify:
        tomorrow = datetime.now(MOSCOW_TZ).date() + timedelta(days=1)
        schedule_info = manager.get_schedule_for_day(group_name, target_date=tomorrow)
        
        if schedule_info and not schedule_info.get('error') and schedule_info.get('lessons'):
            text = f"üëã <b>–¢–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:</b>\n\n{format_schedule_text(schedule_info)}"
            try:
                await bot.send_message(user_id, text)
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–µ—á–µ—Ä–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è user_id={user_id}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è user_id={user_id}: {e}")
    
    logging.info(f"–í–µ—á–µ—Ä–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_to_notify)}")


async def morning_summary_broadcast(bot: Bot, manager: TimetableManager, user_data_manager: UserDataManager):
    """
    (–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ 8:00)
    –†–∞—Å—Å—ã–ª–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Ç–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º,
    —É –∫–æ—Ç–æ—Ä—ã—Ö –≤–∫–ª—é—á–µ–Ω–∞ –æ–ø—Ü–∏—è `morning_summary`.
    """
    logging.info("–ó–∞–ø—É—Å–∫ —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏-—Å–≤–æ–¥–∫–∏...")
    try:
        users_to_notify = await user_data_manager.get_users_for_morning_summary()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤–æ–¥–∫–∏ –∏–∑ –ë–î: {e}")
        return

    for user_id, group_name in users_to_notify:
        today = datetime.now(MOSCOW_TZ).date()
        schedule_info = manager.get_schedule_for_day(group_name, target_date=today)
        
        if schedule_info and not schedule_info.get('error') and schedule_info.get('lessons'):
            text = f"‚òÄÔ∏è <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n{format_schedule_text(schedule_info)}"
            try:
                await bot.send_message(user_id, text)
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–æ–¥–∫–∞ –¥–ª—è user_id={user_id}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤–æ–¥–∫–∏ –¥–ª—è user_id={user_id}: {e}")

    logging.info(f"–£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞-—Å–≤–æ–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_to_notify)}")


async def lesson_reminders_planner(
    bot: Bot, scheduler: AsyncIOScheduler, manager: TimetableManager, user_data_manager: UserDataManager
):
    """
    (–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ 6:00)
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–∞—Ä–∞—Ö –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å –¥–ª—è —Ç–µ—Ö,
    —É –∫–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∞ –æ–ø—Ü–∏—è `lesson_reminders`.
    """
    logging.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–∞—Ä–∞—Ö...")
    today = datetime.now(MOSCOW_TZ).date()
    try:
        users_to_plan = await user_data_manager.get_users_for_lesson_reminders()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –ë–î: {e}")
        return

    for user_id, group_name in users_to_plan:
        schedule_info = manager.get_schedule_for_day(group_name, target_date=today)
        if not schedule_info or 'error' in schedule_info or not schedule_info.get('lessons'):
            continue
        
        lessons = sorted(schedule_info['lessons'], key=lambda x: x['time'])
        
        for i, current_lesson in enumerate(lessons):
            try:
                hour, minute = map(int, current_lesson['time'].split(':'))
                lesson_start_time = datetime.combine(today, time(hour, minute), tzinfo=MOSCOW_TZ)
            except (ValueError, IndexError):
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è –ø–∞—Ä—ã: {current_lesson['time']}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")
                continue

            reminder_time = None
            if i == 0:
                reminder_time = lesson_start_time - timedelta(minutes=20)
            else:
                prev_lesson = lessons[i-1]
                prev_hour, prev_minute = map(int, prev_lesson['time'].split(':'))
                end_of_prev_lesson = datetime.combine(today, time(prev_hour, prev_minute), tzinfo=MOSCOW_TZ) + timedelta(minutes=90)
                reminder_time = end_of_prev_lesson
            
            if reminder_time > datetime.now(MOSCOW_TZ):
                job_id = f"lesson_{user_id}_{today.isoformat()}_{current_lesson['time']}"
                next_lesson = lessons[i+1] if i + 1 < len(lessons) else None
                
                scheduler.add_job(
                    send_lesson_reminder,
                    trigger=DateTrigger(run_date=reminder_time),
                    args=(bot, user_id, current_lesson, next_lesson),
                    id=job_id,
                    replace_existing=True
                )
    
    logging.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–∞—Ä–∞—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_to_plan)}")


async def send_lesson_reminder(bot: Bot, user_id: int, lesson: dict, next_lesson: dict | None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä–µ."""
    try:
        text = f"üîî <b>–°–∫–æ—Ä–æ –ø–∞—Ä–∞: {lesson['time']}</b>\n\n"
        text += f"<b>{lesson['subject']}</b> ({lesson['type']})\n"
        text += f"üìç {lesson['room']}, <i>{lesson['teachers']}</i>"
        
        if next_lesson:
             text += f"\n\n<i>–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞ –≤ {next_lesson['time']}.</i>"
        else:
             text += f"\n\n<i>–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–∞—Ä–∞ —Å–µ–≥–æ–¥–Ω—è!</i>"
             
        await bot.send_message(user_id, text)
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–∞—Ä–µ –¥–ª—è user_id={user_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–∞—Ä–µ –¥–ª—è user_id={user_id}: {e}")


def setup_scheduler(bot: Bot, manager: TimetableManager, user_data_manager: UserDataManager) -> AsyncIOScheduler:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å —Ç—Ä–µ–º—è –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏."""
    scheduler = AsyncIOScheduler(timezone=str(MOSCOW_TZ))
    
    scheduler.add_job(evening_broadcast, 'cron', hour=20, args=(bot, manager, user_data_manager))
    scheduler.add_job(morning_summary_broadcast, 'cron', hour=8, args=(bot, manager, user_data_manager))
    scheduler.add_job(lesson_reminders_planner, 'cron', hour=6, args=(bot, scheduler, manager, user_data_manager))
    
    return scheduler