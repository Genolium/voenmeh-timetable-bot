import logging
import random
from datetime import datetime, timedelta, time
from redis.asyncio.client import Redis
from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger

from core.manager import TimetableManager
from core.user_data import UserDataManager
from core.config import (
    MOSCOW_TZ, CHECK_INTERVAL_MINUTES,
    REDIS_SCHEDULE_HASH_KEY, OPENWEATHERMAP_API_KEY,
    OPENWEATHERMAP_CITY_ID, OPENWEATHERMAP_UNITS
)
from bot.utils import format_schedule_text
from core.parser import fetch_and_parse_all_schedules
from core.weather_api import WeatherAPI

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
global_timetable_manager_instance = None

UNSUBSCRIBE_FOOTER = "\n\n<tg-spoiler><i>–û—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç—É —Ä–∞—Å—Å—ã–ª–∫—É –º–æ–∂–Ω–æ –≤ ¬´‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª</i></tg-spoiler>"


def generate_creative_weather_intro(weather_forecast: dict | None, forecast_for: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—É—é, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—É—é –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—â—É—é—Å—è –ø–æ–¥–≤–æ–¥–∫—É –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é,
    –≤–∫–ª—é—á–∞—è –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã.
    """
    if not weather_forecast:
        return f"ü§∑‚Äç‚ôÄÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {forecast_for}. –ù–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –ø–æ–¥ —Ä—É–∫–æ–π!\n\n"

    temp = int(weather_forecast['temperature'])
    description = weather_forecast.get('description', '').lower()
    wind_speed = round(weather_forecast.get('wind_speed', 0))
    main_weather_key = weather_forecast.get('main_weather_key', 'default')

    # --- 1. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–≤–µ—Ç–æ–≤ –∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π ---
    advices = []
    
    # --- –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ (—Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –±–ª–æ–∫ —Ñ—Ä–∞–∑) ---
    observations = {
        "clear": [
            "‚òÄÔ∏è –û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! {forecast_for_capital} –Ω–∞—Å –∂–¥–µ—Ç —è—Å–Ω—ã–π –∏ —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å.",
            "‚òÄÔ∏è –ü–æ—Ö–æ–∂–µ, {forecast_for} –±—É–¥–µ—Ç –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è —Å–æ–ª–Ω—Ü–µ–º.",
            "‚òÄÔ∏è –ò–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏ –ø–æ—Å–ª–µ –ø–∞—Ä! {forecast_for_capital} –±—É–¥–µ—Ç —Å–æ–ª–Ω–µ—á–Ω–æ.",
            "‚òÄÔ∏è –†–µ–¥–∫–æ–µ —è–≤–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞—à–∏—Ö —à–∏—Ä–æ—Ç! {forecast_for_capital} –æ–±–µ—â–∞–µ—Ç –±—ã—Ç—å —Å–æ–ª–Ω–µ—á–Ω—ã–º, –ª–æ–≤–∏—Ç–µ –º–æ–º–µ–Ω—Ç!"
        ],
        "rain": [
            "üåßÔ∏è –ö–∞–∂–µ—Ç—Å—è, {forecast_for} –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –∑–æ–Ω—Ç—ã! –°–∏–Ω–æ–ø—Ç–∏–∫–∏ –æ–±–µ—â–∞—é—Ç {description}.",
            "üåßÔ∏è –ü–∏—Ç–µ—Ä –ø–æ–∫–∞–∂–µ—Ç —Å–≤–æ–π –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä: {forecast_for} –±—É–¥–µ—Ç –¥–æ–∂–¥–ª–∏–≤–æ. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–æ–Ω—Ç–∏–∫!",
            "üåßÔ∏è –ó–∞ –æ–∫–Ω–æ–º –±—É–¥–µ—Ç {description}. –°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ—Ä—è—á–µ–≥–æ —á–∞—è –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏!",
        ],
        "snow": [
            "‚ùÑÔ∏è {forecast_for_capital} –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–Ω–µ–≥! –û–¥–µ–≤–∞–π—Ç–µ—Å—å —Ç–µ–ø–ª–µ–µ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –≤–æ–ª—à–µ–±–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π.",
            "‚ùÑÔ∏è –ù–∞—Å –∑–∞–º–µ—Ç–∞–µ—Ç! {forecast_for_capital} –±—É–¥–µ—Ç {description}, –≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Ö—Ä—É—Å—Ç—É –ø–æ–¥ –Ω–æ–≥–∞–º–∏.",
            "‚ùÑÔ∏è –ù–∞—Å—Ç–æ—è—â–∞—è –∑–∏–º–Ω—è—è —Å–∫–∞–∑–∫–∞! –û—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ –Ω–∞ —Å—Ç—É–ø–µ–Ω—å–∫–∞—Ö, –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∫–æ–ª—å–∑–∫–æ.",
        ],
        "clouds": [
            "‚òÅÔ∏è –ù–∞ –Ω–µ–±–µ {forecast_for} –±—É–¥—É—Ç –æ–±–ª–∞–∫–∞, –Ω–æ —ç—Ç–æ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç –Ω–∞—à–∏–º –ø–ª–∞–Ω–∞–º.",
            "‚òÅÔ∏è –°–æ–ª–Ω—Ü–µ {forecast_for} –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å –≤ –ø—Ä—è—Ç–∫–∏ –∑–∞ –æ–±–ª–∞–∫–∞–º–∏. –í–ø–æ–ª–Ω–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ!",
            "‚òÅÔ∏è –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å, –±–µ–∑ –ø–æ–≥–æ–¥–Ω—ã—Ö —Å—é—Ä–ø—Ä–∏–∑–æ–≤.",
        ],
        "overcast": [
            "üå•Ô∏è –ù–∞—Å –∂–¥–µ—Ç –ø–∞—Å–º—É—Ä–Ω—ã–π –¥–µ–Ω—å. –•–æ—Ä–æ—à–∏–π –ø–æ–≤–æ–¥ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π —Ç–µ—Ä–º–æ—Å —Å —á–µ–º-–Ω–∏–±—É–¥—å –≥–æ—Ä—è—á–∏–º!",
            "üå•Ô∏è –ù–µ–±–æ {forecast_for} –±—É–¥–µ—Ç –∑–∞—Ç—è–Ω—É—Ç–æ —Ç—É—á–∞–º–∏, –Ω–æ –æ—Å–∞–¥–∫–æ–≤ –Ω–µ –æ–±–µ—â–∞—é—Ç. –ü—Ä–æ—Å—Ç–æ —Å–µ—Ä—ã–π, –Ω–æ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–π –¥–µ–Ω—å.",
            "üå•Ô∏è –°–æ–ª–Ω—Ü–µ —Ä–µ—à–∏–ª–æ –≤–∑—è—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π. {forecast_for_capital} –±—É–¥–µ—Ç –ø–∞—Å–º—É—Ä–Ω–æ.",
        ],
        "thunderstorm": [
            "‚õàÔ∏è –û–≥–æ, {forecast_for} –≤–æ–∑–º–æ–∂–Ω–∞ –≥—Ä–æ–∑–∞! –õ—É—á—à–µ –ø–µ—Ä–µ–∂–¥–∞—Ç—å –Ω–µ–ø–æ–≥–æ–¥—É –≤ —Å—Ç–µ–Ω–∞—Ö –≤—É–∑–∞.",
            "‚õàÔ∏è –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã: {forecast_for} –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é—Ç –≥—Ä–æ–∑—É. –ó–∞—Ä—è–¥–∏—Ç–µ –ø–∞—É—ç—Ä–±–∞–Ω–∫ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π!",
        ],
        "fog": [
            "üå´Ô∏è –ì–æ—Ä–æ–¥ —É—Ç–æ–Ω–µ—Ç –≤ —Ç—É–º–∞–Ω–µ, —Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–¥ –Ω–æ–≥–∏ –ø–æ –¥–æ—Ä–æ–≥–µ –Ω–∞ –ø–∞—Ä—ã!",
            "üå´Ô∏è –í–∏–¥–∏–º–æ—Å—Ç—å {forecast_for} –±—É–¥–µ—Ç —Ç–∞–∫ —Å–µ–±–µ ‚Äî —Å–∏–Ω–æ–ø—Ç–∏–∫–∏ –ø–µ—Ä–µ–¥–∞—é—Ç –≥—É—Å—Ç–æ–π —Ç—É–º–∞–Ω.",
        ]
    }
    
    observation_templates = observations.get(main_weather_key)
    if observation_templates:
        advices.append(random.choice(observation_templates).format(
            forecast_for=forecast_for, 
            forecast_for_capital=forecast_for.capitalize(),
            description=description
        ))

    # --- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã ---
    
    # –°–æ–≤–µ—Ç –ø–æ –æ–¥–µ–∂–¥–µ, –∑–∞–≤–∏—Å—è—â–∏–π –æ—Ç –ø–æ–≥–æ–¥—ã –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    clothing_advices = []
    if temp <= 0:
        clothing_advices.append(random.choice(["–Ω–µ –∑–∞–±—É–¥—å—Ç–µ —à–∞–ø–∫—É –∏ –ø–µ—Ä—á–∞—Ç–∫–∏", "–Ω–∞–¥–µ–Ω—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ–π –æ–¥–µ–∂–¥—ã", "—à–∞—Ä—Ñ —Å–µ–≥–æ–¥–Ω—è —Ç–æ—á–Ω–æ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è"]))
    elif 0 < temp <= 10:
        if main_weather_key == "rain":
            clothing_advices.append(random.choice(["–ª—É—á—à–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ–ø—Ä–æ–º–æ–∫–∞–µ–º—É—é –∫—É—Ä—Ç–∫—É", "–≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–∞—è –æ–±—É–≤—å –±—É–¥–µ—Ç –æ—á–µ–Ω—å –∫—Å—Ç–∞—Ç–∏"]))
        else:
            clothing_advices.append(random.choice(["–∫—É—Ä—Ç–∫–∞ –∏–ª–∏ —Ç–æ–ª—Å—Ç–æ–≤–∫–∞ ‚Äî –≤–∞—à –ª—É—á—à–∏–π –¥—Ä—É–≥", "—Å–≤–∏—Ç–µ—Ä –ø–æ–¥ –∫—É—Ä—Ç–∫—É ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä"]))
    elif 10 < temp <= 18:
        clothing_advices.append("–º–æ–∂–Ω–æ –æ–¥–µ—Ç—å—Å—è –ø–æ–ª–µ–≥—á–µ")
    elif temp > 18:
        if main_weather_key == "clear":
            clothing_advices.append("–æ–¥–µ–≤–∞–π—Ç–µ—Å—å –∫–∞–∫ –º–æ–∂–Ω–æ –ª–µ–≥—á–µ –∏ –ø–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã")
        else:
            clothing_advices.append("–Ω–∞ —É–ª–∏—Ü–µ —Ç–µ–ø–ª–æ, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—É—à–Ω–æ")
            
    # –°–æ–≤–µ—Ç –ø–æ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞–º (–æ—á–∫–∏/–∑–æ–Ω—Ç)
    if main_weather_key == "clear" and temp > 15:
        clothing_advices.append("–∏ –∑–∞—Ö–≤–∞—Ç–∏—Ç–µ —Å–æ–ª–Ω–µ—á–Ω—ã–µ –æ—á–∫–∏ üòé")

    if clothing_advices:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É-—Å–≤—è–∑–∫—É
        connector = random.choice(["–ö—Å—Ç–∞—Ç–∏,", "–ù–µ–±–æ–ª—å—à–æ–π —Å–æ–≤–µ—Ç:"])
        full_clothing_advice = f"{connector} {', '.join(clothing_advices)}."
        advices.append(full_clothing_advice)

    # –°–æ–≤–µ—Ç –ø—Ä–æ –≤–µ—Ç–µ—Ä (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∑–∞–º–µ—Ç–Ω—ã–π)
    if wind_speed >= 10:
        advices.append("üå¨Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ, –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä!")
    elif wind_speed >= 5:
        advices.append("üí® –ë—É–¥–µ—Ç –≤–µ—Ç—Ä–µ–Ω–æ, –¥–µ—Ä–∂–∏—Ç–µ –∫–æ–Ω—Å–ø–µ–∫—Ç—ã –∫—Ä–µ–ø—á–µ!")

    # --- 2. –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ç—Ä–æ-–±–ª–æ–∫ ---
    intro_block = ""
    if advices:
        intro_block = "\n".join(advices)
    else:
        # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–æ—Å—å –í–û–û–ë–©–ï –Ω–∏—á–µ–≥–æ (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ)
        neutral_wishes = [
            "–ñ–µ–ª–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è!",
            "–£–¥–∞—á–Ω–æ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –¥–Ω—è!",
            "–ü—É—Å—Ç—å –≤—Å–µ –ø–∞—Ä—ã –ø—Ä–æ–π–¥—É—Ç –ª–µ–≥–∫–æ!",
            "–û—Ç–ª–∏—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –ª–µ–≥–∫–∏—Ö –ø–∞—Ä!"
        ]
        intro_block = random.choice(neutral_wishes)
        
    # --- 3. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å —Ç–æ—á–Ω—ã–º –ø—Ä–æ–≥–Ω–æ–∑–æ–º ---
    summary_header = "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —É—Ç—Ä–æ:" if forecast_for == "–∑–∞–≤—Ç—Ä–∞" else "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:"
    summary = (f"<b>{summary_header}</b> {description.capitalize()}, {temp}¬∞C, –≤–µ—Ç–µ—Ä {wind_speed} –º/—Å.")

    # --- 4. –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
    final_text = f"{intro_block}\n\n{summary}\n\n"
    
    return final_text


async def evening_broadcast(bot: Bot, user_data_manager: UserDataManager):
    """(–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ 20:00) –†–∞—Å—Å—ã–ª–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞."""
    logging.info("–ó–∞–ø—É—Å–∫ –≤–µ—á–µ—Ä–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏...")
    
    weather_api = WeatherAPI(OPENWEATHERMAP_API_KEY, OPENWEATHERMAP_CITY_ID, OPENWEATHERMAP_UNITS)
    tomorrow_9am = datetime.combine(datetime.now(MOSCOW_TZ).date() + timedelta(days=1), time(9, 0), tzinfo=MOSCOW_TZ)
    weather_forecast = await weather_api.get_forecast_for_time(tomorrow_9am)
    
    weather_intro_text = generate_creative_weather_intro(weather_forecast, forecast_for="–∑–∞–≤—Ç—Ä–∞")

    try:
        users_to_notify = await user_data_manager.get_users_for_evening_notify()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ –ë–î: {e}")
        return

    if not users_to_notify:
        logging.info("–í–µ—á–µ—Ä–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        return

    for user_id, group_name in users_to_notify:
        tomorrow = datetime.now(MOSCOW_TZ).date() + timedelta(days=1)
        schedule_info = global_timetable_manager_instance.get_schedule_for_day(group_name, target_date=tomorrow)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä—ã
        if schedule_info and not schedule_info.get('error') and schedule_info.get('lessons'):
            text = f"üëã <b>–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!</b>\n\n{weather_intro_text}<b>–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:</b>\n\n{format_schedule_text(schedule_info)}{UNSUBSCRIBE_FOOTER}"
            try:
                await bot.send_message(user_id, text, disable_web_page_preview=True)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è user_id={user_id}: {e}")
    
    logging.info(f"–í–µ—á–µ—Ä–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_to_notify)}")


async def morning_summary_broadcast(bot: Bot, user_data_manager: UserDataManager):
    """(–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ 8:00) –†–∞—Å—Å—ã–ª–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."""
    logging.info("–ó–∞–ø—É—Å–∫ —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏-—Å–≤–æ–¥–∫–∏...")
    
    weather_api = WeatherAPI(OPENWEATHERMAP_API_KEY, OPENWEATHERMAP_CITY_ID, OPENWEATHERMAP_UNITS)
    today_9am = datetime.combine(datetime.now(MOSCOW_TZ).date(), time(9, 0), tzinfo=MOSCOW_TZ)
    weather_forecast = await weather_api.get_forecast_for_time(today_9am)
    
    weather_intro_text = generate_creative_weather_intro(weather_forecast, forecast_for="—Å–µ–≥–æ–¥–Ω—è")

    try:
        users_to_notify = await user_data_manager.get_users_for_morning_summary()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤–æ–¥–∫–∏ –∏–∑ –ë–î: {e}")
        return

    if not users_to_notify:
        logging.info("–£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        return

    for user_id, group_name in users_to_notify:
        today = datetime.now(MOSCOW_TZ).date()
        schedule_info = global_timetable_manager_instance.get_schedule_for_day(group_name, target_date=today)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä—ã
        if schedule_info and not schedule_info.get('error') and schedule_info.get('lessons'):
            text = f"‚òÄÔ∏è <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!</b>\n\n{weather_intro_text}<b>–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n{format_schedule_text(schedule_info)}{UNSUBSCRIBE_FOOTER}"
            try:
                await bot.send_message(user_id, text, disable_web_page_preview=True)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤–æ–¥–∫–∏ –¥–ª—è user_id={user_id}: {e}")

    logging.info(f"–£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞-—Å–≤–æ–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_to_notify)}")


async def lesson_reminders_planner(
    bot: Bot, scheduler: AsyncIOScheduler, user_data_manager: UserDataManager
):
    """(–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ 6:00) –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–∞—Ä–∞—Ö."""
    logging.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–∞—Ä–∞—Ö...")
    today = datetime.now(MOSCOW_TZ).date()
    try:
        users_to_plan = await user_data_manager.get_users_for_lesson_reminders()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –ë–î: {e}")
        return

    if not users_to_plan:
        logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    for user_id, group_name in users_to_plan:
        schedule_info = global_timetable_manager_instance.get_schedule_for_day(group_name, target_date=today)
        if not schedule_info or 'error' in schedule_info or not schedule_info.get('lessons'):
            continue
        
        try:
            lessons = sorted(schedule_info['lessons'], key=lambda x: datetime.strptime(x['start_time_raw'], '%H:%M').time())
        except (ValueError, KeyError) as e:
            logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}. –ü—Ä–æ–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –û—à–∏–±–∫–∞: {e}")
            continue
        
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 20 –º–∏–Ω—É—Ç –¥–æ –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã
        if lessons:
            first_lesson = lessons[0]
            try:
                start_time_obj = datetime.strptime(first_lesson['start_time_raw'], '%H:%M').time()
                reminder_datetime = datetime.combine(today, start_time_obj, MOSCOW_TZ) - timedelta(minutes=20)
                if reminder_datetime > datetime.now(MOSCOW_TZ):
                    job_id = f"lesson_reminder_{user_id}_{today.isoformat()}_first"
                    scheduler.add_job(
                        send_lesson_reminder,
                        trigger=DateTrigger(run_date=reminder_datetime),
                        args=(bot, user_id, first_lesson, "first"),
                        id=job_id,
                        replace_existing=True
                    )
            except (ValueError, KeyError) as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–µ—Ä–≤–æ–π –ø–∞—Ä–µ –¥–ª—è user_id={user_id}: {e}")

        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞
        for i in range(len(lessons) - 1):
            current_lesson = lessons[i]
            next_lesson = lessons[i+1]
            try:
                end_time_obj = datetime.strptime(current_lesson['end_time_raw'], '%H:%M').time()
                reminder_datetime = datetime.combine(today, end_time_obj, MOSCOW_TZ)
                
                if reminder_datetime > datetime.now(MOSCOW_TZ):
                    job_id = f"lesson_reminder_{user_id}_{today.isoformat()}_{next_lesson['start_time_raw']}"
                    scheduler.add_job(
                        send_lesson_reminder,
                        trigger=DateTrigger(run_date=reminder_datetime),
                        args=(bot, user_id, next_lesson, "break"),
                        id=job_id,
                        replace_existing=True
                    )
            except (ValueError, KeyError) as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø–µ—Ä–µ—Ä—ã–≤–µ –¥–ª—è user_id={user_id}: {e}")
    
    logging.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–∞—Ä–∞—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_to_plan)}")


async def send_lesson_reminder(bot: Bot, user_id: int, lesson: dict | None, reminder_type: str, break_duration: int | None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞ –∏–ª–∏ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –¥–Ω—è."""
    try:
        if reminder_type == "first":
            # –≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∑–∞ 20 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞, —Å –Ω–∏–º –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ.
            text = f"üîî <b>–ü–µ—Ä–≤–∞—è –ø–∞—Ä–∞ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç!</b>\n\n"
        
        elif reminder_type == "break":
            # –≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –º–æ–º–µ–Ω—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–∞—Ä—ã.
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ –ù–ê–ß–ê–õ–ï –ø–µ—Ä–µ—Ä—ã–≤–∞.
            next_lesson_time = lesson.get('time', 'N/A').split('-')[0].strip()
            
            text = f"‚úÖ <b>–ü–∞—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!</b>\n"
            if break_duration and break_duration > 0:
                 text += f"–£ –≤–∞—Å –ø–µ—Ä–µ—Ä—ã–≤ {break_duration} –º–∏–Ω—É—Ç –¥–æ {next_lesson_time}.\n\n"
            else:
                 text += "\n" # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—á–∏—Ç–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–µ–º –æ—Ç—Å—Ç—É–ø.

            text += f"‚òïÔ∏è <b>–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞:</b>\n"

        elif reminder_type == "final":
            # –≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –º–æ–º–µ–Ω—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–∞—Ä—ã.
            text = "‚úÖ <b>–ü–∞—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!</b>\n\n–ú–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å. –•–æ—Ä–æ—à–µ–≥–æ –≤–µ—á–µ—Ä–∞!"
            text += UNSUBSCRIBE_FOOTER
            await bot.send_message(user_id, text, disable_web_page_preview=True)
            return # –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–∫–µ –Ω–µ –Ω—É–∂–Ω–∞
        
        else:
            return # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

        if lesson:
            text += f"<b>{lesson.get('subject', 'N/A')}</b> ({lesson.get('type', 'N/A')}) –≤ <b>{lesson.get('time', 'N/A')}</b>\n"
            
            info_parts = []
            room = lesson.get('room')
            if room and room.strip() != 'N/A':
                info_parts.append(f"üìç {room}")
            teachers = lesson.get('teachers')
            if teachers:
                info_parts.append(f"<i>—Å {teachers}</i>")
            
            if info_parts:
                text += " ".join(info_parts)
        
        text += UNSUBSCRIBE_FOOTER
             
        await bot.send_message(user_id, text, disable_web_page_preview=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–∞—Ä–µ –¥–ª—è user_id={user_id}: {e}")

async def monitor_schedule_changes(bot: Bot, user_data_manager: UserDataManager, redis_client: Redis):
    """
    (–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—É)
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ XML-—Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
    """
    logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏...")
    
    old_hash_bytes = await redis_client.get(REDIS_SCHEDULE_HASH_KEY)
    old_hash = old_hash_bytes.decode() if old_hash_bytes else ""
    
    new_schedule_data = await fetch_and_parse_all_schedules()

    if not new_schedule_data:
        logging.error("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –≤—É–∑–∞. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        return
        
    new_hash = new_schedule_data.get('__current_xml_hash__')

    if new_hash and old_hash != new_hash:
        logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏! –°—Ç–∞—Ä—ã–π —Ö–µ—à: {old_hash}, –ù–æ–≤—ã–π —Ö–µ—à: {new_hash}")
        
        await redis_client.set(REDIS_SCHEDULE_HASH_KEY, new_hash)
        logging.info(f"–ù–æ–≤—ã–π —Ö–µ—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Redis –ø–æ –∫–ª—é—á—É {REDIS_SCHEDULE_HASH_KEY}.")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
        new_manager_instance = TimetableManager(redis_client=redis_client) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö, –æ–Ω —Å–∞–º –∑–∞–≥—Ä—É–∑–∏—Ç –∏–∑ –∫—ç—à–∞
        await new_manager_instance.load_schedule(force_reload=True, schedule_data=new_schedule_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        global global_timetable_manager_instance
        global_timetable_manager_instance = new_manager_instance
        logging.info("–ì–ª–æ–±–∞–ª—å–Ω—ã–π TimetableManager —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.")
        
        all_users = await user_data_manager.get_all_user_ids()
        
        message_text = (
            "‚ùóÔ∏è <b>–í–ù–ò–ú–ê–ù–ò–ï! –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!</b>\n\n"
            "–ù–∞ —Å–∞–π—Ç–µ –í–æ–µ–Ω–º–µ—Ö–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.\n"
            "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –±–æ—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã."
        )

        for user_id in all_users:
            try:
                await bot.send_message(user_id, message_text, disable_web_page_preview=True)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è user_id={user_id}: {e}")
    else:
        logging.info("–ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")


def setup_scheduler(bot: Bot, manager: TimetableManager, user_data_manager: UserDataManager, redis_client: Redis) -> AsyncIOScheduler:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –∑–∞–¥–∞—á–∞–º–∏."""
    scheduler = AsyncIOScheduler(timezone=str(MOSCOW_TZ))
    
    global global_timetable_manager_instance
    global_timetable_manager_instance = manager

    scheduler.add_job(evening_broadcast, 'cron', hour=20, minute=0, args=[bot, user_data_manager])
    scheduler.add_job(morning_summary_broadcast, 'cron', hour=8, minute=0, args=[bot, user_data_manager])
    scheduler.add_job(lesson_reminders_planner, 'cron', hour=6, minute=0, args=[bot, scheduler, user_data_manager])
    
    scheduler.add_job(
        monitor_schedule_changes,
        trigger='interval',
        minutes=CHECK_INTERVAL_MINUTES,
        args=[bot, user_data_manager, redis_client]
    )
    
    return scheduler