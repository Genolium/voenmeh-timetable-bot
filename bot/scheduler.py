import logging
import os
import random 
from datetime import datetime, timedelta, time
from redis.asyncio.client import Redis
from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger

from core.manager import TimetableManager
from core.user_data import UserDataManager
from core.config import (
    MOSCOW_TZ, CHECK_INTERVAL_MINUTES, DATABASE_FILENAME,
    REDIS_SCHEDULE_HASH_KEY, OPENWEATHERMAP_API_KEY,
    OPENWEATHERMAP_CITY_ID, OPENWEATHERMAP_UNITS
)
from bot.utils import format_schedule_text
from core.parser import fetch_and_parse_all_schedules
from core.weather_api import WeatherAPI

global_timetable_manager_instance = None


def generate_creative_weather_intro(weather_forecast: dict | None, forecast_for: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—É—é, –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏ –ø—Ä–∏—è—Ç–Ω—É—é –ø–æ–¥–≤–æ–¥–∫—É –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é, –≤–∫–ª—é—á–∞—è –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã.
    """
    if not weather_forecast:
        return f"ü§∑‚Äç‚ôÄÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {forecast_for}. –ù–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –ø–æ–¥ —Ä—É–∫–æ–π!\n\n"

    temp = int(weather_forecast['temperature'])
    main_weather = weather_forecast.get('main_weather', '').lower()
    description = weather_forecast.get('description', '')
    wind_speed = round(weather_forecast.get('wind_speed', 0))

    WEATHER_PATTERNS = {
        "thunderstorm": {
            "emoji": "‚õàÔ∏è",
            "phrases": [
                f"–û–≥–æ, {forecast_for} –≤–æ–∑–º–æ–∂–Ω–∞ –≥—Ä–æ–∑–∞! –õ—É—á—à–µ –ø–µ—Ä–µ–∂–¥–∞—Ç—å –Ω–µ–ø–æ–≥–æ–¥—É –≤ —Å—Ç–µ–Ω–∞—Ö –≤—É–∑–∞.",
                f"–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã: {forecast_for} –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é—Ç –≥—Ä–æ–∑—É. –ó–∞—Ä—è–¥–∏—Ç–µ –ø–∞—É—ç—Ä–±–∞–Ω–∫ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π!",
                f"–ù–∞–¥–≤–∏–≥–∞–µ—Ç—Å—è —á—Ç–æ-—Ç–æ —Å–µ—Ä—å–µ–∑–Ω–æ–µ! {forecast_for.capitalize()} –æ–±–µ—â–∞—é—Ç –≥—Ä–æ–∑—É, –¥–µ—Ä–∂–∏—Ç–µ—Å—å –ø–æ–¥–∞–ª—å—à–µ –æ—Ç –≤—ã—Å–æ–∫–∏—Ö –¥–µ—Ä–µ–≤—å–µ–≤.",
                f"–ù–µ–±–æ –±—É–¥–µ—Ç –≥—Ä–æ—Ö–æ—Ç–∞—Ç—å! {forecast_for.capitalize()} –æ–∂–∏–¥–∞–µ—Ç—Å—è –≥—Ä–æ–∑–∞, –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–µ –ø–æ–ø–∞—Å—Ç—å –ø–æ–¥ —Å–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å.",
                f"–ú–æ—â–Ω—ã–π —Å–∞—É–Ω–¥—Ç—Ä–µ–∫ –∫ —É—á–µ–±–µ: {forecast_for} –æ–±–µ—â–∞—é—Ç –≥—Ä–æ–º –∏ –º–æ–ª–Ω–∏–∏.",
            ]
        },
        "rain": {
            "emoji": "üåßÔ∏è",
            "phrases": [
                f"–ö–∞–∂–µ—Ç—Å—è, {forecast_for} –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –∑–æ–Ω—Ç—ã! –°–∏–Ω–æ–ø—Ç–∏–∫–∏ –æ–±–µ—â–∞—é—Ç {description}.",
                f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–æ–Ω—Ç–∏–∫, {forecast_for} –æ–∂–∏–¥–∞—é—Ç—Å—è –æ—Å–∞–¥–∫–∏. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–µ –ø—Ä–æ–º–æ–∫–Ω—É—Ç—å!",
                f"–ü–æ—Ö–æ–∂–µ, {forecast_for} –±—É–¥–µ—Ç –¥–æ–∂–¥–ª–∏–≤–æ. –ò–¥–µ–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞, —á—Ç–æ–±—ã —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ —É—á–µ–±–µ.",
                f"–ó–∞ –æ–∫–Ω–æ–º –±—É–¥–µ—Ç {description}. –°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ—Ä—è—á–µ–≥–æ —á–∞—è –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏!",
                f"–ü–∏—Ç–µ—Ä –ø–æ–∫–∞–∂–µ—Ç —Å–≤–æ–π –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä: {forecast_for} –±—É–¥–µ—Ç {description}.",
                f"–î–æ—Ä–æ–≥–∞ –¥–æ —É–Ω–∏–≤–µ—Ä–∞ {forecast_for} –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å —á—É—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑-–∑–∞ –¥–æ–∂–¥—è.",
            ]
        },
        "snow": {
            "emoji": "‚ùÑÔ∏è",
            "phrases": [
                f"–ó–∏–º–∞ –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–≤–æ–∏ –ø—Ä–∞–≤–∞! –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Å–Ω–µ–≥—É {forecast_for} –∏ –≤–æ–ª—à–µ–±–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ.",
                f"–ù–∞—Å –∑–∞–º–µ—Ç–∞–µ—Ç! {forecast_for.capitalize()} –æ–∂–∏–¥–∞–µ—Ç—Å—è {description}, –æ–¥–µ–≤–∞–π—Ç–µ—Å—å —Ç–µ–ø–ª–µ–µ.",
                f"–í–æ–ª—à–µ–±—Å—Ç–≤–æ –≤ –≤–æ–∑–¥—É—Ö–µ! {forecast_for.capitalize()} –ø–æ–π–¥–µ—Ç —Å–Ω–µ–≥, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç—É –∫—Ä–∞—Å–æ—Ç—É –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ.",
                f"–ù–∞—Å—Ç–æ—è—â–∞—è –∑–∏–º–Ω—è—è —Å–∫–∞–∑–∫–∞! {forecast_for.capitalize()} –±—É–¥–µ—Ç —Å–Ω–µ–∂–Ω–æ, –≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Ö—Ä—É—Å—Ç—É –ø–æ–¥ –Ω–æ–≥–∞–º–∏.",
                f"–û—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ –Ω–∞ —Å—Ç—É–ø–µ–Ω—å–∫–∞—Ö, {forecast_for} –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∫–æ–ª—å–∑–∫–æ –∏–∑-–∑–∞ —Å–Ω–µ–≥–æ–ø–∞–¥–∞!",
            ]
        },
        "clear": {
            "emoji": "‚òÄÔ∏è",
            "phrases": [
                f"–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! {forecast_for.capitalize()} –Ω–∞—Å –∂–¥–µ—Ç —è—Å–Ω—ã–π –∏ —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å.",
                f"–ü–æ—Ö–æ–∂–µ, {forecast_for} –±—É–¥–µ—Ç –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è —Å–æ–ª–Ω—Ü–µ–º.",
                f"–ò–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏ –ø–æ—Å–ª–µ –ø–∞—Ä! {forecast_for.capitalize()} –±—É–¥–µ—Ç —Å–æ–ª–Ω–µ—á–Ω–æ –∏ —è—Å–Ω–æ.",
                f"–†–µ–¥–∫–æ–µ —è–≤–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞—à–∏—Ö —à–∏—Ä–æ—Ç! {forecast_for.capitalize()} –æ–±–µ—â–∞–µ—Ç –±—ã—Ç—å —Å–æ–ª–Ω–µ—á–Ω—ã–º, –ª–æ–≤–∏—Ç–µ –º–æ–º–µ–Ω—Ç!",
                f"–ù–µ —Å–∏–¥–∏—Ç–µ –≤ –ø–µ—Ä–µ—Ä—ã–≤–µ –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏, {forecast_for} –Ω—É–∂–Ω–æ –ª–æ–≤–∏—Ç—å –≤–∏—Ç–∞–º–∏–Ω D!",
            ]
        },
        "clouds": {
            "emoji": "‚òÅÔ∏è",
            "phrases": [
                f"–ù–∞ –Ω–µ–±–µ {forecast_for} –±—É–¥—É—Ç –æ–±–ª–∞–∫–∞, –Ω–æ —ç—Ç–æ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç –Ω–∞—à–∏–º –ø–ª–∞–Ω–∞–º.",
                f"{forecast_for.capitalize()} –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å. –í–ø–æ–ª–Ω–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –¥–ª—è —É—á–µ–±—ã!",
                f"–°–æ–ª–Ω—Ü–µ {forecast_for} –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å –≤ –ø—Ä—è—Ç–∫–∏ –∑–∞ –æ–±–ª–∞–∫–∞–º–∏.",
                f"–°–ø–æ–∫–æ–π–Ω—ã–π –∏ –æ–±–ª–∞—á–Ω—ã–π –¥–µ–Ω—å, –±–µ–∑ –ø–æ–≥–æ–¥–Ω—ã—Ö —Å—é—Ä–ø—Ä–∏–∑–æ–≤.",
            ]
        },
        "overcast": {
            "emoji": "üå•Ô∏è",
            "phrases": [
                f"–ù–µ–±–æ {forecast_for} –±—É–¥–µ—Ç –∑–∞—Ç—è–Ω—É—Ç–æ —Ç—É—á–∞–º–∏, –Ω–æ –æ—Å–∞–¥–∫–æ–≤ –Ω–µ –æ–±–µ—â–∞—é—Ç. –ü—Ä–æ—Å—Ç–æ –ø–∞—Å–º—É—Ä–Ω—ã–π –¥–µ–Ω—å.",
                f"–ù–∞—Å –∂–¥–µ—Ç –ø–∞—Å–º—É—Ä–Ω—ã–π –¥–µ–Ω—å. –•–æ—Ä–æ—à–∏–π –ø–æ–≤–æ–¥ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π —Ç–µ—Ä–º–æ—Å —Å —á–µ–º-–Ω–∏–±—É–¥—å –≥–æ—Ä—è—á–∏–º!",
                f"–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ø–∏—Ç–µ—Ä—Å–∫–∞—è —Å–µ—Ä–æ—Å—Ç—å {forecast_for}, –Ω–æ —ç—Ç–æ —Ç–æ–∂–µ –ø–æ-—Å–≤–æ–µ–º—É –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ.",
                f"–°–æ–ª–Ω—Ü–µ —Ä–µ—à–∏–ª–æ –≤–∑—è—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π. {forecast_for.capitalize()} –±—É–¥–µ—Ç –ø–∞—Å–º—É—Ä–Ω–æ.",
            ]
        },
        "fog": {
            "emoji": "üå´Ô∏è",
            "phrases": [
                f"{forecast_for.capitalize()} –Ω–∞ —É–ª–∏—Ü–∞—Ö –±—É–¥–µ—Ç –∫–∞–∫ –≤ –°–∞–π–ª–µ–Ω—Ç –•–∏–ª–ª–µ ‚Äî —Å–∏–Ω–æ–ø—Ç–∏–∫–∏ –æ–±–µ—â–∞—é—Ç –≥—É—Å—Ç–æ–π —Ç—É–º–∞–Ω.",
                f"–í–∏–¥–∏–º–æ—Å—Ç—å {forecast_for} –±—É–¥–µ—Ç —Ç–∞–∫ —Å–µ–±–µ ‚Äî —Å–∏–Ω–æ–ø—Ç–∏–∫–∏ –ø–µ—Ä–µ–¥–∞—é—Ç —Ç—É–º–∞–Ω.",
                f"–ì–æ—Ä–æ–¥ —É—Ç–æ–Ω–µ—Ç –≤ —Ç—É–º–∞–Ω–µ. –°–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–¥ –Ω–æ–≥–∏ –∏ –Ω–µ —Ç–µ—Ä—è–π—Ç–µ—Å—å –ø–æ –¥–æ—Ä–æ–≥–µ –Ω–∞ –ø–∞—Ä—ã!",
                f"In my restless dreams... –ê, –Ω–µ—Ç, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {forecast_for}: —Ç—É–º–∞–Ω –∏ –ø–ª–æ—Ö–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å.",
            ]
        },
        "default": {
            "emoji": "ü§î",
            "phrases": [
                f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {forecast_for}: {description}.",
                f"–°–∏–Ω–æ–ø—Ç–∏–∫–∏ —Å–æ–æ–±—â–∞—é—Ç, —á—Ç–æ {forecast_for} –±—É–¥–µ—Ç {description}.",
            ]
        }
    }

    chosen_pattern = WEATHER_PATTERNS['default']
    for key in ['thunderstorm', 'rain', 'snow', 'clear', 'overcast', 'fog', 'clouds']:
        if key in description or key in main_weather:
            chosen_pattern = WEATHER_PATTERNS[key]
            break

    emoji = chosen_pattern['emoji']
    base_phrase = random.choice(chosen_pattern['phrases'])

    clothing_advice = ""
    if temp <= 0:
        clothing_advice = random.choice([
            "–ù–∞ —É–ª–∏—Ü–µ –º–æ—Ä–æ–∑, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —à–∞–ø–∫—É –∏ –ø–µ—Ä—á–∞—Ç–∫–∏! üß£", 
            "–ú–æ—Ä–æ–∑–Ω–æ! –õ—É—á—à–µ –Ω–∞–¥–µ—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ–π –æ–¥–µ–∂–¥—ã. üß§",
            "–°–µ–≥–æ–¥–Ω—è —Ç–æ—á–Ω–æ –Ω–µ –æ–±–æ–π—Ç–∏—Å—å –±–µ–∑ —à–∞—Ä—Ñ–∞. –ë–µ—Ä–µ–≥–∏—Ç–µ –≥–æ—Ä–ª–æ!",
        ])
    elif 0 < temp <= 10:
        clothing_advice = random.choice([
            "–î–æ–≤–æ–ª—å–Ω–æ –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ, –∫—É—Ä—Ç–∫–∞ ‚Äî –≤–∞—à –ª—É—á—à–∏–π –¥—Ä—É–≥. üß•", 
            "–°–µ–≥–æ–¥–Ω—è —Å–≤–µ–∂–æ, —Ç–∞–∫ —á—Ç–æ –ª–µ–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞ –∏–ª–∏ —Ç–æ–ª—Å—Ç–æ–≤–∫–∞ –±—É–¥—É—Ç –≤ —Å–∞–º—ã–π —Ä–∞–∑.",
            "–°–≤–∏—Ç–µ—Ä –∏–ª–∏ —Ö—É–¥–∏ –ø–æ–¥ –∫—É—Ä—Ç–∫—É ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.",
        ])
    elif 10 < temp <= 18:
        clothing_advice = random.choice([
            "–û—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –ª–µ–≥–∫–æ–π –æ–¥–µ–∂–¥—ã.", 
            "–ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ —Ç–µ–ø–ª–æ! –ú–æ–∂–Ω–æ —Å–º–µ–ª–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç—è–∂–µ–ª—ã–µ –∫—É—Ä—Ç–∫–∏ –¥–æ–º–∞. üòé",
            "–°–æ–ª–Ω–µ—á–Ω—ã–µ –æ—á–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è!",
        ])
    elif temp > 18:
        clothing_advice = random.choice([
            "–ù–∞ —É–ª–∏—Ü–µ –∂–∞—Ä–∫–æ, –æ–¥–µ–≤–∞–π—Ç–µ—Å—å –∫–∞–∫ –º–æ–∂–Ω–æ –ª–µ–≥—á–µ –∏ –ø–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã! üíß", 
            "–ñ–∞—Ä–∞! –§—É—Ç–±–æ–ª–∫–∞ –∏ —à–æ—Ä—Ç—ã (–µ—Å–ª–∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥—Ä–µ—Å—Å-–∫–æ–¥) ‚Äî –≤–∞—à –≤—ã–±–æ—Ä. üòâ",
            "–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –¥–µ—Ä–∂–∞—Ç—å—Å—è –≤ —Ç–µ–Ω–∏ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–æ–≤.",
        ])
    
    wind_advice = ""
    if wind_speed >= 10: 
        wind_advice = random.choice([
            " –û—Å—Ç–æ—Ä–æ–∂–Ω–æ, –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä! üå¨Ô∏è",
            " –í–µ—Ç–µ—Ä —Å–µ–≥–æ–¥–Ω—è —Å–Ω–æ—Å–∏—Ç —Å –Ω–æ–≥! –ë–µ—Ä–µ–≥–∏—Ç–µ –ø—Ä–∏—á–µ—Å–∫–∏ –∏ –∫–æ–Ω—Å–ø–µ–∫—Ç—ã. üå¨Ô∏è",
        ])
    elif wind_speed >= 5: 
        wind_advice = random.choice([
            " –ë—É–¥–µ—Ç –≤–µ—Ç—Ä–µ–Ω–æ, –¥–µ—Ä–∂–∏—Ç–µ –∫–æ–Ω—Å–ø–µ–∫—Ç—ã –∫—Ä–µ–ø—á–µ! üí®",
            " –ü–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –≤–µ—Ç–µ—Ä, –Ω–µ –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –Ω–∏—á–µ–≥–æ —Ü–µ–Ω–Ω–æ–≥–æ –Ω–∞ –ø–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–µ. üí®",
        ])
    
    full_advice = f"{clothing_advice}{wind_advice}".strip()

    summary_header = "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —É—Ç—Ä–æ:" if forecast_for == "–∑–∞–≤—Ç—Ä–∞" else "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:"
    summary = (f"<b>{summary_header}</b> {emoji} {temp}¬∞C, {description}.\n" f"–í–µ—Ç–µ—Ä: {wind_speed} –º/—Å.")

    return f"{base_phrase}\n{full_advice}\n\n{summary}\n\n"


async def evening_broadcast(bot: Bot, user_data_manager: UserDataManager):
    """(–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ 20:00) –†–∞—Å—Å—ã–ª–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞."""
    logging.info("–ó–∞–ø—É—Å–∫ –≤–µ—á–µ—Ä–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏...")
    
    weather_api = WeatherAPI(OPENWEATHERMAP_API_KEY, OPENWEATHERMAP_CITY_ID, OPENWEATHERMAP_UNITS)
    tomorrow_9am = datetime.combine(datetime.now(MOSCOW_TZ).date() + timedelta(days=1), time(9, 0), tzinfo=MOSCOW_TZ)
    weather_forecast = await weather_api.get_forecast_for_time(tomorrow_9am)
    
    weather_intro_text = generate_creative_weather_intro(weather_forecast, forecast_for="–∑–∞–≤—Ç—Ä–∞")

    try:
        users_to_notify = await user_data_manager.get_users_for_evening_notify()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ –ë–î: {e}")
        return

    if not users_to_notify:
        logging.info("–í–µ—á–µ—Ä–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        return

    for user_id, group_name in users_to_notify:
        tomorrow = datetime.now(MOSCOW_TZ).date() + timedelta(days=1)
        schedule_info = global_timetable_manager_instance.get_schedule_for_day(group_name, target_date=tomorrow)
        
        if schedule_info and not schedule_info.get('error') and schedule_info.get('lessons'):
            text = f"üëã <b>–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!</b>\n\n{weather_intro_text}<b>–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:</b>\n\n{format_schedule_text(schedule_info)}"
            try:
                await bot.send_message(user_id, text, disable_web_page_preview=True)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è user_id={user_id}: {e}")
    
    logging.info(f"–í–µ—á–µ—Ä–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_to_notify)}")


async def morning_summary_broadcast(bot: Bot, user_data_manager: UserDataManager):
    """(–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ 8:00) –†–∞—Å—Å—ã–ª–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."""
    logging.info("–ó–∞–ø—É—Å–∫ —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏-—Å–≤–æ–¥–∫–∏...")
    
    weather_api = WeatherAPI(OPENWEATHERMAP_API_KEY, OPENWEATHERMAP_CITY_ID, OPENWEATHERMAP_UNITS)
    today_9am = datetime.combine(datetime.now(MOSCOW_TZ).date(), time(9, 0), tzinfo=MOSCOW_TZ)
    weather_forecast = await weather_api.get_forecast_for_time(today_9am)
    
    weather_intro_text = generate_creative_weather_intro(weather_forecast, forecast_for="—Å–µ–≥–æ–¥–Ω—è")

    try:
        users_to_notify = await user_data_manager.get_users_for_morning_summary()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤–æ–¥–∫–∏ –∏–∑ –ë–î: {e}")
        return

    if not users_to_notify:
        logging.info("–£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        return

    for user_id, group_name in users_to_notify:
        today = datetime.now(MOSCOW_TZ).date()
        schedule_info = global_timetable_manager_instance.get_schedule_for_day(group_name, target_date=today)
        
        if schedule_info and not schedule_info.get('error') and schedule_info.get('lessons'):
            text = f"‚òÄÔ∏è <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!</b>\n\n{weather_intro_text}<b>–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n{format_schedule_text(schedule_info)}"
            try:
                await bot.send_message(user_id, text, disable_web_page_preview=True)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤–æ–¥–∫–∏ –¥–ª—è user_id={user_id}: {e}")

    logging.info(f"–£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞-—Å–≤–æ–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_to_notify)}")


async def lesson_reminders_planner(
    bot: Bot, scheduler: AsyncIOScheduler, user_data_manager: UserDataManager
):
    """(–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ 6:00) –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–∞—Ä–∞—Ö."""
    logging.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–∞—Ä–∞—Ö...")
    today = datetime.now(MOSCOW_TZ).date()
    try:
        users_to_plan = await user_data_manager.get_users_for_lesson_reminders()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –ë–î: {e}")
        return

    if not users_to_plan:
        logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    for user_id, group_name in users_to_plan:
        schedule_info = global_timetable_manager_instance.get_schedule_for_day(group_name, target_date=today)
        if not schedule_info or 'error' in schedule_info or not schedule_info.get('lessons'):
            continue
        
        lessons = sorted(schedule_info['lessons'], key=lambda x: datetime.strptime(x['start_time_raw'], '%H:%M').time())
        
        for i, current_lesson in enumerate(lessons):
            try:
                reminder_time = None
                
                if i == 0:
                    start_time_str = current_lesson.get('start_time_raw')
                    if start_time_str:
                        lesson_start_datetime = datetime.combine(today, datetime.strptime(start_time_str, '%H:%M').time(), tzinfo=MOSCOW_TZ)
                        reminder_time = lesson_start_datetime - timedelta(minutes=30)
                else:
                    prev_lesson = lessons[i-1]
                    prev_end_time_str = prev_lesson.get('end_time_raw')
                    if prev_end_time_str:
                        prev_end_time_obj = datetime.strptime(prev_end_time_str, '%H:%M').time()
                        reminder_time = datetime.combine(today, prev_end_time_obj, tzinfo=MOSCOW_TZ)
                
                if reminder_time and reminder_time > datetime.now(MOSCOW_TZ):
                    job_id = f"lesson_{user_id}_{today.isoformat()}_{current_lesson['start_time_raw']}"
                    next_lesson = lessons[i + 1] if i + 1 < len(lessons) else None
                    
                    scheduler.add_job(
                        send_lesson_reminder,
                        trigger=DateTrigger(run_date=reminder_time),
                        args=(bot, user_id, current_lesson, next_lesson),
                        id=job_id,
                        replace_existing=True
                    )
            except (ValueError, IndexError, KeyError) as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è –ø–∞—Ä—ã: {current_lesson.get('time', 'N/A')}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –û—à–∏–±–∫–∞: {e}")
                continue
    
    logging.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–∞—Ä–∞—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_to_plan)}")


async def send_lesson_reminder(bot: Bot, user_id: int, lesson: dict, next_lesson: dict | None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä–µ."""
    try:
        text = f"üîî <b>–°–∫–æ—Ä–æ –ø–∞—Ä–∞: {lesson['time']}</b>\n\n"
        text += f"<b>{lesson['subject']}</b> ({lesson['type']})\n"
        
        info_parts = []
        if lesson.get('room') and lesson['room'].strip() != 'N/A':
            info_parts.append(f"üìç{lesson['room']}")
        if lesson.get('teachers'):
            info_parts.append(f"<i>{lesson['teachers']}</i>")
        
        if info_parts:
            text += " ".join(info_parts)
        
        if next_lesson:
             text += f"\n\n<i>–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞ –≤ {next_lesson['time']}.</i>"
        else:
             text += f"\n\n<i>–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–∞—Ä–∞ —Å–µ–≥–æ–¥–Ω—è!</i>"
             
        await bot.send_message(user_id, text, disable_web_page_preview=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–∞—Ä–µ –¥–ª—è user_id={user_id}: {e}")


async def monitor_schedule_changes(bot: Bot, user_data_manager: UserDataManager, redis_client: Redis):
    """
    (–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—É)
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ XML-—Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
    """
    logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏...")
    
    old_hash_bytes = await redis_client.get(REDIS_SCHEDULE_HASH_KEY)
    old_hash = old_hash_bytes.decode() if old_hash_bytes else ""
    
    new_schedule_data = await fetch_and_parse_all_schedules()

    if not new_schedule_data:
        logging.error("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –≤—É–∑–∞. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        return
        
    new_hash = new_schedule_data.get('__current_xml_hash__')

    if new_hash and old_hash != new_hash:
        logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏! –°—Ç–∞—Ä—ã–π —Ö–µ—à: {old_hash}, –ù–æ–≤—ã–π —Ö–µ—à: {new_hash}")
        
        await redis_client.set(REDIS_SCHEDULE_HASH_KEY, new_hash)
        logging.info(f"–ù–æ–≤—ã–π —Ö–µ—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Redis –ø–æ –∫–ª—é—á—É {REDIS_SCHEDULE_HASH_KEY}.")
        
        new_manager_instance = TimetableManager(new_schedule_data, redis_client)
        await new_manager_instance.save_to_cache()
        
        global global_timetable_manager_instance
        global_timetable_manager_instance = new_manager_instance
        logging.info("–ì–ª–æ–±–∞–ª—å–Ω—ã–π TimetableManager —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.")
        
        all_users = await user_data_manager.get_all_user_ids()
        
        message_text = (
            "‚ùóÔ∏è <b>–í–ù–ò–ú–ê–ù–ò–ï! –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!</b>\n\n"
            "–ù–∞ —Å–∞–π—Ç–µ –í–æ–µ–Ω–º–µ—Ö–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.\n"
            "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –±–æ—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã."
        )

        for user_id in all_users:
            try:
                await bot.send_message(user_id, message_text, disable_web_page_preview=True)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è user_id={user_id}: {e}")
    else:
        logging.info("–ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")


def setup_scheduler(bot: Bot, manager: TimetableManager, user_data_manager: UserDataManager, redis_client: Redis) -> AsyncIOScheduler:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –∑–∞–¥–∞—á–∞–º–∏."""
    scheduler = AsyncIOScheduler(timezone=str(MOSCOW_TZ))
    
    global global_timetable_manager_instance
    global_timetable_manager_instance = manager

    scheduler.add_job(evening_broadcast, 'cron', hour=20, args=(bot, user_data_manager))
    scheduler.add_job(morning_summary_broadcast, 'cron', hour=8, args=(bot, user_data_manager))
    scheduler.add_job(lesson_reminders_planner, 'cron', hour=6, args=(bot, scheduler, user_data_manager))
    
    scheduler.add_job(
        monitor_schedule_changes,
        trigger='interval',
        minutes=CHECK_INTERVAL_MINUTES,
        args=(bot, user_data_manager, redis_client)
    )
    
    return scheduler