import logging
import os
from datetime import datetime, timedelta, time, timezone 

from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger

from core.manager import TimetableManager
from core.user_data import UserDataManager
from core.config import MOSCOW_TZ, SCHEDULE_HASH_FILE, CHECK_INTERVAL_MINUTES, DATABASE_FILENAME, CACHE_FILENAME, OPENWEATHERMAP_API_KEY, OPENWEATHERMAP_CITY_ID, OPENWEATHERMAP_UNITS
from bot.utils import format_schedule_text
from core.parser import fetch_and_parse_all_schedules
from core.weather_api import WeatherAPI


global_timetable_manager_instance = None


async def evening_broadcast(bot: Bot, manager: TimetableManager, user_data_manager: UserDataManager):
    """
    (–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ 20:00)
    –†–∞—Å—Å—ã–ª–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —Ç–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º,
    —É –∫–æ—Ç–æ—Ä—ã—Ö –≤–∫–ª—é—á–µ–Ω–∞ –æ–ø—Ü–∏—è `evening_notify`, —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–µ —É—Ç—Ä–æ.
    """
    logging.info("–ó–∞–ø—É—Å–∫ –≤–µ—á–µ—Ä–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏...")
    
    # –ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–µ —É—Ç—Ä–æ (–∫ 9:00)
    weather_api = WeatherAPI(OPENWEATHERMAP_API_KEY, OPENWEATHERMAP_CITY_ID, OPENWEATHERMAP_UNITS)
    tomorrow_9am = datetime.combine(datetime.now(MOSCOW_TZ).date() + timedelta(days=1), time(9, 0), tzinfo=MOSCOW_TZ)
    weather_forecast = await weather_api.get_forecast_for_time(tomorrow_9am)
    
    weather_intro_text = ""
    if weather_forecast:
        weather_intro_text = (
            f"‚òÄÔ∏è –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞, –∫ {weather_forecast['forecast_time']}: "
            f"{weather_forecast['emoji']} {weather_forecast['temperature']}¬∞C, {weather_forecast['description']}.\n"
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_forecast['humidity']}%, –í–µ—Ç–µ—Ä: {weather_forecast['wind_speed']} –º/—Å.\n\n"
        )
    else:
        weather_intro_text = "ü§∑‚Äç‚ôÄÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞.\n\n"

    try:
        users_to_notify = await user_data_manager.get_users_for_evening_notify()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ –ë–î: {e}")
        return

    for user_id, group_name in users_to_notify:
        tomorrow = datetime.now(MOSCOW_TZ).date() + timedelta(days=1)
        schedule_info = global_timetable_manager_instance.get_schedule_for_day(group_name, target_date=tomorrow)
        
        if schedule_info and not schedule_info.get('error') and schedule_info.get('lessons'):
            text = f"üëã <b>–¢–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:</b>\n\n{weather_intro_text}{format_schedule_text(schedule_info)}"
            try:
                await bot.send_message(user_id, text, disable_web_page_preview=True)
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–µ—á–µ—Ä–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è user_id={user_id}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è user_id={user_id}: {e}")
    
    logging.info(f"–í–µ—á–µ—Ä–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_to_notify)}")


async def morning_summary_broadcast(bot: Bot, manager: TimetableManager, user_data_manager: UserDataManager):
    """
    (–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ 8:00)
    –†–∞—Å—Å—ã–ª–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Ç–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º,
    —É –∫–æ—Ç–æ—Ä—ã—Ö –≤–∫–ª—é—á–µ–Ω–∞ –æ–ø—Ü–∏—è `morning_summary`, —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
    """
    logging.info("–ó–∞–ø—É—Å–∫ —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏-—Å–≤–æ–¥–∫–∏...")
    
    weather_api = WeatherAPI(OPENWEATHERMAP_API_KEY, OPENWEATHERMAP_CITY_ID, OPENWEATHERMAP_UNITS)
    today_9am = datetime.combine(datetime.now(MOSCOW_TZ).date(), time(9, 0), tzinfo=MOSCOW_TZ)
    weather_forecast = await weather_api.get_forecast_for_time(today_9am)
    
    weather_intro_text = ""
    if weather_forecast:
        weather_intro_text = (
            f"‚òÄÔ∏è –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –∫ {weather_forecast['forecast_time']}: "
            f"{weather_forecast['emoji']} {weather_forecast['temperature']}¬∞C, {weather_forecast['description']}.\n"
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_forecast['humidity']}%, –í–µ—Ç–µ—Ä: {weather_forecast['wind_speed']} –º/—Å.\n\n"
        )
    else:
        weather_intro_text = "ü§∑‚Äç‚ôÄÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n\n"

    try:
        users_to_notify = await user_data_manager.get_users_for_morning_summary()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤–æ–¥–∫–∏ –∏–∑ –ë–î: {e}")
        return

    for user_id, group_name in users_to_notify:
        today = datetime.now(MOSCOW_TZ).date()
        schedule_info = global_timetable_manager_instance.get_schedule_for_day(group_name, target_date=today)
        
        if schedule_info and not schedule_info.get('error') and schedule_info.get('lessons'):
            text = f"‚òÄÔ∏è <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!</b>\n\n{weather_intro_text}–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{format_schedule_text(schedule_info)}"
            try:
                await bot.send_message(user_id, text, disable_web_page_preview=True)
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–æ–¥–∫–∞ –¥–ª—è user_id={user_id}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–≤–æ–¥–∫–∏ –¥–ª—è user_id={user_id}: {e}")

    logging.info(f"–£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞-—Å–≤–æ–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_to_notify)}")


async def lesson_reminders_planner(
    bot: Bot, scheduler: AsyncIOScheduler, manager: TimetableManager, user_data_manager: UserDataManager
):
    """
    (–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ 6:00)
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–∞—Ä–∞—Ö –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å –¥–ª—è —Ç–µ—Ö,
    —É –∫–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∞ –æ–ø—Ü–∏—è `lesson_reminders`.
    """
    logging.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–∞—Ä–∞—Ö...")
    today = datetime.now(MOSCOW_TZ).date()
    try:
        users_to_plan = await user_data_manager.get_users_for_lesson_reminders()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –ë–î: {e}")
        return

    for user_id, group_name in users_to_plan:
        schedule_info = global_timetable_manager_instance.get_schedule_for_day(group_name, target_date=today)
        if not schedule_info or 'error' in schedule_info or not schedule_info.get('lessons'):
            continue
        
        lessons = sorted(schedule_info['lessons'], key=lambda x: datetime.strptime(x['start_time_raw'], '%H:%M').time())
        
        for i, current_lesson in enumerate(lessons):
            try:
                current_start_time_str = current_lesson['start_time_raw']
                current_end_time_str = current_lesson['end_time_raw']
                
                lesson_start_datetime = datetime.combine(today, datetime.strptime(current_start_time_str, '%H:%M').time(), tzinfo=MOSCOW_TZ)
                
            except (ValueError, IndexError):
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è –ø–∞—Ä—ã: {current_lesson.get('time', 'N/A')}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")
                continue

            reminder_time = None
            if i == 0:
                # –î–ª—è –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã - –∑–∞ 20 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞
                reminder_time = lesson_start_datetime - timedelta(minutes=20)
            else:
                # –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö - –≤ –º–æ–º–µ–Ω—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π
                prev_lesson = lessons[i-1]
                prev_end_time_str = prev_lesson['end_time_raw']
                prev_end_time_obj = datetime.strptime(prev_end_time_str, '%H:%M').time()
                reminder_time = datetime.combine(today, prev_end_time_obj, tzinfo=MOSCOW_TZ)
            
            if reminder_time and reminder_time > datetime.now(MOSCOW_TZ):
                job_id = f"lesson_{user_id}_{today.isoformat()}_{current_start_time_str}"
                next_lesson = lessons[i+1] if i + 1 < len(lessons) else None
                
                scheduler.add_job(
                    send_lesson_reminder,
                    trigger=DateTrigger(run_date=reminder_time),
                    args=(bot, user_id, current_lesson, next_lesson),
                    id=job_id,
                    replace_existing=True
                )
    
    logging.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–∞—Ä–∞—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_to_plan)}")


async def send_lesson_reminder(bot: Bot, user_id: int, lesson: dict, next_lesson: dict | None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä–µ."""
    try:
        text = f"üîî <b>–°–∫–æ—Ä–æ –ø–∞—Ä–∞: {lesson['time']}</b>\n\n"
        text += f"<b>{lesson['subject']}</b> ({lesson['type']})\n"
        text += f"üìç {lesson['room']}, <i>{lesson['teachers']}</i>"
        
        if next_lesson:
             text += f"\n\n<i>–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞ –≤ {next_lesson['time']}.</i>"
        else:
             text += f"\n\n<i>–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–∞—Ä–∞ —Å–µ–≥–æ–¥–Ω—è!</i>"
             
        await bot.send_message(user_id, text, disable_web_page_preview=True)
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–∞—Ä–µ –¥–ª—è user_id={user_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–∞—Ä–µ –¥–ª—è user_id={user_id}: {e}")


async def monitor_schedule_changes(bot: Bot, user_data_manager: UserDataManager):
    """
    (–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—É)
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ XML-—Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
    –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è, —É–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π TimetableManager.
    """
    logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏...")
    
    hash_file_path = os.path.join(DATABASE_FILENAME.parent, SCHEDULE_HASH_FILE) 

    old_hash = ""
    try:
        with open(hash_file_path, 'r', encoding='utf-8') as f:
            old_hash = f.read().strip()
    except FileNotFoundError:
        logging.info(f"–§–∞–π–ª —Ö–µ—à–∞ {hash_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –≠—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∏–ª–∏ —Å–±—Ä–æ—Å –∫—ç—à–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Ö–µ—à–∞ {hash_file_path}: {e}")

    new_schedule_data_result = fetch_and_parse_all_schedules()

    if not new_schedule_data_result:
        logging.error("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –≤—É–∑–∞. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        return
        
    new_hash = new_schedule_data_result.get('__current_xml_hash__')

    if new_hash and old_hash != new_hash:
        logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏! –°—Ç–∞—Ä—ã–π —Ö–µ—à: {old_hash}, –ù–æ–≤—ã–π —Ö–µ—à: {new_hash}")
        
        try:
            with open(hash_file_path, 'w', encoding='utf-8') as f:
                f.write(new_hash)
            logging.info(f"–ù–æ–≤—ã–π —Ö–µ—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {hash_file_path}.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ö–µ—à–∞ –≤ —Ñ–∞–π–ª {hash_file_path}: {e}")
        
        new_manager_instance = TimetableManager(new_schedule_data_result)
        new_manager_instance.save_to_cache() 
        
        global global_timetable_manager_instance
        global_timetable_manager_instance = new_manager_instance
        logging.info("–ì–ª–æ–±–∞–ª—å–Ω—ã–π TimetableManager —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.")
        
        user_data_manager_for_broadcast = UserDataManager(db_path=DATABASE_FILENAME)
        all_users = await user_data_manager_for_broadcast.get_all_user_ids()
        
        message_text = (
            "‚ùóÔ∏è <b>–í–ù–ò–ú–ê–ù–ò–ï! –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!</b>\n\n"
            "–ù–∞ —Å–∞–π—Ç–µ –í–æ–µ–Ω–º–µ—Ö–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.\n"
            "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –±–æ—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã."
        )

        for user_id in all_users:
            try:
                await bot.send_message(user_id, message_text, disable_web_page_preview=True)
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è user_id={user_id}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è user_id={user_id}: {e}")
    else:
        logging.info("–ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")


def setup_scheduler(bot: Bot, manager: TimetableManager, user_data_manager: UserDataManager) -> AsyncIOScheduler:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å —Ç—Ä–µ–º—è –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏."""
    scheduler = AsyncIOScheduler(timezone=str(MOSCOW_TZ))
    
    global global_timetable_manager_instance
    global_timetable_manager_instance = manager

    scheduler.add_job(evening_broadcast, 'cron', hour=20, args=(bot, manager, user_data_manager))
    scheduler.add_job(morning_summary_broadcast, 'cron', hour=8, args=(bot, manager, user_data_manager))
    scheduler.add_job(lesson_reminders_planner, 'cron', hour=6, args=(bot, scheduler, manager, user_data_manager))
    
    scheduler.add_job(
        monitor_schedule_changes,
        trigger='interval',
        minutes=CHECK_INTERVAL_MINUTES,
        args=(bot, user_data_manager)
    )
    
    return scheduler