from datetime import date, timedelta, datetime
import os
from aiogram.types import CallbackQuery, ContentType, FSInputFile, InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Bot
from aiogram_dialog import Dialog, Window, DialogManager, StartMode
from aiogram_dialog.widgets.text import Format, Const
from aiogram_dialog.widgets.kbd import Button, Row, SwitchTo
from aiogram_dialog.widgets.media import StaticMedia
from bot.utils.image_compression import get_telegram_safe_image_path

from .states import Schedule, MainMenu, SettingsMenu, FindMenu
from .constants import DialogDataKeys, WidgetIds
from core.manager import TimetableManager
from core.image_generator import generate_schedule_image
from bot.text_formatters import (
    format_schedule_text, generate_dynamic_header
)
from core.config import MOSCOW_TZ, NO_LESSONS_IMAGE_PATH, MEDIA_PATH, SUBSCRIPTION_CHANNEL
from core.metrics import SCHEDULE_GENERATION_TIME, IMAGE_CACHE_HITS, IMAGE_CACHE_MISSES, GROUP_POPULARITY, USER_ACTIVITY_DAILY
from core.image_cache_manager import ImageCacheManager
from bot.tasks import generate_week_image_task
import logging
import asyncio

async def cleanup_old_cache():
    """–û—á–∏—â–∞–µ—Ç –í–°–ï –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ –∫—ç—à–∞."""
    try:
        output_dir = MEDIA_PATH / "generated"
        if not output_dir.exists():
            return
            
        deleted_files = 0
        deleted_size = 0
        
        for file_path in output_dir.glob("*.png"):
            try:
                file_size = file_path.stat().st_size
                file_path.unlink()
                deleted_files += 1
                deleted_size += file_size
                logging.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –∫—ç—à–∞: {file_path}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        
        logging.info(f"–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {deleted_files} —Ñ–∞–π–ª–æ–≤, {deleted_size / (1024*1024):.2f} MB")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")

async def get_cache_info():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ –∫—ç—à–∞."""
    try:
        output_dir = MEDIA_PATH / "generated"
        if not output_dir.exists():
            return {"total_files": 0, "total_size_mb": 0, "cache_dir": str(output_dir)}
            
        total_files = 0
        total_size_bytes = 0
        file_list = []
        
        for file_path in output_dir.glob("*.png"):
            try:
                file_size = file_path.stat().st_size
                total_files += 1
                total_size_bytes += file_size
                file_list.append(f"{file_path.name} ({file_size / (1024*1024):.2f} MB)")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ {file_path}: {e}")
            
        total_size_mb = round(total_size_bytes / (1024 * 1024), 2)
        
        logging.info(f"–ö—ç—à —Å–æ–¥–µ—Ä–∂–∏—Ç {total_files} —Ñ–∞–π–ª–æ–≤: {', '.join(file_list)}")
        
        return {
            "total_files": total_files,
            "total_size_mb": total_size_mb,
            "cache_dir": str(output_dir),
            "files": file_list
        }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—ç—à–µ: {e}")
        return {"error": str(e)}

async def get_schedule_data(dialog_manager: DialogManager, **kwargs):
    manager: TimetableManager = dialog_manager.middleware_data.get("manager")
    ctx = dialog_manager.current_context()

    if DialogDataKeys.GROUP not in ctx.dialog_data:
        ctx.dialog_data[DialogDataKeys.GROUP] = dialog_manager.start_data.get(DialogDataKeys.GROUP)
        
    if not ctx.dialog_data.get(DialogDataKeys.CURRENT_DATE_ISO):
        ctx.dialog_data[DialogDataKeys.CURRENT_DATE_ISO] = datetime.now(MOSCOW_TZ).date().isoformat()

    current_date = date.fromisoformat(ctx.dialog_data[DialogDataKeys.CURRENT_DATE_ISO])
    group = ctx.dialog_data.get(DialogDataKeys.GROUP, "N/A")
    
    day_info = await manager.get_schedule_for_day(group, target_date=current_date)
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    try:
        GROUP_POPULARITY.labels(group_name=group.upper()).inc()
        USER_ACTIVITY_DAILY.labels(action_type="view_day", user_group=group.upper()).inc()
    except Exception:
        pass
    
    dynamic_header, progress_bar = generate_dynamic_header(day_info.get("lessons", []), current_date)

    return {
        "dynamic_header": dynamic_header,
        "progress_bar": progress_bar,
        "schedule_text": format_schedule_text(day_info),
        "has_lessons": bool(day_info.get("lessons"))
    }

async def on_full_week_image_click(callback: CallbackQuery, button: Button, manager: DialogManager):
    # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∏–º–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É –Ω–µ–¥–∞–≤–Ω–æ
    ctx = manager.current_context()
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    last_click_key = f"last_week_click:{user_id}"
    try:
        manager_obj = manager.middleware_data.get("manager")
        last_click_time = await manager_obj.redis.get(last_click_key)
        if last_click_time:
            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 3 —Å–µ–∫—É–Ω–¥, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ
            await callback.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...", show_alert=True)
            return
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã
        await manager_obj.redis.set(last_click_key, "1", ex=3)
    except Exception:
        pass
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id, –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ Schedule.view
    ctx.dialog_data["user_id"] = user_id
    await get_week_image_data(manager)
    try:
        await manager.switch_to(Schedule.view)
    except Exception:
        pass
    try:
        await callback.answer()
    except Exception:
        pass

async def get_week_image_data(dialog_manager: DialogManager, **kwargs):
    manager: TimetableManager = dialog_manager.middleware_data.get("manager")
    bot = dialog_manager.middleware_data.get("bot")
    ctx = dialog_manager.current_context()
    
    if DialogDataKeys.GROUP not in ctx.dialog_data:
        ctx.dialog_data[DialogDataKeys.GROUP] = dialog_manager.start_data.get(DialogDataKeys.GROUP)
        
    if not ctx.dialog_data.get(DialogDataKeys.CURRENT_DATE_ISO):
        ctx.dialog_data[DialogDataKeys.CURRENT_DATE_ISO] = datetime.now(MOSCOW_TZ).date().isoformat()

    current_date = date.fromisoformat(ctx.dialog_data[DialogDataKeys.CURRENT_DATE_ISO])
    group = ctx.dialog_data.get(DialogDataKeys.GROUP, "N/A")

    # –ú–µ—Ç—Ä–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    try:
        GROUP_POPULARITY.labels(group_name=group.upper()).inc()
        USER_ACTIVITY_DAILY.labels(action_type="view_week", user_group=group.upper()).inc()
    except Exception:
        pass
    
    week_info = manager.get_week_type(current_date)
    if not week_info:
        return {
            "week_name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            "group": group,
            "start_date": "??.??",
            "end_date": "??.??"
        }
    
    week_key, week_name_full = week_info
    week_name = week_name_full.split(" ")[0]
    
    # –î–∞—Ç—ã –Ω–µ–¥–µ–ª–∏
    days_since_monday = current_date.weekday()
    monday_date = current_date - timedelta(days=days_since_monday)
    sunday_date = monday_date + timedelta(days=6)
    start_date_str = monday_date.strftime("%d.%m")
    end_date_str = sunday_date.strftime("%d.%m")

    # –ö–ª—é—á –∏ –ø—É—Ç–∏
    cache_key = f"{group}_{week_key}"
    output_dir = MEDIA_PATH / "generated"
    output_dir.mkdir(parents=True, exist_ok=True)
    output_path = output_dir / f"{cache_key}.png"

    cache_manager = ImageCacheManager(manager.redis, cache_ttl_hours=24)

    # 1) –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–¥–∞—Ç—å –∏–∑ –∫—ç—à–∞ (TTL —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ Redis)
    if await cache_manager.is_cached(cache_key):
        IMAGE_CACHE_HITS.labels(cache_type="week_schedule").inc()
        photo = FSInputFile(output_path)
        user_id = ctx.dialog_data.get("user_id")
        if user_id:
            back_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_day_img")]
            ])
            final_caption = (
                "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –≥–æ—Ç–æ–≤–æ!\n\n"
                f"üóì <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}</b>\n"
                f"–ù–µ–¥–µ–ª—è: <b>{week_name}</b>\n"
                f"–ü–µ—Ä–∏–æ–¥: <b>—Å {start_date_str} –ø–æ {end_date_str}</b>"
            )
            await bot.send_photo(chat_id=user_id, photo=photo, caption=final_caption, reply_markup=back_kb)
        return {
            "week_name": week_name,
            "group": group,
            "start_date": start_date_str,
            "end_date": end_date_str
        }

    # 2) –ü–æ–ø—ã—Ç–∫–∞ –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –ª–æ–∫ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    lock_key = f"image_gen_lock:{cache_key}"
    lock_acquired = False
    try:
        # ex=120: –¥–≤—É—Ö–º–∏–Ω—É—Ç–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
        lock_acquired = await manager.redis.set(lock_key, "1", nx=True, ex=120)
    except Exception:
        pass

    # 3) –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –∫–ª—é—á
    placeholder_flag_key = f"placeholder_sent:{cache_key}"
    placeholder_sent = ctx.dialog_data.get(placeholder_flag_key)

    IMAGE_CACHE_MISSES.labels(cache_type="week_schedule").inc()

    if not placeholder_sent:
        placeholder_path = MEDIA_PATH / "logo.png"
        if os.path.exists(placeholder_path):
            placeholder_photo = FSInputFile(placeholder_path)
            user_id = ctx.dialog_data.get("user_id")
            if user_id:
                back_kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_day_img")]
                ])
                caption_text = (
                    "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.\n\n"
                    f"üóì <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}</b>\n"
                    f"–ù–µ–¥–µ–ª—è: <b>{week_name}</b>\n"
                    f"–ü–µ—Ä–∏–æ–¥: <b>—Å {start_date_str} –ø–æ {end_date_str}</b>"
                )
                try:
                    sent_msg = await bot.send_photo(
                        chat_id=user_id,
                        photo=placeholder_photo,
                        caption=caption_text,
                        reply_markup=back_kb,
                        request_timeout=30  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 30 —Å–µ–∫—É–Ω–¥
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    ERRORS_TOTAL.labels(source='schedule_view').inc()
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ
                    try:
                        sent_msg = await bot.send_message(
                            chat_id=user_id,
                            text=caption_text + "\n\n‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...",
                            reply_markup=back_kb
                        )
                    except Exception as e2:
                        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e2}")
                        return
                ctx.dialog_data[placeholder_flag_key] = True
                ctx.dialog_data[f"placeholder_msg_id:{cache_key}"] = sent_msg.message_id

    # 4) –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏ Dramatiq —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ª–æ–∫ –ø–æ–ª—É—á–µ–Ω
    if lock_acquired:
        full_schedule = manager._schedules.get(group.upper(), {})
        week_schedule = full_schedule.get(week_key, {})
        user_id = ctx.dialog_data.get("user_id")
        placeholder_msg_id = ctx.dialog_data.get(f"placeholder_msg_id:{cache_key}")
        final_caption = (
            "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –≥–æ—Ç–æ–≤–æ!\n\n"
            f"üóì <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}</b>\n"
            f"–ù–µ–¥–µ–ª—è: <b>{week_name}</b>\n"
            f"–ü–µ—Ä–∏–æ–¥: <b>—Å {start_date_str} –ø–æ {end_date_str}</b>"
        )
        try:
            generate_week_image_task.send(cache_key, week_schedule, week_name, group, user_id, placeholder_msg_id, final_caption)
        except Exception:
            asyncio.create_task(
                generate_week_schedule_background(
                    manager=manager,
                    group=group,
                    week_key=week_key,
                    week_name=week_name,
                    output_path=str(output_path),
                    cache_key=cache_key,
                    bot=bot,
                    ctx=ctx,
                    dialog_manager=dialog_manager,
                    lock_key=lock_key,
                )
            )
    else:
        # –ï—Å–ª–∏ –ª–æ–∫ –Ω–µ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
        user_id = ctx.dialog_data.get("user_id")
        if user_id and not placeholder_sent:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
            placeholder_path = MEDIA_PATH / "logo.png"
            if os.path.exists(placeholder_path):
                placeholder_photo = FSInputFile(placeholder_path)
                back_kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_day_img")]
                ])
                caption_text = (
                    "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.\n\n"
                    f"üóì <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}</b>\n"
                    f"–ù–µ–¥–µ–ª—è: <b>{week_name}</b>\n"
                    f"–ü–µ—Ä–∏–æ–¥: <b>—Å {start_date_str} –ø–æ {end_date_str}</b>"
                )
                try:
                    sent_msg = await bot.send_photo(
                        chat_id=user_id,
                        photo=placeholder_photo,
                        caption=caption_text,
                        reply_markup=back_kb,
                        request_timeout=30
                    )
                    ctx.dialog_data[placeholder_flag_key] = True
                    ctx.dialog_data[f"placeholder_msg_id:{cache_key}"] = sent_msg.message_id
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ –±–µ–∑ Dramatiq
                    asyncio.create_task(
                        generate_week_schedule_background(
                            manager=manager,
                            group=group,
                            week_key=week_key,
                            week_name=week_name,
                            output_path=str(output_path),
                            cache_key=cache_key,
                            bot=bot,
                            ctx=ctx,
                            dialog_manager=dialog_manager,
                            lock_key=lock_key,
                        )
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    ERRORS_TOTAL.labels(source='schedule_view').inc()
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ
                    try:
                        sent_msg = await bot.send_message(
                            chat_id=user_id,
                            text=caption_text + "\n\n‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...",
                            reply_markup=back_kb
                        )
                        ctx.dialog_data[placeholder_flag_key] = True
                        ctx.dialog_data[f"placeholder_msg_id:{cache_key}"] = sent_msg.message_id
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
                        asyncio.create_task(
                            generate_week_schedule_background(
                                manager=manager,
                                group=group,
                                week_key=week_key,
                                week_name=week_name,
                                output_path=str(output_path),
                                cache_key=cache_key,
                                bot=bot,
                                ctx=ctx,
                                dialog_manager=dialog_manager,
                                lock_key=lock_key,
                            )
                        )
                    except Exception as e2:
                        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e2}")
                        return

    return {
        "week_name": week_name,
        "group": group,
        "start_date": start_date_str,
        "end_date": end_date_str
    }

async def generate_week_schedule_background(
    manager: TimetableManager,
    group: str,
    week_key: str,
    week_name: str,
    output_path: str,
    cache_key: str,
    bot,
    ctx,
    dialog_manager: DialogManager,
    lock_key: str,
):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ–Ω–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∫—ç—à –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        start_time = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
        if os.path.exists(output_path):
            logging.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {cache_key} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
            # –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await send_generated_image_to_user(
                output_path=output_path,
                cache_key=cache_key,
                group=group,
                week_name=week_name,
                bot=bot,
                ctx=ctx
            )
            return
        
        full_schedule = manager._schedules.get(group.upper(), {})
        week_schedule = full_schedule.get(week_key, {})

        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä –¥–ª—è Telegram
        highres_vp = {"width": 2048, "height": 1400}
        success = await generate_schedule_image(
            schedule_data=week_schedule,
            week_type=week_name,
            group=group,
            output_path=str(output_path),
            viewport_size=highres_vp,
        )

        if success and os.path.exists(output_path):
            cache_manager = ImageCacheManager(manager.redis, cache_ttl_hours=24)
            try:
                with open(output_path, 'rb') as f:
                    image_bytes = f.read()
                await cache_manager.cache_image(cache_key, image_bytes, metadata={
                    "group": group,
                    "week_key": week_key,
                    "week_name": week_name,
                })
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫—ç—à: {e}")

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await send_generated_image_to_user(
                output_path=output_path,
                cache_key=cache_key,
                group=group,
                week_name=week_name,
                bot=bot,
                ctx=ctx
            )
        else:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {cache_key}")
    except Exception as e:
        logging.error(f"generate_week_schedule_background failed: {e}")
    finally:
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ª–æ–∫
        try:
            await manager.redis.delete(lock_key)
        except Exception:
            pass

async def send_generated_image_to_user(
    output_path: str,
    cache_key: str,
    group: str,
    week_name: str,
    bot,
    ctx
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è Telegram –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        safe_image_path = get_telegram_safe_image_path(output_path)
        photo = FSInputFile(safe_image_path)
        user_id = ctx.dialog_data.get("user_id")
        
        if not user_id:
            return
            
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
        placeholder_msg_id = ctx.dialog_data.get(f"placeholder_msg_id:{cache_key}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
        current_date = date.fromisoformat(ctx.dialog_data[DialogDataKeys.CURRENT_DATE_ISO])
        days_since_monday = current_date.weekday()
        monday_date = current_date - timedelta(days=days_since_monday)
        sunday_date = monday_date + timedelta(days=6)
        start_date_str = monday_date.strftime("%d.%m")
        end_date_str = sunday_date.strftime("%d.%m")
        
        final_caption = (
            "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –≥–æ—Ç–æ–≤–æ!\n\n"
            f"üóì <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}</b>\n"
            f"–ù–µ–¥–µ–ª—è: <b>{week_name}</b>\n"
            f"–ü–µ—Ä–∏–æ–¥: <b>—Å {start_date_str} –ø–æ {end_date_str}</b>"
        )
        
        back_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_day_img")]
        ])
        
        if placeholder_msg_id:
            try:
                media = InputMediaPhoto(media=photo, caption=final_caption)
                await bot.edit_message_media(
                    chat_id=user_id, 
                    message_id=placeholder_msg_id, 
                    media=media, 
                    reply_markup=back_kb
                )
            except Exception as edit_error:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
                # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await bot.send_photo(
                        chat_id=user_id,
                        photo=photo,
                        caption=final_caption,
                        reply_markup=back_kb,
                    )
                except Exception as send_error:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {send_error}")
                    ERRORS_TOTAL.labels(source='schedule_view').inc()
                    await bot.send_message(
                        chat_id=user_id,
                        text=f"{final_caption}\n\n‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏."
                    )
        else:
            try:
                await bot.send_photo(
                    chat_id=user_id,
                    photo=photo,
                    caption=final_caption,
                    reply_markup=back_kb,
                )
            except Exception as send_error:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {send_error}")
                ERRORS_TOTAL.labels(source='schedule_view').inc()
                await bot.send_message(
                    chat_id=user_id,
                    text=f"{final_caption}\n\n‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏."
                )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ send_generated_image_to_user: {e}")

async def on_send_original_file_callback(callback: CallbackQuery, dialog_manager: DialogManager):
    """Callback handler –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–û—Ä–∏–≥–∏–Ω–∞–ª' –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ button"""
    await on_send_original_file(callback, None, dialog_manager)

async def on_send_original_file(callback: CallbackQuery, button: Button, manager: DialogManager):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–¥–µ–ª–∏ –∫–∞–∫ —Ñ–∞–π–ª (Document), –±–µ–∑ —Å–∂–∞—Ç–∏—è Telegram."""
    ctx = manager.current_context()
    manager_obj: TimetableManager = manager.middleware_data.get("manager")
    # –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º user_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫/–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
    try:
        if callback.from_user:
            ctx.dialog_data["user_id"] = callback.from_user.id
    except Exception:
        pass
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –¥–∏–∞–ª–æ–≥–∞: –¥–æ—Å—Ç–∞—ë–º –≥—Ä—É–ø–ø—É –∏–∑ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if not ctx.dialog_data.get(DialogDataKeys.GROUP):
        try:
            user_data_manager = manager.middleware_data.get("user_data_manager")
            if user_data_manager and callback.from_user:
                saved_group = await user_data_manager.get_user_group(callback.from_user.id)
                if saved_group:
                    ctx.dialog_data[DialogDataKeys.GROUP] = saved_group
        except Exception:
            pass
    if not ctx.dialog_data.get(DialogDataKeys.CURRENT_DATE_ISO):
        ctx.dialog_data[DialogDataKeys.CURRENT_DATE_ISO] = datetime.now(MOSCOW_TZ).date().isoformat()
    group = ctx.dialog_data.get(DialogDataKeys.GROUP, "N/A")
    try:
        current_date = date.fromisoformat(ctx.dialog_data.get(DialogDataKeys.CURRENT_DATE_ISO))
    except Exception:
        current_date = datetime.now(MOSCOW_TZ).date()
    week_info = manager_obj.get_week_type(current_date)
    if not week_info:
        try:
            await callback.answer("–ù–µ–¥–µ–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞", show_alert=True)
        except Exception:
            pass
        return
    week_key, week_name_full = week_info
    cache_key = f"{group}_{week_key}"
    output_dir = MEDIA_PATH / "generated"
    output_path = output_dir / f"{cache_key}.png"
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
    try:
        if SUBSCRIPTION_CHANNEL:
            bot: Bot = manager.middleware_data.get("bot")
            member = await bot.get_chat_member(SUBSCRIPTION_CHANNEL, callback.from_user.id)
            status = getattr(member, "status", None)
            if status not in ("member", "administrator", "creator"):
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–∫–Ω–æ-–≥–µ–π—Ç
                try:
                    await manager.switch_to(Schedule.full_quality_gate)
                except Exception:
                    pass
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{str(SUBSCRIPTION_CHANNEL).lstrip('@')}")],
                    [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")]
                ])
                await callback.message.answer("–î–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–º—É –∫–∞—á–µ—Å—Ç–≤—É –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª.", reply_markup=kb)
                try:
                    await callback.answer()
                except Exception:
                    pass
                return
    except Exception:
        pass
    # –ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Ñ–æ–Ω–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    if not output_path.exists():
        await get_week_image_data(manager)
        try:
            await callback.answer("–ì–æ—Ç–æ–≤–ª—é –æ—Ä–∏–≥–∏–Ω–∞–ª, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥‚Ä¶")
        except Exception:
            pass
        return
    try:
        await callback.message.answer("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–æ–ª–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ‚Ä¶")
        await callback.message.answer_document(FSInputFile(output_path))
    except Exception:
        pass
    try:
        await callback.answer()
    except Exception:
        pass

async def on_date_shift(callback: CallbackQuery, button: Button, manager: DialogManager, days: int):
    ctx = manager.current_context()
    current_date = date.fromisoformat(ctx.dialog_data.get(DialogDataKeys.CURRENT_DATE_ISO))
    new_date = current_date + timedelta(days=days)
    ctx.dialog_data[DialogDataKeys.CURRENT_DATE_ISO] = new_date.isoformat()

async def on_today_click(callback: CallbackQuery, button: Button, manager: DialogManager):
    manager.current_context().dialog_data[DialogDataKeys.CURRENT_DATE_ISO] = datetime.now(MOSCOW_TZ).date().isoformat()
    
async def on_change_group_click(callback: CallbackQuery, button: Button, manager: DialogManager):
    await manager.start(MainMenu.enter_group, mode=StartMode.RESET_STACK)
    
async def on_settings_click(callback: CallbackQuery, button: Button, manager: DialogManager):
    await manager.start(SettingsMenu.main)

async def on_find_click(callback: CallbackQuery, button: Button, manager: DialogManager):
    await manager.start(FindMenu.choice)

async def on_news_clicked(callback: CallbackQuery, button: Button, manager: DialogManager):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    await callback.answer("üì¢ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–æ–≤–æ—Å—Ç—è–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!")
    await callback.message.answer(
        "üöÄ <b>–ù–æ–≤–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–∞</b>\n\n"
        "–í—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø–ª–∞–Ω—ã –∏ –Ω–æ–≤–æ—Å—Ç–∏ –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –±–æ—Ç–∞ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ:\n\n"
        "üì¢ <a href='https://t.me/voenmeh404'>–ê—É–¥–∏—Ç–æ—Ä–∏—è 404 | –í–æ–µ–Ω–º–µ—Ö</a>\n\n"
        "–¢–∞–º –≤—ã —É–∑–Ω–∞–µ—Ç–µ:\n"
        "‚Ä¢ –û –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –ø–µ—Ä–≤—ã–º–∏\n"
        "‚Ä¢ –û –ø–ª–∞–Ω–∞—Ö —Ä–∞–∑–≤–∏—Ç–∏—è\n"
        "‚Ä¢ –°–º–æ–∂–µ—Ç–µ –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É\n"
        "‚Ä¢ –£–≤–∏–¥–∏—Ç–µ –∑–∞–∫—É–ª–∏—Å—å–µ –ø—Ä–æ–µ–∫—Ç–∞\n\n"
        "<i>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ! üëÜ</i>",
        parse_mode="HTML",
        disable_web_page_preview=True
    )

async def on_inline_back(callback: CallbackQuery, dialog_manager: DialogManager):
    # –£–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ –¥–∏–∞–ª–æ–≥–∞
    try:
        await callback.message.delete()
    except Exception:
        pass
    try:
        await callback.answer()
    except Exception:
        pass

schedul_dialog_windows = [
    Window(
        StaticMedia(
            path=NO_LESSONS_IMAGE_PATH,
            type=ContentType.PHOTO,
            when=lambda data, widget, manager: not data.get("has_lessons")
        ),
        Format("{dynamic_header}"),
        Format("{progress_bar}"),
        Format("{schedule_text}"),
        Row(
            Button(Const("‚è™"), id=WidgetIds.PREV_WEEK, on_click=lambda c, b, m: on_date_shift(c, b, m, -7)),
            Button(Const("‚óÄÔ∏è"), id=WidgetIds.PREV_DAY, on_click=lambda c, b, m: on_date_shift(c, b, m, -1)),
            Button(Const("üìÖ"), id=WidgetIds.TODAY, on_click=on_today_click),
            Button(Const("‚ñ∂Ô∏è"), id=WidgetIds.NEXT_DAY, on_click=lambda c, b, m: on_date_shift(c, b, m, 1)),
            Button(Const("‚è©"), id=WidgetIds.NEXT_WEEK, on_click=lambda c, b, m: on_date_shift(c, b, m, 7)),
        ),
        Row(
            Button(Const("üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"), id="week_as_image", on_click=on_full_week_image_click),
            Button(Const("üîÑ –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É"), id=WidgetIds.CHANGE_GROUP, on_click=on_change_group_click),
            Button(Const("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), id=WidgetIds.SETTINGS, on_click=on_settings_click),
        ),
        Row(
            Button(Const("üîç –ü–æ–∏—Å–∫"), id=WidgetIds.FIND_BTN, on_click=on_find_click),
            Button(Const("üì¢ –ù–æ–≤–æ—Å—Ç–∏"), id="news_btn", on_click=on_news_clicked),
        ),
        state=Schedule.view, getter=get_schedule_data,
        parse_mode="HTML", disable_web_page_preview=True
    ),
    Window(
        Const("üñº –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–ª–∏ –ø–æ–∫–∞–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ–¥–µ–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ù–∞–∂–º–∏—Ç–µ ‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤–Ω–∏–∑—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."),
        Button(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="noop_back_to_day", on_click=lambda c, b, m: m.switch_to(Schedule.view)),
        state=Schedule.week_image_view
    ),
    # –û–∫–Ω–æ –≥–µ–π—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
]

schedule_dialog = Dialog(*schedul_dialog_windows)