from datetime import date, timedelta, datetime
import os
from aiogram.types import CallbackQuery, ContentType, FSInputFile, InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Bot
from aiogram_dialog import Dialog, Window, DialogManager, StartMode
from aiogram_dialog.widgets.text import Format, Const
from aiogram_dialog.widgets.kbd import Button, Row, SwitchTo
from aiogram_dialog.widgets.media import StaticMedia
from bot.utils.image_compression import get_telegram_safe_image_path

from .states import Schedule, MainMenu, SettingsMenu, FindMenu
from .constants import DialogDataKeys, WidgetIds
from core.manager import TimetableManager
from core.image_generator import generate_schedule_image
from bot.text_formatters import (
    format_schedule_text, format_teacher_schedule_text,
    generate_dynamic_header, calculate_semester_week_number
)
from core.config import MOSCOW_TZ, NO_LESSONS_IMAGE_PATH, MEDIA_PATH, SUBSCRIPTION_CHANNEL
from core.metrics import SCHEDULE_GENERATION_TIME, IMAGE_CACHE_HITS, IMAGE_CACHE_MISSES, GROUP_POPULARITY, USER_ACTIVITY_DAILY
from core.image_cache_manager import ImageCacheManager
from bot.tasks import generate_week_image_task, send_week_original_if_subscribed_task
import logging
import asyncio

async def cleanup_old_cache():
    """–û—á–∏—â–∞–µ—Ç –í–°–ï –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ –∫—ç—à–∞ (—Ñ–∞–π–ª—ã + Redis)."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º Redis –∫–ª–∏–µ–Ω—Ç –∏–∑ middleware
        from core.config import get_redis_client
        redis_client = get_redis_client()
        
        # –°–æ–∑–¥–∞–µ–º cache manager –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
        from core.image_cache_manager import ImageCacheManager
        cache_manager = ImageCacheManager(redis_client, cache_ttl_hours=24)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –æ—á–∏—Å—Ç–∫–∏
        stats_before = await cache_manager.get_cache_stats()
        
        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã
        output_dir = MEDIA_PATH / "generated"
        deleted_files = 0
        deleted_size = 0
        
        if output_dir.exists():
            for file_path in output_dir.glob("*.png"):
                try:
                    file_size = file_path.stat().st_size
                    file_path.unlink()
                    deleted_files += 1
                    deleted_size += file_size
                    logging.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –∫—ç—à–∞: {file_path}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        
        # –û—á–∏—â–∞–µ–º Redis –∫—ç—à
        try:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª—é—á–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ –∫—ç—à–∞
            cache_data_pattern = f"{cache_manager.cache_data_prefix}*"
            cache_meta_pattern = f"{cache_manager.cache_metadata_prefix}*"
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–ª—é—á–∏
            data_keys = await redis_client.keys(cache_data_pattern)
            meta_keys = await redis_client.keys(cache_meta_pattern)
            
            # –£–¥–∞–ª—è–µ–º –∏—Ö
            if data_keys:
                await redis_client.delete(*data_keys)
                logging.info(f"–£–¥–∞–ª–µ–Ω–æ {len(data_keys)} –∫–ª—é—á–µ–π –¥–∞–Ω–Ω—ã—Ö –∏–∑ Redis")
            if meta_keys:
                await redis_client.delete(*meta_keys)
                logging.info(f"–£–¥–∞–ª–µ–Ω–æ {len(meta_keys)} –∫–ª—é—á–µ–π –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ Redis")
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ Redis –∫—ç—à–∞: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        stats_after = await cache_manager.get_cache_stats()
        
        logging.info(f"–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {deleted_files} —Ñ–∞–π–ª–æ–≤, {deleted_size / (1024*1024):.2f} MB")
        logging.info(f"Redis —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –¥–æ - {stats_before}, –ø–æ—Å–ª–µ - {stats_after}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")

async def get_cache_info():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ –∫—ç—à–∞ (—Ñ–∞–π–ª—ã + Redis)."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º Redis –∫–ª–∏–µ–Ω—Ç
        from core.config import get_redis_client
        redis_client = get_redis_client()
        
        # –°–æ–∑–¥–∞–µ–º cache manager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        from core.image_cache_manager import ImageCacheManager
        cache_manager = ImageCacheManager(redis_client, cache_ttl_hours=24)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
        cache_stats = await cache_manager.get_cache_stats()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
        output_dir = MEDIA_PATH / "generated"
        file_list = []
        
        if output_dir.exists():
            for file_path in output_dir.glob("*.png"):
                try:
                    file_size = file_path.stat().st_size
                    file_list.append(f"{file_path.name} ({file_size / (1024*1024):.2f} MB)")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ {file_path}: {e}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "total_files": cache_stats.get("file_count", 0),
            "total_size_mb": cache_stats.get("file_size_mb", 0),
            "cache_dir": str(output_dir),
            "files": file_list,
            "redis_keys": cache_stats.get("redis_keys", 0),
            "redis_size_mb": cache_stats.get("redis_size_mb", 0)
        }
        
        logging.info(f"–ö—ç—à —Å–æ–¥–µ—Ä–∂–∏—Ç {result['total_files']} —Ñ–∞–π–ª–æ–≤, {result['redis_keys']} Redis –∫–ª—é—á–µ–π")
        
        return result
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—ç—à–µ: {e}")
        return {"error": str(e)}

async def get_schedule_data(dialog_manager: DialogManager, **kwargs):
    manager: TimetableManager = dialog_manager.middleware_data.get("manager")
    session_factory = dialog_manager.middleware_data.get("session_factory")
    user_data_manager = dialog_manager.middleware_data.get("user_data_manager")
    ctx = dialog_manager.current_context()

    if DialogDataKeys.GROUP not in ctx.dialog_data:
        ctx.dialog_data[DialogDataKeys.GROUP] = dialog_manager.start_data.get(DialogDataKeys.GROUP)

    if not ctx.dialog_data.get(DialogDataKeys.CURRENT_DATE_ISO):
        ctx.dialog_data[DialogDataKeys.CURRENT_DATE_ISO] = datetime.now(MOSCOW_TZ).date().isoformat()

    current_date = date.fromisoformat(ctx.dialog_data[DialogDataKeys.CURRENT_DATE_ISO])
    group = ctx.dialog_data.get(DialogDataKeys.GROUP, "N/A")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    user_type = "student"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    user_id = dialog_manager.event.from_user.id if dialog_manager.event and dialog_manager.event.from_user else None
    if user_id and user_data_manager:
        try:
            user_type = await user_data_manager.get_user_type(user_id) or "student"
        except Exception:
            pass
    
    ctx.dialog_data["user_type"] = user_type

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å: –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–µ–º teacher-–º–µ—Ç–æ–¥
    if user_type == "teacher":
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: –µ—Å–ª–∏ –≤ –∏–Ω–¥–µ–∫—Å–µ –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ –∫–ª—é—á–∞,
        # –ø–æ–¥–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –∏ —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –≤ –ë–î.
        if group not in manager._teachers_index:
            canonical = manager.resolve_canonical_teacher(group)
            if canonical:
                try:
                    await user_data_manager.set_user_group(user_id=user_id, group=canonical)
                    ctx.dialog_data[DialogDataKeys.GROUP] = canonical
                    group = canonical
                except Exception:
                    pass
        day_info = await manager.get_teacher_schedule(group, target_date=current_date)
    else:
        day_info = await manager.get_schedule_for_day(group, target_date=current_date)

    # –ú–µ—Ç—Ä–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    try:
        GROUP_POPULARITY.labels(group_name=group.upper()).inc()
        USER_ACTIVITY_DAILY.labels(action_type="view_day", user_group=group.upper()).inc()
    except Exception:
        pass

    dynamic_header, progress_bar = generate_dynamic_header(day_info.get("lessons", []), current_date)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ —Å –Ω–∞—á–∞–ª–∞ —Å–µ–º–µ—Å—Ç—Ä–∞
    week_number = await calculate_semester_week_number(current_date, session_factory)

    # –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä: –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—ã –≤–º–µ—Å—Ç–æ –§–ò–û
    schedule_text = (
        format_teacher_schedule_text(day_info)
        if user_type == "teacher" else format_schedule_text(day_info, week_number)
    )

    return {
        "dynamic_header": dynamic_header,
        "progress_bar": progress_bar,
        "schedule_text": schedule_text,
        "has_lessons": bool(day_info.get("lessons")),
        "user_type": user_type,
        "user_type_emoji": "" if user_type == "student" else "üßë‚Äçüè´",
        "user_type_text": "" if user_type == "student" else "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:"
    }

async def on_full_week_image_click(callback: CallbackQuery, button: Button, manager: DialogManager):
    # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∏–º–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É –Ω–µ–¥–∞–≤–Ω–æ
    ctx = manager.current_context()
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    last_click_key = f"last_week_click:{user_id}"
    try:
        manager_obj = manager.middleware_data.get("manager")
        last_click_time = await manager_obj.redis.get(last_click_key)
        if last_click_time:
            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 3 —Å–µ–∫—É–Ω–¥, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ
            await callback.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...", show_alert=True)
            return
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã
        await manager_obj.redis.set(last_click_key, "1", ex=3)
    except Exception:
        pass
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id, –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ Schedule.view
    ctx.dialog_data["user_id"] = user_id
    await get_week_image_data(manager)
    try:
        await manager.switch_to(Schedule.view)
    except Exception:
        pass
    try:
        await callback.answer()
    except Exception:
        pass

async def get_week_image_data(dialog_manager: DialogManager, **kwargs):
    manager: TimetableManager = dialog_manager.middleware_data.get("manager")
    bot = dialog_manager.middleware_data.get("bot")
    ctx = dialog_manager.current_context()
    
    if DialogDataKeys.GROUP not in ctx.dialog_data:
        ctx.dialog_data[DialogDataKeys.GROUP] = dialog_manager.start_data.get(DialogDataKeys.GROUP)
        
    if not ctx.dialog_data.get(DialogDataKeys.CURRENT_DATE_ISO):
        ctx.dialog_data[DialogDataKeys.CURRENT_DATE_ISO] = datetime.now(MOSCOW_TZ).date().isoformat()

    current_date = date.fromisoformat(ctx.dialog_data[DialogDataKeys.CURRENT_DATE_ISO])
    group = ctx.dialog_data.get(DialogDataKeys.GROUP, "N/A")

    # –ú–µ—Ç—Ä–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    try:
        GROUP_POPULARITY.labels(group_name=group.upper()).inc()
        USER_ACTIVITY_DAILY.labels(action_type="view_week", user_group=group.upper()).inc()
    except Exception:
        pass
    
    week_info = await manager.get_academic_week_type(current_date)
    if not week_info:
        return {
            "week_name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            "group": group,
            "start_date": "??.??",
            "end_date": "??.??"
        }
    
    week_key, week_name_full = week_info
    week_name = week_name_full.split(" ")[0]
    
    # –î–∞—Ç—ã –Ω–µ–¥–µ–ª–∏
    days_since_monday = current_date.weekday()
    monday_date = current_date - timedelta(days=days_since_monday)
    sunday_date = monday_date + timedelta(days=6)
    start_date_str = monday_date.strftime("%d.%m")
    end_date_str = sunday_date.strftime("%d.%m")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    from core.image_service import ImageService
    cache_manager = ImageCacheManager(manager.redis, cache_ttl_hours=24)
    image_service = ImageService(cache_manager, bot)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    if ctx.dialog_data.get("user_type") == "teacher":
        # –°–±–æ—Ä –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
        week_schedule = { 
            "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": [], "–í—Ç–æ—Ä–Ω–∏–∫": [], "–°—Ä–µ–¥–∞": [], 
            "–ß–µ—Ç–≤–µ—Ä–≥": [], "–ü—è—Ç–Ω–∏—Ü–∞": [], "–°—É–±–±–æ—Ç–∞": []
        }
        teacher_lessons = manager._teachers_index.get(group, [])
        for lesson in teacher_lessons:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –Ω–µ–¥–µ–ª–∏
            lesson_week_code = lesson.get('week_code', '0')
            is_every_week = lesson_week_code == '0'
            is_odd_match = week_key == 'odd' and lesson_week_code == '1'
            is_even_match = week_key == 'even' and lesson_week_code == '2'
            if is_every_week or is_odd_match or is_even_match:
                day = lesson.get('day')
                if day in week_schedule:
                    week_schedule[day].append(lesson)
    else:
        full_schedule = manager._schedules.get(group.upper(), {})
        week_schedule = full_schedule.get(week_key, {})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
    subject_line = (
        f"üóì <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {group}</b>" if ctx.dialog_data.get("user_type") == "teacher"
        else f"üóì <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}</b>"
    )
    final_caption = (
        "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –≥–æ—Ç–æ–≤–æ!\n\n"
        f"{subject_line}\n"
        f"–ù–µ–¥–µ–ª—è: <b>{week_name}</b>\n"
        f"–ü–µ—Ä–∏–æ–¥: <b>—Å {start_date_str} –ø–æ {end_date_str}</b>"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    user_id = ctx.dialog_data.get("user_id")
    placeholder_msg_id = ctx.dialog_data.get(f"placeholder_msg_id:{group}_{week_key}")
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    user_theme = None
    try:
        if user_id:
            udm = dialog_manager.middleware_data.get("user_data_manager")
            if udm:
                user_theme = await udm.get_user_theme(user_id)
    except Exception:
        user_theme = None

    success, file_path = await image_service.get_or_generate_week_image(
        group=group,
        week_key=week_key,
        week_name=week_name,
        week_schedule=week_schedule,
        user_id=user_id,
        user_theme=user_theme,
        placeholder_msg_id=placeholder_msg_id,
        final_caption=final_caption
    )
    
    if not success:
        logging.error(f"Failed to get/generate week image for {group}_{week_key}")
    
    return {
        "week_name": week_name,
        "group": group,
        "start_date": start_date_str,
        "end_date": end_date_str
    }

async def on_send_original_file_callback(callback: CallbackQuery, dialog_manager: DialogManager):
    """Callback handler –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–û—Ä–∏–≥–∏–Ω–∞–ª' –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ button"""
    await on_send_original_file(callback, None, dialog_manager)

async def on_check_subscription_callback(callback: CallbackQuery, dialog_manager: DialogManager):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞."""
    await on_send_original_file(callback, None, dialog_manager)

async def on_send_original_file(callback: CallbackQuery, button: Button, manager: DialogManager):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–¥–µ–ª–∏ –∫–∞–∫ —Ñ–∞–π–ª (Document), –±–µ–∑ —Å–∂–∞—Ç–∏—è Telegram."""
    ctx = manager.current_context()
    manager_obj: TimetableManager = manager.middleware_data.get("manager")
    # –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º user_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫/–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
    try:
        if callback.from_user:
            ctx.dialog_data["user_id"] = callback.from_user.id
    except Exception:
        pass
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –¥–∏–∞–ª–æ–≥–∞: –¥–æ—Å—Ç–∞—ë–º –≥—Ä—É–ø–ø—É –∏–∑ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if not ctx.dialog_data.get(DialogDataKeys.GROUP):
        try:
            user_data_manager = manager.middleware_data.get("user_data_manager")
            if user_data_manager and callback.from_user:
                saved_group = await user_data_manager.get_user_group(callback.from_user.id)
                if saved_group:
                    ctx.dialog_data[DialogDataKeys.GROUP] = saved_group
        except Exception:
            pass
    if not ctx.dialog_data.get(DialogDataKeys.CURRENT_DATE_ISO):
        ctx.dialog_data[DialogDataKeys.CURRENT_DATE_ISO] = datetime.now(MOSCOW_TZ).date().isoformat()
    group = ctx.dialog_data.get(DialogDataKeys.GROUP, "N/A")
    try:
        current_date = date.fromisoformat(ctx.dialog_data.get(DialogDataKeys.CURRENT_DATE_ISO))
    except Exception:
        current_date = datetime.now(MOSCOW_TZ).date()
    week_info = await manager_obj.get_academic_week_type(current_date)
    if not week_info:
        try:
            await callback.answer("–ù–µ–¥–µ–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞", show_alert=True)
        except Exception:
            pass
        return
    week_key, week_name_full = week_info
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
    user_theme_for_original = None
    try:
        udm = manager.middleware_data.get("user_data_manager")
        if udm and callback.from_user:
            user_theme_for_original = await udm.get_user_theme(callback.from_user.id)
    except Exception:
        user_theme_for_original = None
    if user_theme_for_original and user_theme_for_original != 'standard':
        cache_key = f"{group}_{week_key}_{user_theme_for_original}"
    else:
        cache_key = f"{group}_{week_key}"
    output_dir = MEDIA_PATH / "generated"
    output_path = output_dir / f"{cache_key}.png"
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
    try:
        if SUBSCRIPTION_CHANNEL:
            bot: Bot = manager.middleware_data.get("bot")
            member = await bot.get_chat_member(SUBSCRIPTION_CHANNEL, callback.from_user.id)
            status = getattr(member, "status", None)
            if status not in ("member", "administrator", "creator"):
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–∫–Ω–æ-–≥–µ–π—Ç
                try:
                    await manager.switch_to(Schedule.full_quality_gate)
                except Exception:
                    pass
                # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
                channel_link = SUBSCRIPTION_CHANNEL
                if channel_link.startswith('@'):
                    channel_link = f"https://t.me/{channel_link[1:]}"
                elif channel_link.startswith('-'):
                    # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ —Å —á–∏—Å–ª–æ–≤—ã–º ID –∏—Å–ø–æ–ª—å–∑—É–µ–º tg://
                    channel_link = f"tg://resolve?domain={channel_link}"
                elif not channel_link.startswith('http'):
                    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–º–µ–Ω –∫–∞–Ω–∞–ª–æ–≤
                    channel_link = f"https://t.me/{channel_link}"
                    
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=channel_link)],
                    [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")]
                ])
                await callback.message.answer("–î–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–º—É –∫–∞—á–µ—Å—Ç–≤—É –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª.", reply_markup=kb)
                try:
                    await callback.answer()
                except Exception:
                    pass
                return
    except Exception:
        pass
    # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äì –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ –ø–æ–ø—Ä–æ–±—É–µ–º –¥–æ–∂–¥–∞—Ç—å—Å—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
    if not output_path.exists():
        await get_week_image_data(manager)
        # –ü–æ–¥–æ–∂–¥—ë–º –¥–æ 5 —Å–µ–∫—É–Ω–¥ –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        for _ in range(10):
            try:
                if output_path.exists():
                    break
            except Exception:
                pass
            await asyncio.sleep(0.5)
        if not output_path.exists():
            try:
                await callback.answer("‚è≥ –ì–æ—Ç–æ–≤–ª—é –æ—Ä–∏–≥–∏–Ω–∞–ª, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥‚Ä¶")
            except Exception:
                pass
            # –ó–∞–ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å (–ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏)
            try:
                send_week_original_if_subscribed_task.send(callback.from_user.id, group, week_key)
            except Exception:
                pass
            return
    # –§–∞–π–ª –≥–æ—Ç–æ–≤ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º —Å—Ä–∞–∑—É
    try:
        bot: Bot = manager.middleware_data.get("bot")
        await bot.send_document(callback.from_user.id, FSInputFile(output_path))
        try:
            await callback.answer()
        except Exception:
            pass
        return
    except Exception:
        # –§–æ–ª–±—ç–∫: —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
        try:
            send_week_original_if_subscribed_task.send(callback.from_user.id, group, week_key)
            await callback.answer("üì§ –û—Ç–ø—Ä–∞–≤–ª—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ‚Ä¶")
        except Exception:
            pass
    try:
        await callback.answer()
    except Exception:
        pass

async def on_date_shift(callback: CallbackQuery, button: Button, manager: DialogManager, days: int):
    ctx = manager.current_context()
    current_date = date.fromisoformat(ctx.dialog_data.get(DialogDataKeys.CURRENT_DATE_ISO))
    new_date = current_date + timedelta(days=days)
    ctx.dialog_data[DialogDataKeys.CURRENT_DATE_ISO] = new_date.isoformat()

async def on_today_click(callback: CallbackQuery, button: Button, manager: DialogManager):
    manager.current_context().dialog_data[DialogDataKeys.CURRENT_DATE_ISO] = datetime.now(MOSCOW_TZ).date().isoformat()
    
async def on_change_group_click(callback: CallbackQuery, button: Button, manager: DialogManager):
    await manager.start(MainMenu.choose_user_type, mode=StartMode.RESET_STACK)
    
async def on_settings_click(callback: CallbackQuery, button: Button, manager: DialogManager):
    await manager.start(SettingsMenu.main)

async def on_find_click(callback: CallbackQuery, button: Button, manager: DialogManager):
    await manager.start(FindMenu.choice)

async def on_news_clicked(callback: CallbackQuery, button: Button, manager: DialogManager):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    await callback.answer("üì¢ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–æ–≤–æ—Å—Ç—è–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!")
    await callback.message.answer(
        "üöÄ <b>–ù–æ–≤–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–∞</b>\n\n"
        "–í—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø–ª–∞–Ω—ã –∏ –Ω–æ–≤–æ—Å—Ç–∏ –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –±–æ—Ç–∞ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ:\n\n"
        "üì¢ <a href='https://t.me/voenmeh404'>–ê—É–¥–∏—Ç–æ—Ä–∏—è 404 | –í–æ–µ–Ω–º–µ—Ö</a>\n\n"
        "–¢–∞–º –≤—ã —É–∑–Ω–∞–µ—Ç–µ:\n"
        "‚Ä¢ –û –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –ø–µ—Ä–≤—ã–º–∏\n"
        "‚Ä¢ –û –ø–ª–∞–Ω–∞—Ö —Ä–∞–∑–≤–∏—Ç–∏—è\n"
        "‚Ä¢ –°–º–æ–∂–µ—Ç–µ –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É\n"
        "‚Ä¢ –£–≤–∏–¥–∏—Ç–µ –∑–∞–∫—É–ª–∏—Å—å–µ –ø—Ä–æ–µ–∫—Ç–∞\n\n"
        "<i>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ! üëÜ</i>",
        parse_mode="HTML",
        disable_web_page_preview=True
    )

async def on_inline_back(callback: CallbackQuery, dialog_manager: DialogManager):
    # –£–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ –¥–∏–∞–ª–æ–≥–∞
    try:
        await callback.message.delete()
    except Exception:
        pass
    try:
        await callback.answer()
    except Exception:
        pass

async def auto_delete_old_messages(manager: DialogManager, user_id: int, keep_last: int = 3):
    """
    Deprecated shim. Cleanup now handled by CleanupBot and middleware.
    """
    return

async def track_message(manager: DialogManager, user_id: int, message_id: int):
    """
    Deprecated shim. Tracking now handled automatically.
    """
    return

schedul_dialog_windows = [
    Window(
        StaticMedia(
            path=NO_LESSONS_IMAGE_PATH,
            type=ContentType.PHOTO,
            when=lambda data, widget, manager: not data.get("has_lessons")
        ),
        Format("{dynamic_header}"),
        Format("{progress_bar}"),
        Format("{schedule_text}"),
        Row(
            Button(Const("‚è™"), id=WidgetIds.PREV_WEEK, on_click=lambda c, b, m: on_date_shift(c, b, m, -7)),
            Button(Const("‚óÄÔ∏è"), id=WidgetIds.PREV_DAY, on_click=lambda c, b, m: on_date_shift(c, b, m, -1)),
            Button(Const("üìÖ"), id=WidgetIds.TODAY, on_click=on_today_click),
            Button(Const("‚ñ∂Ô∏è"), id=WidgetIds.NEXT_DAY, on_click=lambda c, b, m: on_date_shift(c, b, m, 1)),
            Button(Const("‚è©"), id=WidgetIds.NEXT_WEEK, on_click=lambda c, b, m: on_date_shift(c, b, m, 7)),
        ),
        # –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ù–µ–¥–µ–ª—è/–ù–∞—Å—Ç—Ä–æ–π–∫–∏/–ü–æ–∏—Å–∫/–ù–æ–≤–æ—Å—Ç–∏
        Row(
            Button(Const("üóì –ù–µ–¥–µ–ª—è"), id="week_as_image", on_click=on_full_week_image_click,
                   when=lambda data, w, m: data.get("user_type") != "teacher"),
            Button(Const("üîÑ –°–º–µ–Ω–∏—Ç—å"), id=WidgetIds.CHANGE_GROUP, on_click=on_change_group_click),
            Button(Const("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), id=WidgetIds.SETTINGS, on_click=on_settings_click,
                   when=lambda data, w, m: data.get("user_type") != "teacher"),
        ),
        Row(
            Button(Const("üîç –ü–æ–∏—Å–∫"), id=WidgetIds.FIND_BTN, on_click=on_find_click,
                   when=lambda data, w, m: data.get("user_type") != "teacher"),
            Button(Const("üì¢ –ù–æ–≤–æ—Å—Ç–∏"), id="news_btn", on_click=on_news_clicked,
                   when=lambda data, w, m: data.get("user_type") != "teacher"),
        ),
        state=Schedule.view, getter=get_schedule_data,
        parse_mode="HTML", disable_web_page_preview=True
    ),
    Window(
        Const("üñº –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–ª–∏ –ø–æ–∫–∞–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ–¥–µ–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ù–∞–∂–º–∏—Ç–µ ‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤–Ω–∏–∑—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."),
        Row(
            Button(Const("üìÑ –û—Ä–∏–≥–∏–Ω–∞–ª (—Ñ–∞–π–ª)"), id="send_original_file_week", on_click=on_send_original_file),
            Button(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="noop_back_to_day", on_click=lambda c, b, m: m.switch_to(Schedule.view)),
        ),
        state=Schedule.week_image_view
    ),
    # –û–∫–Ω–æ –≥–µ–π—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
]

schedule_dialog = Dialog(*schedul_dialog_windows)