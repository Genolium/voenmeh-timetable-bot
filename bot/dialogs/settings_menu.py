import logging
from aiogram.types import CallbackQuery
from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.widgets.kbd import Button, Row, Back, Select, SwitchTo, Column
from aiogram_dialog.widgets.text import Const, Format, Jinja

from .states import SettingsMenu
from .constants import WidgetIds
from core.user_data import UserDataManager
from bot.scheduler import cancel_reminders_for_user, plan_reminders_for_user
# theme_dialog –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ main.py

def get_status_text(status: bool) -> str:
    return "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if status else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞"

def get_button_text(status: bool, action: str) -> str:
    return f"–û—Ç–∫–ª—é—á–∏—Ç—å {action}" if status else f"–í–∫–ª—é—á–∏—Ç—å {action}"

async def get_settings_data(dialog_manager: DialogManager, **kwargs):
    user_data_manager: UserDataManager = dialog_manager.middleware_data.get("user_data_manager")
    user_id = dialog_manager.event.from_user.id
    settings = await user_data_manager.get_user_settings(user_id)

    reminders_status = settings.get(WidgetIds.LESSON_REMINDERS.value, False)
    reminder_time = settings.get("reminder_time_minutes", 60)
    current_theme = settings.get("theme", "standard")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º —Å —ç–º–æ–¥–∑–∏
    themes_info = {
        'standard': 'üé® –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è',
        'light': '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è',
        'dark': 'üåô –¢—ë–º–Ω–∞—è',
        'classic': 'üìú –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è',
        'coffee': '‚òï –ö–æ—Ñ–µ–π–Ω–∞—è'
    }

    current_theme_name = themes_info.get(current_theme, 'üé® –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è')

    return {
        "evening_status_text": get_status_text(settings.get(WidgetIds.EVENING_NOTIFY.value, False)),
        "morning_status_text": get_status_text(settings.get(WidgetIds.MORNING_SUMMARY.value, False)),
        "reminders_status_text": get_status_text(reminders_status),

        "are_reminders_enabled": reminders_status,

        "reminder_time_text": f"({reminder_time} –º–∏–Ω. –¥–æ –Ω–∞—á–∞–ª–∞)",

        "evening_button_text": get_button_text(settings.get(WidgetIds.EVENING_NOTIFY.value, False), "—Å–≤–æ–¥–∫—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞"),
        "morning_button_text": get_button_text(settings.get(WidgetIds.MORNING_SUMMARY.value, False), "—É—Ç—Ä–µ–Ω–Ω—é—é —Å–≤–æ–¥–∫—É"),
        "reminders_button_text": get_button_text(reminders_status, "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–∞—Ä–∞—Ö"),

        "current_theme_name": current_theme_name,
        "current_theme": current_theme,

        "reminder_times": [30, 60, 90, 120],
        "current_reminder_time": reminder_time
    }

async def on_toggle_setting(callback: CallbackQuery, button: Button, manager: DialogManager):
    user_data_manager: UserDataManager = manager.middleware_data.get("user_data_manager")
    scheduler = manager.middleware_data.get("scheduler")
    timetable_manager = manager.middleware_data.get("manager")
    user_id = callback.from_user.id
    setting_name = button.widget_id
    
    current_settings = await user_data_manager.get_user_settings(user_id)
    current_status = current_settings.get(setting_name, False)
    
    new_status = not current_status
    await user_data_manager.update_setting(user_id, setting_name, new_status)

    # –£–ø—Ä–∞–≤–ª—è–µ–º –±–ª–∏–∂–∞–π—à–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–∞—Ä–∞—Ö
    if setting_name == WidgetIds.LESSON_REMINDERS and scheduler and timetable_manager:
        if not new_status:
            await cancel_reminders_for_user(scheduler, user_id)
        else:
            await cancel_reminders_for_user(scheduler, user_id)
            await plan_reminders_for_user(scheduler, user_data_manager, timetable_manager, user_id)

    await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    await manager.switch_to(SettingsMenu.main)

async def on_time_selected(callback: CallbackQuery, widget: Select, manager: DialogManager, item_id: str):
    user_data_manager: UserDataManager = manager.middleware_data.get("user_data_manager")
    scheduler = manager.middleware_data.get("scheduler")
    timetable_manager = manager.middleware_data.get("manager")
    user_id = callback.from_user.id
    selected_time = int(item_id)
    
    await user_data_manager.set_reminder_time(user_id, selected_time)

    # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å –Ω–æ–≤—ã–º –æ–∫–Ω–æ–º
    if scheduler and timetable_manager:
        await cancel_reminders_for_user(scheduler, user_id)
        await plan_reminders_for_user(scheduler, user_data_manager, timetable_manager, user_id)

    await callback.answer(f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {selected_time} –º–∏–Ω—É—Ç.")
    await manager.switch_to(SettingsMenu.main)

async def on_back_click(callback: CallbackQuery, button: Button, manager: DialogManager):
    await manager.done()


async def on_theme_button_click(callback: CallbackQuery, button: Button, manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."""
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ –¥–∏–∞–ª–æ–≥—É —Ç–µ–º (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏)
    try:
        from core.config import SUBSCRIPTION_CHANNEL
        from aiogram import Bot

        if SUBSCRIPTION_CHANNEL:
            bot: Bot = manager.middleware_data.get("bot")
            if bot:
                member = await bot.get_chat_member(SUBSCRIPTION_CHANNEL, user_id)
                status = getattr(member, "status", None)
                is_subscribed = status in ("member", "administrator", "creator")

                if not is_subscribed:
                    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –æ–∫–Ω–æ-–≥–µ–π—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                    await manager.switch_to(SettingsMenu.theme_subscription_gate)
                    channel_link = SUBSCRIPTION_CHANNEL
                    if channel_link.startswith('@'):
                        channel_link = f"https://t.me/{channel_link[1:]}"
                    elif channel_link.startswith('-'):
                        channel_link = f"tg://resolve?domain={channel_link}"
                    elif not channel_link.startswith('http'):
                        channel_link = f"https://t.me/{channel_link}"
                    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=channel_link)]])
                    try:
                        await callback.message.answer("–î–æ—Å—Ç—É–ø –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º —Ç–µ–º–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª.", reply_markup=kb)
                        await callback.answer()
                    except Exception:
                        pass
                    return

        # –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º
        await manager.switch_to(SettingsMenu.choose_theme)

    except Exception:
        # –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await manager.switch_to(SettingsMenu.choose_theme)

async def on_theme_selected(callback: CallbackQuery, widget: Select, manager: DialogManager, item_id: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    try:
        user_id = callback.from_user.id
        user_data_manager: UserDataManager = manager.middleware_data.get("user_data_manager")
        if user_data_manager:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            try:
                await user_data_manager.register_user(user_id, getattr(callback.from_user, "username", None))
            except Exception:
                pass
            await user_data_manager.set_user_theme(user_id, item_id)
            await callback.answer("–¢–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ‚úÖ")
        else:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–º—É", show_alert=True)
    except Exception:
        try:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–º—ã", show_alert=True)
        except Exception:
            pass
    await manager.switch_to(SettingsMenu.main)

async def get_theme_data(dialog_manager: DialogManager, **kwargs):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –∏ —Å–ø–∏—Å–æ–∫ —Ç–µ–º —Å –ø–æ–º–µ—Ç–∫–æ–π —Ç–µ–∫—É—â–µ–π."""
    themes_info = {
        'standard': {'name': 'üé® –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è', 'description': '–∫—Ä–∞—Å–Ω–∞—è –¥–ª—è –Ω–µ—á—ë—Ç–Ω—ã—Ö –Ω–µ–¥–µ–ª—å, —Ñ–∏–æ–ª–µ—Ç–æ–≤–∞—è –¥–ª—è —á—ë—Ç–Ω—ã—Ö'},
        'light': {'name': '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è', 'description': '–±–∏—Ä—é–∑–æ–≤–∞—è —Ç–µ–º–∞ —Å –∫—Ä–µ–º–æ–≤—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏'},
        'dark': {'name': 'üåô –¢—ë–º–Ω–∞—è', 'description': '—Ç—ë–º–Ω–∞—è —Ç–µ–º–∞ —Å —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏'},
        'classic': {'name': 'üìú –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è', 'description': '—Ç—ë–º–Ω–æ-—Å–∏–Ω—è—è —Ç–µ–º–∞ –≤ —Ü–≤–µ—Ç–æ–≤–æ–π –≥–∞–º–º–µ –í–æ–µ–Ω–º–µ—Ö–∞'},
        'coffee': {'name': '‚òï –ö–æ—Ñ–µ–π–Ω–∞—è', 'description': '–∫–æ—Ä–∏—á–Ω–µ–≤–æ-–∑–æ–ª–æ—Ç–∞—è —Ç–µ–º–∞ —Å –∫—Ä–µ–º–æ–≤—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏'},
    }
    user_data_manager: UserDataManager = dialog_manager.middleware_data.get("user_data_manager")
    user_id = dialog_manager.event.from_user.id
    current_theme = 'standard'
    try:
        if user_data_manager:
            current_theme = await user_data_manager.get_user_theme(user_id) or 'standard'
    except Exception:
        current_theme = 'standard'

    themes = []
    for key, info in themes_info.items():
        themes.append({
            'id': key,
            'name': info['name'],
            'description': info['description'],
            'is_current': key == current_theme,
        })

    return {
        'current_theme': themes_info.get(current_theme, {'name': 'üé® –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è'})['name'],
        'themes': themes,
    }
async def on_news_clicked(callback: CallbackQuery, button: Button, manager: DialogManager):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    await callback.answer("üì¢ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–æ–≤–æ—Å—Ç—è–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!")
    await callback.message.answer(
        "üöÄ <b>–ù–æ–≤–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–∞</b>\n\n"
        "–í—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø–ª–∞–Ω—ã –∏ –Ω–æ–≤–æ—Å—Ç–∏ –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –±–æ—Ç–∞ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ:\n\n"
        "üì¢ <a href='https://t.me/voenmeh404'>–ê—É–¥–∏—Ç–æ—Ä–∏—è 404 | –í–æ–µ–Ω–º–µ—Ö</a>\n\n"
        "–¢–∞–º –≤—ã —É–∑–Ω–∞–µ—Ç–µ:\n"
        "‚Ä¢ –û –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –ø–µ—Ä–≤—ã–º–∏\n"
        "‚Ä¢ –û –ø–ª–∞–Ω–∞—Ö —Ä–∞–∑–≤–∏—Ç–∏—è\n"
        "‚Ä¢ –°–º–æ–∂–µ—Ç–µ –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É\n"
        "‚Ä¢ –£–≤–∏–¥–∏—Ç–µ –∑–∞–∫—É–ª–∏—Å—å–µ –ø—Ä–æ–µ–∫—Ç–∞\n\n"
        "<i>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ! üëÜ</i>",
        parse_mode="HTML",
        disable_web_page_preview=True
    )

settings_dialog = Dialog(
    Window(
        Const("‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n"),
        Format(f"–°–≤–æ–¥–∫–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (20:00): <b>{{evening_status_text}}</b>"),
        Format(f"–°–≤–æ–¥–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (8:00): <b>{{morning_status_text}}</b>"),
        Format(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–∞—Ä–∞—Ö: <b>{{reminders_status_text}}</b>"),
        
        Button(Format("{evening_button_text}"), id=WidgetIds.EVENING_NOTIFY, on_click=on_toggle_setting),
        Button(Format("{morning_button_text}"), id=WidgetIds.MORNING_SUMMARY, on_click=on_toggle_setting),
        
        Row(
            Button(Format("{reminders_button_text}"), id=WidgetIds.LESSON_REMINDERS, on_click=on_toggle_setting),
            SwitchTo(Const("‚è∞ –í—Ä–µ–º—è"), id="to_time_settings", state=SettingsMenu.reminders_time, when="are_reminders_enabled"),
        ),
        Format("{reminder_time_text}", when="are_reminders_enabled"),

        Button(Format("üé® –¢–µ–º–∞: {current_theme_name}"), id="theme_btn", on_click=on_theme_button_click),
        Button(Const("üì¢ –ù–æ–≤–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"), id="news_btn", on_click=on_news_clicked),
        Button(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="back_to_schedule", on_click=on_back_click),
        state=SettingsMenu.main, getter=get_settings_data, parse_mode="HTML"
    ),
    Window(
        Const("–í—ã–±–µ—Ä–∏—Ç–µ, –∑–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:"),
        Row(
            Select(
                Jinja(
                    "{% if item == current_reminder_time %}"
                    "‚úÖ {{ item }} –º–∏–Ω."
                    "{% else %}"
                    "{{ item }} –º–∏–Ω."
                    "{% endif %}"
                ),
                id="select_reminder_time",
                item_id_getter=lambda item: str(item),
                items="reminder_times",
                on_click=on_time_selected
            )
        ),
        Back(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥")),
        state=SettingsMenu.reminders_time, getter=get_settings_data
    ),
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–∫–Ω–∞ –∏–∑ theme_dialog
    Window(
        Const("üé® <b>–î–æ—Å—Ç—É–ø –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º —Ç–µ–º–∞–º</b>\n\n"
              "–í—ã–±–µ—Ä–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ç–µ–º—É –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n\n"
              "üé® <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è</b> - –∫—Ä–∞—Å–Ω–∞—è –¥–ª—è –Ω–µ—á—ë—Ç–Ω—ã—Ö, —Ñ–∏–æ–ª–µ—Ç–æ–≤–∞—è –¥–ª—è —á—ë—Ç–Ω—ã—Ö –Ω–µ–¥–µ–ª—å\n"
              "‚òÄÔ∏è <b>–°–≤–µ—Ç–ª–∞—è</b> - –±–∏—Ä—é–∑–æ–≤–∞—è —Ç–µ–º–∞ —Å –∫—Ä–µ–º–æ–≤—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏\n"
              "üåô <b>–¢—ë–º–Ω–∞—è</b> - —Ç—ë–º–Ω–∞—è —Ç–µ–º–∞ —Å —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏\n"
              "üìú <b>–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è</b> - —Ç—ë–º–Ω–æ-—Å–∏–Ω—è—è —Ç–µ–º–∞ —Å –±–µ–ª—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏\n"
              "‚òï <b>–ö–æ—Ñ–µ–π–Ω–∞—è</b> - –∫–æ—Ä–∏—á–Ω–µ–≤–æ-–∑–æ–ª–æ—Ç–∞—è —Ç–µ–º–∞ —Å –∫—Ä–µ–º–æ–≤—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏\n\n"
              "<i>–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏</i>"),
        Button(Const("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"), id="check_subscription", on_click=lambda c, b, m: m.switch_to(SettingsMenu.choose_theme)),
        Back(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), on_click=lambda c, b, m: m.switch_to(SettingsMenu.main)),
        state=SettingsMenu.theme_subscription_gate,
        parse_mode="HTML"
    ),
    Window(
        Const("üé® <b>–í—ã–±–æ—Ä —Ç–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</b>\n\n"
              "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n"),
        Format("–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: <b>{current_theme}</b>\n"),
        Const("\nüìã <i>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã:</i>\n"),
        Column(
            Select(
                Jinja(
                    "{% if item.is_current %}"
                    "‚úÖ {{ item.name }}"
                    "{% else %}"
                    "üîò {{ item.name }}"
                    "{% endif %}"
                ),
                id="select_theme",
                item_id_getter=lambda item: item['id'],
                items="themes",
                on_click=on_theme_selected
            )
        ),
        Back(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), on_click=lambda c, b, m: m.switch_to(SettingsMenu.main)),
        state=SettingsMenu.choose_theme,
        getter=get_theme_data,
        parse_mode="HTML"
    )
)
