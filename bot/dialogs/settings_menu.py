from aiogram.types import CallbackQuery
from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.widgets.kbd import Button, Row, Back, Select, SwitchTo
from aiogram_dialog.widgets.text import Const, Format, Jinja

from .states import SettingsMenu
from .constants import WidgetIds
from core.user_data import UserDataManager
from bot.scheduler import cancel_reminders_for_user, plan_reminders_for_user

def get_status_text(status: bool) -> str:
    return "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if status else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞"

def get_button_text(status: bool, action: str) -> str:
    return f"–û—Ç–∫–ª—é—á–∏—Ç—å {action}" if status else f"–í–∫–ª—é—á–∏—Ç—å {action}"

async def get_settings_data(dialog_manager: DialogManager, **kwargs):
    user_data_manager: UserDataManager = dialog_manager.middleware_data.get("user_data_manager")
    user_id = dialog_manager.event.from_user.id
    settings = await user_data_manager.get_user_settings(user_id)
    
    reminders_status = settings.get(WidgetIds.LESSON_REMINDERS.value, False)
    reminder_time = settings.get("reminder_time_minutes", 20)

    return {
        "evening_status_text": get_status_text(settings.get(WidgetIds.EVENING_NOTIFY.value, False)),
        "morning_status_text": get_status_text(settings.get(WidgetIds.MORNING_SUMMARY.value, False)),
        "reminders_status_text": get_status_text(reminders_status),
        
        "are_reminders_enabled": reminders_status,
        
        "reminder_time_text": f"({reminder_time} –º–∏–Ω. –¥–æ –Ω–∞—á–∞–ª–∞)",
        
        "evening_button_text": get_button_text(settings.get(WidgetIds.EVENING_NOTIFY.value, False), "—Å–≤–æ–¥–∫—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞"),
        "morning_button_text": get_button_text(settings.get(WidgetIds.MORNING_SUMMARY.value, False), "—É—Ç—Ä–µ–Ω–Ω—é—é —Å–≤–æ–¥–∫—É"),
        "reminders_button_text": get_button_text(reminders_status, "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–∞—Ä–∞—Ö"),
        
        "reminder_times": [30, 60, 90, 120],
        "current_reminder_time": reminder_time
    }

async def on_toggle_setting(callback: CallbackQuery, button: Button, manager: DialogManager):
    user_data_manager: UserDataManager = manager.middleware_data.get("user_data_manager")
    scheduler = manager.middleware_data.get("scheduler")
    timetable_manager = manager.middleware_data.get("manager")
    user_id = callback.from_user.id
    setting_name = button.widget_id
    
    current_settings = await user_data_manager.get_user_settings(user_id)
    current_status = current_settings.get(setting_name, False)
    
    new_status = not current_status
    await user_data_manager.update_setting(user_id, setting_name, new_status)

    # –£–ø—Ä–∞–≤–ª—è–µ–º –±–ª–∏–∂–∞–π—à–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–∞—Ä–∞—Ö
    if setting_name == WidgetIds.LESSON_REMINDERS and scheduler and timetable_manager:
        if not new_status:
            await cancel_reminders_for_user(scheduler, user_id)
        else:
            await cancel_reminders_for_user(scheduler, user_id)
            await plan_reminders_for_user(scheduler, user_data_manager, timetable_manager, user_id)

    await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    await manager.switch_to(SettingsMenu.main)

async def on_time_selected(callback: CallbackQuery, widget: Select, manager: DialogManager, item_id: str):
    user_data_manager: UserDataManager = manager.middleware_data.get("user_data_manager")
    scheduler = manager.middleware_data.get("scheduler")
    timetable_manager = manager.middleware_data.get("manager")
    user_id = callback.from_user.id
    selected_time = int(item_id)
    
    await user_data_manager.set_reminder_time(user_id, selected_time)

    # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å –Ω–æ–≤—ã–º –æ–∫–Ω–æ–º
    if scheduler and timetable_manager:
        await cancel_reminders_for_user(scheduler, user_id)
        await plan_reminders_for_user(scheduler, user_data_manager, timetable_manager, user_id)

    await callback.answer(f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {selected_time} –º–∏–Ω—É—Ç.")
    await manager.switch_to(SettingsMenu.main)

async def on_back_click(callback: CallbackQuery, button: Button, manager: DialogManager):
    await manager.done()

async def on_news_clicked(callback: CallbackQuery, button: Button, manager: DialogManager):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    await callback.answer("üì¢ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–æ–≤–æ—Å—Ç—è–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!")
    await callback.message.answer(
        "üöÄ <b>–ù–æ–≤–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–∞</b>\n\n"
        "–í—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø–ª–∞–Ω—ã –∏ –Ω–æ–≤–æ—Å—Ç–∏ –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –±–æ—Ç–∞ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ:\n\n"
        "üì¢ <a href='https://t.me/voenmeh404'>–ê—É–¥–∏—Ç–æ—Ä–∏—è 404 | –í–æ–µ–Ω–º–µ—Ö</a>\n\n"
        "–¢–∞–º –≤—ã —É–∑–Ω–∞–µ—Ç–µ:\n"
        "‚Ä¢ –û –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –ø–µ—Ä–≤—ã–º–∏\n"
        "‚Ä¢ –û –ø–ª–∞–Ω–∞—Ö —Ä–∞–∑–≤–∏—Ç–∏—è\n"
        "‚Ä¢ –°–º–æ–∂–µ—Ç–µ –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É\n"
        "‚Ä¢ –£–≤–∏–¥–∏—Ç–µ –∑–∞–∫—É–ª–∏—Å—å–µ –ø—Ä–æ–µ–∫—Ç–∞\n\n"
        "<i>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ! üëÜ</i>",
        parse_mode="HTML",
        disable_web_page_preview=True
    )

settings_dialog = Dialog(
    Window(
        Const("‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n"),
        Format(f"–°–≤–æ–¥–∫–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (20:00): <b>{{evening_status_text}}</b>"),
        Format(f"–°–≤–æ–¥–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (8:00): <b>{{morning_status_text}}</b>"),
        Format(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–∞—Ä–∞—Ö: <b>{{reminders_status_text}}</b>"),
        
        Button(Format("{evening_button_text}"), id=WidgetIds.EVENING_NOTIFY, on_click=on_toggle_setting),
        Button(Format("{morning_button_text}"), id=WidgetIds.MORNING_SUMMARY, on_click=on_toggle_setting),
        
        Row(
            Button(Format("{reminders_button_text}"), id=WidgetIds.LESSON_REMINDERS, on_click=on_toggle_setting),
            SwitchTo(Const("‚è∞ –í—Ä–µ–º—è"), id="to_time_settings", state=SettingsMenu.reminders_time, when="are_reminders_enabled"),
        ),
        Format("{reminder_time_text}", when="are_reminders_enabled"),

        Row(
            Button(Const("üì¢ –ù–æ–≤–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"), id="news_btn", on_click=on_news_clicked),
            Button(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="back_to_schedule", on_click=on_back_click),
        ),
        state=SettingsMenu.main, getter=get_settings_data, parse_mode="HTML"
    ),
    Window(
        Const("–í—ã–±–µ—Ä–∏—Ç–µ, –∑–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:"),
        Row(
            Select(
                Jinja(
                    "{% if item == current_reminder_time %}"
                    "‚úÖ {{ item }} –º–∏–Ω."
                    "{% else %}"
                    "{{ item }} –º–∏–Ω."
                    "{% endif %}"
                ),
                id="select_reminder_time",
                item_id_getter=lambda item: str(item),
                items="reminder_times",
                on_click=on_time_selected
            )
        ),
        Back(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥")),
        state=SettingsMenu.reminders_time, getter=get_settings_data
    )
)
