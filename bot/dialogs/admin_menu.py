from aiogram.types import Message, ContentType
from aiogram import Bot
from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.text import Const, Format
from aiogram_dialog.widgets.kbd import Button, SwitchTo, Back

from .states import Admin
from core.user_data import UserDataManager

# --- –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –æ–∫–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
async def get_stats_data(user_data_manager: UserDataManager, **kwargs):
    total_users = await user_data_manager.get_total_users_count()
    new_today = await user_data_manager.get_new_users_count(days=1)
    new_week = await user_data_manager.get_new_users_count(days=7)
    active_users = await user_data_manager.get_active_users_count()
    top_groups = await user_data_manager.get_top_groups(limit=5)

    top_groups_text = "\n".join([f"  - {group or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}: {count}" for group, count in top_groups])
    if not top_groups_text:
        top_groups_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
        f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
        f"üìà –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: <b>{new_today}</b>\n"
        f"üìà –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: <b>{new_week}</b>\n"
        f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö (—Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏): <b>{active_users}</b>\n\n"
        f"üèÜ <b>–¢–æ–ø-5 –≥—Ä—É–ø–ø:</b>\n{top_groups_text}"
    )
    return {"stats_text": stats_text}


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def on_broadcast_received(message: Message, message_input: MessageInput, manager: DialogManager):
    bot: Bot = manager.middleware_data.get("bot")
    user_data_manager: UserDataManager = manager.middleware_data.get("user_data_manager")

    try:
        all_users = await user_data_manager.get_all_user_ids()
        sent_count, failed_count = 0, 0
        
        await bot.send_message(message.from_user.id, f"üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

        for user_id in all_users:
            try:
                await message.copy_to(chat_id=user_id)
                sent_count += 1
            except Exception:
                failed_count += 1
        
        await bot.send_message(
            message.from_user.id,
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüëç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\nüëé –û—à–∏–±–æ–∫: {failed_count}"
        )
    except Exception as e:
        await bot.send_message(message.from_user.id, f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
    
    await manager.done()

# --- –î–∏–∞–ª–æ–≥ –∞–¥–º–∏–Ω–∫–∏ ---
admin_dialog = Dialog(
    # --- –û–∫–Ω–æ 1: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏ ---
    Window(
        Const("üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"),
        SwitchTo(Const("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), id="stats", state=Admin.stats),
        SwitchTo(Const("üì£ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"), id="broadcast", state=Admin.broadcast),
        state=Admin.menu
    ),
    # --- –û–∫–Ω–æ 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
    Window(
        Format("{stats_text}"),
        Back(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥")),
        getter=get_stats_data,
        state=Admin.stats
    ),
    # --- –û–∫–Ω–æ 3: –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ---
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä."),
        MessageInput(on_broadcast_received, content_types=[ContentType.ANY]),
        Back(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥")),
        state=Admin.broadcast
    )
)