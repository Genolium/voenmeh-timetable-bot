import asyncio
import os
import random
from datetime import date, datetime, time, timedelta
from pathlib import Path

from aiogram import Bot
from aiogram.types import CallbackQuery, ContentType, Message
from aiogram_dialog import Dialog, DialogManager, Window
from aiogram_dialog.widgets.input import MessageInput, TextInput
from aiogram_dialog.widgets.kbd import Back, Button, Column, Row, Select, SwitchTo
from aiogram_dialog.widgets.text import Const, Format, Jinja

from bot.dialogs.schedule_view import cleanup_old_cache, get_cache_info
from bot.scheduler import evening_broadcast, morning_summary_broadcast
from bot.tasks import copy_message_task, send_message_task
from bot.text_formatters import generate_reminder_text
from core.config import MOSCOW_TZ
from core.events_manager import EventsManager
from core.feedback_manager import FeedbackManager
from core.manager import TimetableManager
from core.metrics import TASKS_SENT_TO_QUEUE
from core.semester_settings import SemesterSettingsManager
from core.user_data import UserDataManager

from .constants import WidgetIds
from .states import Admin

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞; –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤ UI
active_generations = {}
EVENTS_PAGE_SIZE = 10


def _is_empty_field(value: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞"""
    if not value or not value.strip():
        return True

    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    lower_value = value.strip().lower()
    skip_words = [
        "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        "–ø—Ä–æ–ø—É—Å–∫",
        "skip",
        "–æ—Ç–º–µ–Ω–∞",
        "–æ—Ç–º–µ–Ω–∏—Ç—å",
        "cancel",
        "–Ω–µ—Ç",
        "no",
        "none",
        "-",
        "‚Äî",
        "‚Äì",
        ".",
        "–ø—É—Å—Ç–æ",
        "empty",
        "null",
    ]

    return lower_value in skip_words


def _is_cancel(text: str) -> bool:
    raw = (text or "").strip().lower()
    return raw in {"–æ—Ç–º–µ–Ω–∞", "cancel", "–æ—Ç–º–µ–Ω–∏—Ç—å"}


def _is_skip(text: str) -> bool:
    raw = (text or "").strip().lower()
    return raw in {"–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip", "-", "–ø—É—Å—Ç–æ", "empty", ""}


async def on_test_morning(callback: CallbackQuery, button: Button, manager: DialogManager):
    user_data_manager = manager.middleware_data.get("user_data_manager")
    timetable_manager = manager.middleware_data.get("manager")
    await callback.answer("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–¥–∞—á –Ω–∞ —É—Ç—Ä–µ–Ω–Ω—é—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    await morning_summary_broadcast(user_data_manager, timetable_manager)
    await callback.message.answer("‚úÖ –ó–∞–¥–∞—á–∏ –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å.")


async def on_test_evening(callback: CallbackQuery, button: Button, manager: DialogManager):
    user_data_manager = manager.middleware_data.get("user_data_manager")
    timetable_manager = manager.middleware_data.get("manager")
    await callback.answer("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–¥–∞—á –Ω–∞ –≤–µ—á–µ—Ä–Ω—é—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    await evening_broadcast(user_data_manager, timetable_manager)
    await callback.message.answer("‚úÖ –ó–∞–¥–∞—á–∏ –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å.")


async def on_test_reminders_for_week(callback: CallbackQuery, button: Button, manager: DialogManager):
    bot: Bot = manager.middleware_data.get("bot")
    admin_id = callback.from_user.id
    user_data_manager: UserDataManager = manager.middleware_data.get("user_data_manager")
    timetable_manager: TimetableManager = manager.middleware_data.get("manager")

    await callback.answer("üöÄ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")

    test_users = await user_data_manager.get_users_for_lesson_reminders()
    if not test_users:
        await bot.send_message(
            admin_id,
            "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞.",
        )
        return

    test_user_id, test_group_name, _ = random.choice(test_users)
    await bot.send_message(
        admin_id,
        f"‚ÑπÔ∏è –¢–µ—Å—Ç–∏—Ä—É—é –ª–æ–≥–∏–∫—É –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{test_user_id}</code> (–≥—Ä—É–ø–ø–∞ <code>{test_group_name}</code>)",
    )

    for i in range(7):
        test_date = date.today() + timedelta(days=i)
        await bot.send_message(
            admin_id,
            f"--- üóìÔ∏è <b>–¢–µ—Å—Ç –¥–ª—è –¥–∞—Ç—ã: {test_date.strftime('%A, %d.%m.%Y')}</b> ---",
        )
        schedule_info = await timetable_manager.get_schedule_for_day(test_group_name, target_date=test_date)

        if not (schedule_info and not schedule_info.get("error") and schedule_info.get("lessons")):
            await bot.send_message(admin_id, "<i>–ù–µ—Ç –ø–∞—Ä ‚Äî –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. ‚úÖ</i>")
        else:
            try:
                pass
            except Exception as e:
                await bot.send_message(admin_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")

    await bot.send_message(admin_id, "‚úÖ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ.</b>")


async def on_test_alert(callback: CallbackQuery, button: Button, manager: DialogManager):
    bot: Bot = manager.middleware_data.get("bot")
    admin_id = callback.from_user.id
    await callback.answer("üß™ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–π –∞–ª—ë—Ä—Ç...")
    text = (
        "ALERTMANAGER: FIRING (1 alert)\n\n"
        "‚ö†Ô∏è ScheduleStale [critical]\n"
        "No update > 1h\n"
        "source=scheduler\n"
        "startsAt=now"
    )
    await bot.send_message(admin_id, text)


async def on_generate_full_schedule(callback: CallbackQuery, button: Button, manager: DialogManager):
    """–ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞."""
    await callback.answer("‚ùå –ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    bot: Bot = manager.middleware_data.get("bot")
    try:
        await bot.send_message(
            callback.from_user.id,
            "‚ùå –ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
        )
    except Exception:
        pass


async def on_check_graduated_groups(callback: CallbackQuery, button: Button, manager: DialogManager):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø—É—Å—Ç–∏–≤—à–∏—Ö—Å—è –≥—Ä—É–ø–ø."""
    bot: Bot = manager.middleware_data.get("bot")
    admin_id = callback.from_user.id
    user_data_manager = manager.middleware_data.get("user_data_manager")
    timetable_manager = manager.middleware_data.get("manager")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Redis-–∫–ª–∏–µ–Ω—Ç
    import os

    from redis.asyncio import Redis

    redis_url = os.getenv("REDIS_URL")
    redis_password = os.getenv("REDIS_PASSWORD")
    redis_client = Redis.from_url(redis_url, password=redis_password, decode_responses=False)

    await callback.answer("üîç –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—ã–ø—É—Å—Ç–∏–≤—à–∏—Ö—Å—è –≥—Ä—É–ø–ø...")
    await bot.send_message(admin_id, "üîç –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—ã–ø—É—Å—Ç–∏–≤—à–∏—Ö—Å—è –≥—Ä—É–ø–ø...")

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ scheduler
        from bot.scheduler import handle_graduated_groups

        await handle_graduated_groups(user_data_manager, timetable_manager, redis_client)
        await bot.send_message(admin_id, "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø—É—Å—Ç–∏–≤—à–∏—Ö—Å—è –≥—Ä—É–ø–ø –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    except Exception as e:
        await bot.send_message(admin_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—ã–ø—É—Å—Ç–∏–≤—à–∏—Ö—Å—è –≥—Ä—É–ø–ø: {e}")
        import traceback

        await bot.send_message(admin_id, f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n<code>{traceback.format_exc()}</code>")


async def on_semester_settings(callback: CallbackQuery, button: Button, manager: DialogManager):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Å–µ–º–µ—Å—Ç—Ä–æ–≤."""
    await manager.switch_to(Admin.semester_settings)


async def on_admin_categories(callback: CallbackQuery, button: Button, manager: DialogManager):
    await manager.switch_to(Admin.categories_menu)


async def on_admin_events(callback: CallbackQuery, button: Button, manager: DialogManager):
    await manager.switch_to(Admin.events_menu)


async def get_categories_list(dialog_manager: DialogManager, **kwargs):
    session_factory = dialog_manager.middleware_data.get("session_factory")
    events = EventsManager(session_factory)
    categories = await events.list_categories(only_active=False)
    lines = []
    for c in categories:
        prefix = "‚Äî " if c.parent_id else ""
        status = "‚úÖ" if c.is_active else "üö´"
        lines.append(f"{status} {prefix}<b>{c.name}</b> (id={c.id})")
    text = "\n".join(lines) or "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã"
    return {"categories_text": text}


async def get_events_list(dialog_manager: DialogManager, **kwargs):
    session_factory = dialog_manager.middleware_data.get("session_factory")
    events = EventsManager(session_factory)
    page = dialog_manager.dialog_data.get("events_page", 0)
    offset = page * EVENTS_PAGE_SIZE

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    pub_filter = dialog_manager.dialog_data.get("events_pub_filter", "all")

    if pub_filter == "published":
        only_published = True
    elif pub_filter == "hidden":
        only_published = False
    else:  # 'all'
        only_published = None

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è (–±–µ–∑ –ø—Ä–æ—à–µ–¥—à–∏—Ö)
    from datetime import datetime as _dt

    items, total = await events.list_events(
        only_published=only_published,
        limit=EVENTS_PAGE_SIZE,
        offset=offset,
        now=_dt.now(MOSCOW_TZ),
        from_now_only=True,
    )
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
    search_query = dialog_manager.dialog_data.get("events_search", "").strip().lower()
    if search_query:
        filtered_items = []
        for item in items:
            if (
                search_query in item.title.lower()
                or (item.description and search_query in item.description.lower())
                or (item.location and search_query in item.location.lower())
            ):
                filtered_items.append(item)
        items = filtered_items
        total = len(items)
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        items = items[offset : offset + EVENTS_PAGE_SIZE]

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    skip_words = {
        "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        "–ø—Ä–æ–ø—É—Å–∫",
        "skip",
        "–æ—Ç–º–µ–Ω–∞",
        "–æ—Ç–º–µ–Ω–∏—Ç—å",
        "cancel",
        "–Ω–µ—Ç",
        "no",
        "none",
        "-",
        "‚Äî",
        "‚Äì",
        ".",
        "–ø—É—Å—Ç–æ",
        "empty",
        "null",
    }

    def _clean_title(title: str) -> str:
        if not title:
            return title
        filtered = " ".join(w for w in title.split() if w.lower() not in skip_words).strip()
        return filtered or title

    lines = [f"{('‚úÖ' if e.is_published else 'üö´')} <b>{_clean_title(e.title)}</b> (id={e.id})" for e in items]
    return {
        "events_text": ("\n".join(lines) or "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç"),
        "total_events": total,
        "page": page,
        "has_prev": page > 0,
        "has_next": (offset + EVENTS_PAGE_SIZE) < total,
        "events_items": [(f"{('‚úÖ' if e.is_published else 'üö´')} {_clean_title(e.title)}", str(e.id)) for e in items],
    }


async def on_events_prev(callback: CallbackQuery, button: Button, manager: DialogManager):
    page = manager.dialog_data.get("events_page", 0)
    if page > 0:
        manager.dialog_data["events_page"] = page - 1
    await manager.switch_to(Admin.events_menu)


async def on_events_next(callback: CallbackQuery, button: Button, manager: DialogManager):
    page = manager.dialog_data.get("events_page", 0)
    manager.dialog_data["events_page"] = page + 1
    await manager.switch_to(Admin.events_menu)


async def on_event_selected(callback: CallbackQuery, widget: Select, manager: DialogManager, item_id: str):
    manager.dialog_data["selected_event_id"] = int(item_id)
    await manager.switch_to(Admin.event_details)


async def on_events_set_filter(callback: CallbackQuery, button: Button, manager: DialogManager):
    btn_id = button.widget_id
    if btn_id == "evt_filter_all":
        manager.dialog_data["events_pub_filter"] = "all"
    elif btn_id == "evt_filter_pub":
        manager.dialog_data["events_pub_filter"] = "published"
    elif btn_id == "evt_filter_hidden":
        manager.dialog_data["events_pub_filter"] = "hidden"
    manager.dialog_data["events_page"] = 0
    await manager.switch_to(Admin.events_menu)


async def on_events_search_input(message: Message, widget: TextInput, manager: DialogManager, data: str):
    raw = (message.text or "").strip()
    if _is_cancel(raw):
        await message.answer("‚Ü©Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ")
        await manager.switch_to(Admin.events_menu)
        return
    if _is_skip(raw) or not raw:
        manager.dialog_data["events_search"] = ""
        await message.answer("üîç –ü–æ–∏—Å–∫ –æ—á–∏—â–µ–Ω")
    else:
        manager.dialog_data["events_search"] = raw
        await message.answer(f"üîç –ü–æ–∏—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {raw}")
    manager.dialog_data["events_page"] = 0
    await manager.switch_to(Admin.events_menu)


async def get_event_admin_details(dialog_manager: DialogManager, **kwargs):
    session_factory = dialog_manager.middleware_data.get("session_factory")
    ev = EventsManager(session_factory)
    event_id = dialog_manager.dialog_data.get("selected_event_id")
    item = await ev.get_event(event_id) if event_id else None
    if not item:
        return {"event_text": "–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}
    text_parts = [
        f"<b>{item.title}</b>",
        f"üÜî {item.id}",
        f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ' if item.is_published else 'üö´ –°–∫—Ä—ã—Ç–æ'}",
    ]

    # –î–∞—Ç–∞/–≤—Ä–µ–º—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∏ –Ω–µ 00:00)
    if item.start_at:
        if item.start_at.hour == 0 and item.start_at.minute == 0:
            text_parts.append(f"üóì {item.start_at.strftime('%d.%m.%Y')}")
        else:
            text_parts.append(f"üóì {item.start_at.strftime('%d.%m.%Y %H:%M')}")

    # –õ–æ–∫–∞—Ü–∏—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª—É–∂–µ–±–Ω—ã–º —Å–ª–æ–≤–æ–º)
    if item.location and not _is_empty_field(item.location):
        text_parts.append(f"üìç {item.location}")

    # –°—Å—ã–ª–∫–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª—É–∂–µ–±–Ω—ã–º —Å–ª–æ–≤–æ–º)
    if item.link and not _is_empty_field(item.link):
        text_parts.append(f"üîó {item.link}")

    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if getattr(item, "image_file_id", None):
        text_parts.append("üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª–µ–Ω–æ")

    # –û–ø–∏—Å–∞–Ω–∏–µ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª—É–∂–µ–±–Ω—ã–º —Å–ª–æ–≤–æ–º)
    if item.description and not _is_empty_field(item.description):
        text_parts.append(f"\n{item.description}")

    text = "\n".join(text_parts)
    return {
        "event_text": text,
        "is_published": item.is_published,
        "has_image": bool(getattr(item, "image_file_id", None)),
    }


async def on_event_delete(callback: CallbackQuery, button: Button, manager: DialogManager):
    session_factory = manager.middleware_data.get("session_factory")
    ev = EventsManager(session_factory)
    event_id = manager.dialog_data.get("selected_event_id")
    if event_id:
        await ev.delete_event(event_id)
        await callback.answer("üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ")
    await manager.switch_to(Admin.events_menu)


async def on_event_toggle_publish(callback: CallbackQuery, button: Button, manager: DialogManager):
    session_factory = manager.middleware_data.get("session_factory")
    ev = EventsManager(session_factory)
    event_id = manager.dialog_data.get("selected_event_id")
    item = await ev.get_event(event_id)
    if item:
        await ev.update_event(event_id, is_published=not item.is_published)
        await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω")
    await manager.switch_to(Admin.event_details)


async def on_event_edit_menu(callback: CallbackQuery, button: Button, manager: DialogManager):
    await manager.switch_to(Admin.event_edit_menu)


async def on_event_edit_title(message: Message, widget: TextInput, manager: DialogManager, data: str):
    session_factory = manager.middleware_data.get("session_factory")
    ev = EventsManager(session_factory)
    eid = manager.dialog_data.get("selected_event_id")
    raw = (message.text or "").strip()
    if _is_cancel(raw):
        await message.answer("‚Ü©Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ")
        await manager.switch_to(Admin.event_details)
        return
    if not raw:
        await message.answer("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    if len(raw) > 255:
        await message.answer("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    await ev.update_event(eid, title=raw)
    await message.answer("‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω")
    await manager.switch_to(Admin.event_details)


async def on_event_edit_datetime(message: Message, widget: TextInput, manager: DialogManager, data: str):
    from datetime import datetime as dt

    session_factory = manager.middleware_data.get("session_factory")
    ev = EventsManager(session_factory)
    eid = manager.dialog_data.get("selected_event_id")
    raw = (message.text or "").strip()
    if _is_cancel(raw):
        await message.answer("‚Ü©Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ")
        await manager.switch_to(Admin.event_details)
        return
    if not raw:
        await ev.update_event(eid, start_at=None)
        await message.answer("‚úÖ –î–∞—Ç–∞/–≤—Ä–µ–º—è –æ—á–∏—â–µ–Ω—ã")
        await manager.switch_to(Admin.event_details)
        return
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞
        base_date_str = manager.dialog_data.get("edit_date")

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è (–ß–ß:–ú–ú) –∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –¥–∞—Ç–∞
        if ":" in raw and "." not in raw and base_date_str:
            try:
                # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞—Ç—É –∏–∑ ISO —Å—Ç—Ä–æ–∫–∏
                base_date = dt.fromisoformat(base_date_str)
                hh, mm = raw.split(":", 1)
                result = base_date.replace(hour=int(hh), minute=int(mm), second=0, microsecond=0)
                await ev.update_event(eid, start_at=result)
                await message.answer("‚úÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                manager.dialog_data.pop("edit_date", None)  # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –¥–∞—Ç—É
                await manager.switch_to(Admin.event_details)
                return
            except (ValueError, TypeError):
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")
                return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤–º–µ—Å—Ç–µ (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú)
        if " " in raw:
            d_part, t_part = raw.split(" ", 1)
            d_val = dt.strptime(d_part.strip(), "%d.%m.%Y")
            hh, mm = t_part.strip().split(":", 1)
            result = d_val.replace(hour=int(hh), minute=int(mm), second=0, microsecond=0)
            await ev.update_event(eid, start_at=result)
            await message.answer("‚úÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            manager.dialog_data.pop("edit_date", None)  # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –¥–∞—Ç—É
            await manager.switch_to(Admin.event_details)
            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì)
        else:
            date_val = dt.strptime(raw, "%d.%m.%Y")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∫–∞–∫ ISO —Å—Ç—Ä–æ–∫—É –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            manager.dialog_data["edit_date"] = date_val.isoformat()
            await message.answer("‚úÖ –î–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–∏–ª–∏ –ø—É—Å—Ç–æ)")
            await manager.switch_to(Admin.event_edit_time)
            return

    except Exception:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è
        base_date_str = manager.dialog_data.get("edit_date")
        if base_date_str and ":" in raw and "." not in raw:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")
        else:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ß–ß:–ú–ú –µ—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –∑–∞–¥–∞–Ω–∞"
            )


async def on_event_edit_time(message: Message, widget: TextInput, manager: DialogManager, data: str):
    from datetime import datetime as dt
    from datetime import time as dtime

    session_factory = manager.middleware_data.get("session_factory")
    ev = EventsManager(session_factory)
    eid = manager.dialog_data.get("selected_event_id")
    base_date_str = manager.dialog_data.get("edit_date")
    raw = (message.text or "").strip()
    if _is_cancel(raw):
        await message.answer("‚Ü©Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ")
        await manager.switch_to(Admin.event_details)
        return
    if not base_date_str:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É")
        await manager.switch_to(Admin.event_edit_datetime)
        return

    # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞—Ç—É –∏–∑ ISO —Å—Ç—Ä–æ–∫–∏
    try:
        base_date = dt.fromisoformat(base_date_str)
    except (ValueError, TypeError):
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –¥–∞—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ")
        await manager.switch_to(Admin.event_edit_datetime)
        return

    if raw and not _is_skip(raw) and raw.lower() not in {"–ø—É—Å—Ç–æ", "empty"}:
        try:
            hh, mm = raw.split(":", 1)
            hh_i, mm_i = int(hh), int(mm)
            result = base_date.replace(hour=hh_i, minute=mm_i, second=0, microsecond=0)
        except Exception:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")
            return
    else:
        result = base_date.replace(hour=0, minute=0, second=0, microsecond=0)
    await ev.update_event(eid, start_at=result)
    await message.answer("‚úÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    manager.dialog_data.pop("edit_date", None)  # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –¥–∞—Ç—É
    await manager.switch_to(Admin.event_details)


async def on_event_edit_location(message: Message, widget: TextInput, manager: DialogManager, data: str):
    session_factory = manager.middleware_data.get("session_factory")
    ev = EventsManager(session_factory)
    eid = manager.dialog_data.get("selected_event_id")
    raw = (message.text or "").strip()
    if _is_cancel(raw):
        await message.answer("‚Ü©Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ")
        await manager.switch_to(Admin.event_details)
        return
    if _is_skip(raw):
        await message.answer("‚Ü©Ô∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        await manager.switch_to(Admin.event_details)
        return
    if raw.lower() in {"–æ—á–∏—Å—Ç–∏—Ç—å", "clear"}:
        await ev.update_event(eid, location=None)
    else:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –ª–æ–∫–∞—Ü–∏–∏
        if len(raw) > 255:
            await message.answer("‚ùå –õ–æ–∫–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        await ev.update_event(eid, location=raw)
    await message.answer("‚úÖ –õ–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    await manager.switch_to(Admin.event_details)


async def on_event_edit_description(message: Message, widget: TextInput, manager: DialogManager, data: str):
    session_factory = manager.middleware_data.get("session_factory")
    ev = EventsManager(session_factory)
    eid = manager.dialog_data.get("selected_event_id")
    raw = (message.text or "").strip()
    if _is_cancel(raw):
        await message.answer("‚Ü©Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ")
        await manager.switch_to(Admin.event_details)
        return
    if _is_skip(raw):
        await message.answer("‚Ü©Ô∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        await manager.switch_to(Admin.event_details)
        return
    if raw.lower() in {"–æ—á–∏—Å—Ç–∏—Ç—å", "clear"}:
        await ev.update_event(eid, description=None)
    else:
        await ev.update_event(eid, description=raw)
    await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    await manager.switch_to(Admin.event_details)


async def on_event_edit_link(message: Message, widget: TextInput, manager: DialogManager, data: str):
    session_factory = manager.middleware_data.get("session_factory")
    ev = EventsManager(session_factory)
    eid = manager.dialog_data.get("selected_event_id")
    raw = (message.text or "").strip()
    if _is_cancel(raw):
        await message.answer("‚Ü©Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ")
        await manager.switch_to(Admin.event_details)
        return
    if _is_skip(raw):
        await message.answer("‚Ü©Ô∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        await manager.switch_to(Admin.event_details)
        return
    if raw.lower() in {"–æ—á–∏—Å—Ç–∏—Ç—å", "clear"}:
        await ev.update_event(eid, link=None)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å—Å—ã–ª–∫–∏
        if len(raw) > 512:
            await message.answer("‚ùå –°—Å—ã–ª–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 512 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ (–±–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è)
        if raw and not (raw.startswith("http://") or raw.startswith("https://") or raw.startswith("tg://")):
            await message.answer("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http://, https:// –∏–ª–∏ tg://")
        await ev.update_event(eid, link=raw)
    await message.answer("‚úÖ –°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    await manager.switch_to(Admin.event_details)


async def on_event_edit_image(message: Message, message_input: MessageInput, manager: DialogManager):
    session_factory = manager.middleware_data.get("session_factory")
    ev = EventsManager(session_factory)
    eid = manager.dialog_data.get("selected_event_id")
    file_id = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ
    if getattr(message, "photo", None):
        try:
            file_id = message.photo[-1].file_id
        except (IndexError, AttributeError):
            file_id = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç (–µ—Å–ª–∏ –Ω–µ —Ñ–æ—Ç–æ)
    if not file_id and getattr(message, "document", None):
        try:
            doc = message.document
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 20MB –¥–ª—è Telegram Bot API)
            if doc.file_size and doc.file_size > 20 * 1024 * 1024:
                await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 20MB)")
                return
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º MIME-type
            if (doc.mime_type or "").startswith("image/"):
                file_id = doc.file_id
            else:
                await message.answer("‚ùå –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
                return
        except Exception:
            file_id = None

    if not file_id:
        await message.answer("‚ùå –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º")
        return

    try:
        await ev.update_event(eid, image_file_id=file_id)
        await message.answer("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    await manager.switch_to(Admin.event_details)


async def on_category_create(message: Message, widget: TextInput, manager: DialogManager, data: str):
    session_factory = manager.middleware_data.get("session_factory")
    ev = EventsManager(session_factory)
    raw = (message.text or "").strip()
    if _is_cancel(raw):
        await message.answer("‚Ü©Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ")
        await manager.switch_to(Admin.categories_menu)
        return
    if not raw:
        await message.answer("‚ùå –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return
    name = raw
    parent_id = None
    if "|" in raw:
        try:
            name, parent_str = raw.split("|", 1)
            name = name.strip()
            parent_id = int(parent_str.strip()) if parent_str.strip() else None
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç parent_id. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º")
            return
    if not name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    if len(name) > 255:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    try:
        await ev.create_category(name=name, parent_id=parent_id)
        await message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await manager.switch_to(Admin.categories_menu)


async def on_event_create(message: Message, widget: TextInput, manager: DialogManager, data: str):
    from datetime import datetime as dt

    session_factory = manager.middleware_data.get("session_factory")
    ev = EventsManager(session_factory)
    raw = (message.text or "").strip()
    # –§–æ—Ä–º–∞—Ç: –ó–∞–≥–æ–ª–æ–≤–æ–∫|YYYY-MM-DD HH:MM|–õ–æ–∫–∞—Ü–∏—è|–ö–∞—Ç–µ–≥–æ—Ä–∏—èID|–°—Å—ã–ª–∫–∞
    try:
        if _is_cancel(raw):
            await message.answer("‚Ü©Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ")
            await manager.switch_to(Admin.events_menu)
            return
        parts = [p.strip() for p in raw.split("|")]
        title = parts[0]
        start_at = dt.strptime(parts[1], "%Y-%m-%d %H:%M") if len(parts) > 1 and parts[1] else None
        location = parts[2] if len(parts) > 2 else None
        link = parts[3] if len(parts) > 3 else None
        await ev.create_event(title=title, start_at=start_at, location=location, link=link)
        await message.answer("‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await manager.switch_to(Admin.events_menu)


# --- –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–ø–æ—à–∞–≥–æ–≤–æ) ---
async def on_cr_title(message: Message, widget: TextInput, manager: DialogManager, data: str):
    title = (message.text or "").strip()
    if _is_cancel(title):
        await message.answer("‚Ü©Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ")
        await manager.switch_to(Admin.events_menu)
        return
    if not title:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ")
        return
    if len(title) > 255:
        await message.answer("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    manager.dialog_data["cr_title"] = title
    await manager.switch_to(Admin.event_create_datetime)


async def on_cr_date(message: Message, widget: TextInput, manager: DialogManager, data: str):
    raw = (message.text or "").strip()
    if _is_cancel(raw):
        await message.answer("‚Ü©Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ")
        await manager.switch_to(Admin.events_menu)
        return
    if raw:
        try:
            from datetime import datetime as dt

            if " " in raw:
                d_part, t_part = raw.split(" ", 1)
                d_val = dt.strptime(d_part.strip(), "%d.%m.%Y")
                hh, mm = t_part.strip().split(":", 1)
                result_dt = d_val.replace(hour=int(hh), minute=int(mm), second=0, microsecond=0)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Å –≤—Ä–µ–º–µ–Ω–µ–º –∫–∞–∫ ISO —Å—Ç—Ä–æ–∫—É
                manager.dialog_data["cr_dt"] = result_dt.isoformat()
                manager.dialog_data["cr_time"] = (int(hh), int(mm))
            else:
                date_val = dt.strptime(raw, "%d.%m.%Y")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∫–∞–∫ ISO —Å—Ç—Ä–æ–∫—É –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                manager.dialog_data["cr_dt"] = date_val.isoformat()
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
            return
    else:
        manager.dialog_data["cr_dt"] = None
    # –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è, –∏–Ω–∞—á–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ª–æ–∫–∞—Ü–∏–∏
    if manager.dialog_data.get("cr_dt") and not manager.dialog_data.get("cr_time"):
        await manager.switch_to(Admin.event_create_time)
    else:
        await manager.switch_to(Admin.event_create_location)


async def on_cr_location(message: Message, widget: TextInput, manager: DialogManager, data: str):
    raw = (message.text or "").strip()
    if _is_cancel(raw):
        await message.answer("‚Ü©Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ")
        await manager.switch_to(Admin.events_menu)
        return
    if raw and len(raw) > 255:
        await message.answer("‚ùå –õ–æ–∫–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    manager.dialog_data["cr_loc"] = raw
    await manager.switch_to(Admin.event_create_description)


async def on_cr_desc(message: Message, widget: TextInput, manager: DialogManager, data: str):
    raw = (message.text or "").strip()
    if _is_cancel(raw):
        await message.answer("‚Ü©Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ")
        await manager.switch_to(Admin.events_menu)
        return
    manager.dialog_data["cr_desc"] = raw
    await manager.switch_to(Admin.event_create_link)


async def on_cr_link(message: Message, widget: TextInput, manager: DialogManager, data: str):
    txt = (message.text or "").strip()
    if _is_cancel(txt):
        await message.answer("‚Ü©Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ")
        await manager.switch_to(Admin.events_menu)
        return
    if txt.lower() in {"–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip", "-"}:
        manager.dialog_data["cr_link"] = ""
    else:
        if txt and len(txt) > 512:
            await message.answer("‚ùå –°—Å—ã–ª–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 512 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        if txt and not (txt.startswith("http://") or txt.startswith("https://") or txt.startswith("tg://")):
            await message.answer("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http://, https:// –∏–ª–∏ tg://")
        manager.dialog_data["cr_link"] = txt
    await manager.switch_to(Admin.event_create_confirm)


async def on_cr_time(message: Message, widget: TextInput, manager: DialogManager, data: str):
    raw = (message.text or "").strip()
    if _is_cancel(raw):
        await message.answer("‚Ü©Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ")
        await manager.switch_to(Admin.events_menu)
        return
    if _is_skip(raw) or raw.lower() in {"–ø—É—Å—Ç–æ", "empty"}:
        manager.dialog_data["cr_time"] = (0, 0)
        await manager.switch_to(Admin.event_create_location)
        return
    try:
        hh, mm = raw.split(":", 1)
        manager.dialog_data["cr_time"] = (int(hh), int(mm))
        await manager.switch_to(Admin.event_create_location)
    except Exception:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú, '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –∏–ª–∏ '–ø—É—Å—Ç–æ'")


async def on_cr_confirm(callback: CallbackQuery, button: Button, manager: DialogManager):
    session_factory = manager.middleware_data.get("session_factory")
    evm = EventsManager(session_factory)
    from datetime import datetime as dt

    title = manager.dialog_data.get("cr_title")
    date_str = manager.dialog_data.get("cr_dt")
    time_tuple = manager.dialog_data.get("cr_time") or (0, 0)

    if date_str is None:
        start_at = None
    else:
        try:
            # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞—Ç—É –∏–∑ ISO —Å—Ç—Ä–æ–∫–∏
            date_obj = dt.fromisoformat(date_str)
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ (–¥–∞—Ç–∞+–≤—Ä–µ–º—è), –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
            if date_obj.hour != 0 or date_obj.minute != 0:
                start_at = date_obj
            else:
                # –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è
                start_at = date_obj.replace(hour=time_tuple[0], minute=time_tuple[1], second=0, microsecond=0)
        except (ValueError, TypeError):
            start_at = None

    location = manager.dialog_data.get("cr_loc") or None
    description = manager.dialog_data.get("cr_desc") or None
    link = manager.dialog_data.get("cr_link") or None
    await evm.create_event(
        title=title,
        start_at=start_at,
        location=location,
        description=description,
        link=link,
        admin_id=callback.from_user.id,
    )
    await callback.answer("‚úÖ –°–æ–∑–¥–∞–Ω–æ")
    await manager.switch_to(Admin.events_menu)


async def on_event_show_image(callback: CallbackQuery, button: Button, manager: DialogManager):
    bot: Bot = manager.middleware_data.get("bot")
    session_factory = manager.middleware_data.get("session_factory")
    ev = EventsManager(session_factory)
    eid = manager.dialog_data.get("selected_event_id")
    item = await ev.get_event(eid) if eid else None
    if not item or not getattr(item, "image_file_id", None):
        await callback.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    text = f"<b>{item.title}</b>\n"
    if item.start_at:
        text += f"üóì {item.start_at.strftime('%d.%m.%Y %H:%M')}\n"
    if item.location:
        text += f"üìç {item.location}\n"

    if item.link:
        text += f"üîó {item.link}\n"
    if item.description:
        text += f"\n{item.description}"

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
        await bot.send_photo(callback.from_user.id, item.image_file_id, caption=text, parse_mode="HTML")
    except Exception:
        try:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∫–∞–∫ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–¥–ø–∏—Å—å—é
            await bot.send_document(
                callback.from_user.id,
                item.image_file_id,
                caption=text,
                parse_mode="HTML",
            )
        except Exception:
            # –ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç
            try:
                await bot.send_photo(callback.from_user.id, item.image_file_id)
                await bot.send_message(callback.from_user.id, text, parse_mode="HTML")
            except Exception:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", show_alert=True)


async def get_create_preview(dialog_manager: DialogManager, **kwargs):
    title = dialog_manager.dialog_data.get("cr_title")
    date_str = dialog_manager.dialog_data.get("cr_dt")
    time_tuple = dialog_manager.dialog_data.get("cr_time") or (0, 0)
    location = dialog_manager.dialog_data.get("cr_loc")
    description = dialog_manager.dialog_data.get("cr_desc")
    link = dialog_manager.dialog_data.get("cr_link")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    text_parts = ["<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä</b>\n"]

    # –ù–∞–∑–≤–∞–Ω–∏–µ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)
    if title:
        text_parts.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{title}</b>")

    # –î–∞—Ç–∞/–≤—Ä–µ–º—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)
    if date_str is not None:
        try:
            from datetime import datetime as dt

            date_obj = dt.fromisoformat(date_str)
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –¥–∞—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if date_obj.hour != 0 or date_obj.minute != 0:
                dt_text = date_obj.strftime("%d.%m.%Y %H:%M")
            else:
                # –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è
                dt_full = date_obj.replace(hour=time_tuple[0], minute=time_tuple[1], second=0, microsecond=0)
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è 00:00, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
                if dt_full.hour == 0 and dt_full.minute == 0:
                    dt_text = dt_full.strftime("%d.%m.%Y")
                else:
                    dt_text = dt_full.strftime("%d.%m.%Y %H:%M")
            text_parts.append(f"–î–∞—Ç–∞/–≤—Ä–µ–º—è: <b>{dt_text}</b>")
        except Exception:
            text_parts.append("–î–∞—Ç–∞/–≤—Ä–µ–º—è: <b>(–æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞)</b>")

    # –õ–æ–∫–∞—Ü–∏—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª—É–∂–µ–±–Ω—ã–º —Å–ª–æ–≤–æ–º)
    if location and not _is_empty_field(location):
        text_parts.append(f"–õ–æ–∫–∞—Ü–∏—è: <b>{location}</b>")

    # –°—Å—ã–ª–∫–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª—É–∂–µ–±–Ω—ã–º —Å–ª–æ–≤–æ–º)
    if link and not _is_empty_field(link):
        text_parts.append(f"–°—Å—ã–ª–∫–∞: <b>{link}</b>")

    # –û–ø–∏—Å–∞–Ω–∏–µ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª—É–∂–µ–±–Ω—ã–º —Å–ª–æ–≤–æ–º)
    if description and not _is_empty_field(description):
        text_parts.append(f"\n–û–ø–∏—Å–∞–Ω–∏–µ:\n{description}")

    return {"create_preview": "\n".join(text_parts)}


async def on_edit_fall_semester(callback: CallbackQuery, button: Button, manager: DialogManager):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –¥–∞—Ç—ã –æ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞."""
    await manager.switch_to(Admin.edit_fall_semester)


async def on_edit_spring_semester(callback: CallbackQuery, button: Button, manager: DialogManager):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –¥–∞—Ç—ã –≤–µ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞."""
    await manager.switch_to(Admin.edit_spring_semester)


async def on_fall_semester_input(message: Message, widget: TextInput, manager: DialogManager, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –æ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞."""
    try:
        from datetime import datetime

        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
        date_obj = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()

        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
        session_factory = manager.middleware_data.get("session_factory")
        settings_manager = SemesterSettingsManager(session_factory)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        current_settings = await settings_manager.get_semester_settings()
        spring_start = current_settings[1] if current_settings else date(2025, 2, 9)

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        success = await settings_manager.update_semester_settings(date_obj, spring_start, message.from_user.id)

        if success:
            await message.answer("‚úÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.09.2024)")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    await manager.switch_to(Admin.semester_settings)


async def on_spring_semester_input(message: Message, widget: TextInput, manager: DialogManager, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –≤–µ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞."""
    try:
        from datetime import datetime

        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
        date_obj = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()

        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
        session_factory = manager.middleware_data.get("session_factory")
        settings_manager = SemesterSettingsManager(session_factory)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        current_settings = await settings_manager.get_semester_settings()
        fall_start = current_settings[0] if current_settings else date(2024, 9, 1)

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        success = await settings_manager.update_semester_settings(fall_start, date_obj, message.from_user.id)

        if success:
            await message.answer("‚úÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤–µ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09.02.2025)")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    await manager.switch_to(Admin.semester_settings)


# --- –°–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ ---
async def build_segment_users(
    user_data_manager: UserDataManager,
    group_prefix: str | None,
    days_active: int | None,
):
    """–°—Ç—Ä–æ–∏—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π."""
    group_prefix_up = (group_prefix or "").upper().strip()
    all_ids = await user_data_manager.get_all_user_ids()
    selected_ids: list[int] = []
    from datetime import datetime as dt

    threshold = None
    if days_active and days_active > 0:
        threshold = dt.now(MOSCOW_TZ).replace(tzinfo=None) - timedelta(days=days_active)

    processed_count = 0
    for uid in all_ids:
        processed_count += 1
        info = await user_data_manager.get_full_user_info(uid)
        if not info:
            continue
        if group_prefix_up and not (info.group or "").upper().startswith(group_prefix_up):
            continue
        if threshold and (not info.last_active_date or info.last_active_date < threshold):
            continue
        selected_ids.append(uid)

        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º event loop –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—Ä—É–≥–∏—Ö —Å–æ–±—ã—Ç–∏–π
        if processed_count % 100 == 0:
            await asyncio.sleep(0)

    return selected_ids


def render_template(template_text: str, user_info) -> str:
    placeholders = {
        "user_id": str(user_info.user_id),
        "username": user_info.username or "N/A",
        "group": user_info.group or "N/A",
        "last_active": (user_info.last_active_date.strftime("%d.%m.%Y") if user_info.last_active_date else "N/A"),
    }
    text = template_text
    for key, value in placeholders.items():
        text = text.replace(f"{{{key}}}", value)
    return text


async def on_segment_criteria_input(message: Message, widget: TextInput, manager: DialogManager, data: str):
    dialog_data = manager.dialog_data
    # –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: PREFIX|DAYS (–Ω–∞–ø—Ä–∏–º–µ—Ä: –û7|7). –ü—É—Å—Ç–æ –¥–ª—è –≤—Å–µ—Ö
    raw = (message.text or "").strip()
    if "|" in raw:
        prefix, days_str = raw.split("|", 1)
        days = None
        try:
            days = int(days_str) if days_str.strip() else None
        except ValueError:
            days = None
        dialog_data["segment_group_prefix"] = prefix.strip()
        dialog_data["segment_days_active"] = days
    else:
        dialog_data["segment_group_prefix"] = raw
        dialog_data["segment_days_active"] = None
    await manager.switch_to(Admin.template_input)


async def on_template_input_message(message: Message, message_input: MessageInput, manager: DialogManager):
    if message.content_type == ContentType.TEXT:
        manager.dialog_data["segment_template"] = message.text or ""
        manager.dialog_data["segment_message_type"] = "text"
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞ –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
        manager.dialog_data.pop("segment_message_chat_id", None)
        manager.dialog_data.pop("segment_message_id", None)
    else:
        # –î–ª—è –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        manager.dialog_data["segment_message_type"] = "media"
        manager.dialog_data["segment_message_chat_id"] = message.chat.id
        manager.dialog_data["segment_message_id"] = message.message_id
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –µ—Å–ª–∏ –æ–Ω –±—ã–ª
        manager.dialog_data.pop("segment_template", None)
    await manager.switch_to(Admin.preview)


async def get_preview_data(dialog_manager: DialogManager, **kwargs):
    user_data_manager: UserDataManager = dialog_manager.middleware_data.get("user_data_manager")
    prefix = dialog_manager.dialog_data.get("segment_group_prefix")
    days_active = dialog_manager.dialog_data.get("segment_days_active")
    template = dialog_manager.dialog_data.get("segment_template", "")
    message_type = dialog_manager.dialog_data.get("segment_message_type", "text")
    users = await build_segment_users(user_data_manager, prefix, days_active)

    preview_text = ""
    if users and message_type == "text":
        info = await user_data_manager.get_full_user_info(users[0])
        preview_text = render_template(template, info)
    elif message_type == "media":
        preview_text = "üìé –ú–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–µ–≥–º–µ–Ω—Ç–∞"

    dialog_manager.dialog_data["segment_selected_ids"] = users
    return {
        "preview_text": preview_text or "(–Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–≤—å—é)",
        "selected_count": len(users),
    }


async def on_confirm_segment_send(callback: CallbackQuery, button: Button, manager: DialogManager):
    bot: Bot = manager.middleware_data.get("bot")
    admin_id = callback.from_user.id
    udm: UserDataManager = manager.middleware_data.get("user_data_manager")
    message_type = manager.dialog_data.get("segment_message_type", "text")
    user_ids = manager.dialog_data.get("segment_selected_ids", [])
    await callback.answer("üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–¥–∞—á –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
    async def _process_segment_broadcast():
        count = 0

        if message_type == "text":
            template = manager.dialog_data.get("segment_template", "")
            for uid in user_ids:
                info = await udm.get_full_user_info(uid)
                if not info:
                    continue
                text = render_template(template, info)
                send_message_task.send(uid, text)
                TASKS_SENT_TO_QUEUE.labels(actor_name="send_message_task").inc()
                count += 1

                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —É—Å—Ç—É–ø–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ event loop
                if count % 50 == 0:
                    await asyncio.sleep(0)
        else:  # media
            from_chat_id = manager.dialog_data.get("segment_message_chat_id")
            message_id = manager.dialog_data.get("segment_message_id")
            if from_chat_id and message_id:
                for uid in user_ids:
                    copy_message_task.send(uid, from_chat_id, message_id)
                    TASKS_SENT_TO_QUEUE.labels(actor_name="copy_message_task").inc()
                    count += 1

                    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —É—Å—Ç—É–ø–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ event loop
                    if count % 50 == 0:
                        await asyncio.sleep(0)

        message_type_text = "—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö" if message_type == "text" else "–º–µ–¥–∏–∞"
        await bot.send_message(
            admin_id,
            f"‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ {message_type_text} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É –∑–∞–ø—É—â–µ–Ω–∞. –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {count}",
        )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(_process_segment_broadcast())

    # –°—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
    await manager.switch_to(Admin.menu)


async def on_period_selected(callback: CallbackQuery, widget: Select, manager: DialogManager, item_id: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥ –≤ `dialog_data` –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É."""
    manager.dialog_data["stats_period"] = int(item_id)


async def get_stats_data(dialog_manager: DialogManager, **kwargs):
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    user_data_manager: UserDataManager = dialog_manager.middleware_data.get("user_data_manager")
    period = dialog_manager.dialog_data.get("stats_period", 7)

    (
        total_users,
        dau,
        wau,
        mau,
        subscribed_total,
        unsubscribed_total,
        subs_breakdown,
        top_groups,
        group_dist,
    ) = await asyncio.gather(
        user_data_manager.get_total_users_count(),
        user_data_manager.get_active_users_by_period(days=1),
        user_data_manager.get_active_users_by_period(days=7),
        user_data_manager.get_active_users_by_period(days=30),
        user_data_manager.get_subscribed_users_count(),
        user_data_manager.get_unsubscribed_count(),
        user_data_manager.get_subscription_breakdown(),
        user_data_manager.get_top_groups(limit=5),
        user_data_manager.get_group_distribution(),
    )
    new_users = await user_data_manager.get_new_users_count(days=period)
    active_users = await user_data_manager.get_active_users_by_period(days=period)

    period_map = {1: "–î–µ–Ω—å", 7: "–ù–µ–¥–µ–ª—è", 30: "–ú–µ—Å—è—Ü"}

    top_groups_text = "\n".join([f"  - {g or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}: {c}" for g, c in top_groups])
    subs_breakdown_text = (
        f"  - –í–µ—á–µ—Ä: {subs_breakdown.get('evening', 0)}\n"
        f"  - –£—Ç—Ä–æ: {subs_breakdown.get('morning', 0)}\n"
        f"  - –ü–∞—Ä—ã: {subs_breakdown.get('reminders', 0)}"
    )
    group_dist_text = "\n".join([f"  - {category}: {count}" for category, count in group_dist.items()])

    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b> (–ü–µ—Ä–∏–æ–¥: <b>{period_map.get(period, '')}</b>)\n\n"
        f"üë§ <b>–û–±—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞</b>\n"
        f"  - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
        f"  - –ù–æ–≤—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥: <b>{new_users}</b>\n\n"
        f"üèÉ‚Äç‚ôÇÔ∏è <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>\n"
        f"  - –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥: <b>{active_users}</b>\n"
        f"  - DAU / WAU / MAU: <b>{dau} / {wau} / {mau}</b>\n\n"
        f"üîî <b>–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å</b>\n"
        f"  - –° –ø–æ–¥–ø–∏—Å–∫–∞–º–∏: <b>{subscribed_total}</b>\n"
        f"  - –û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤—Å–µ–≥–æ: <b>{unsubscribed_total}</b>\n"
        f"  <u>–†–∞–∑–±–∏–≤–∫–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º:</u>\n{subs_breakdown_text}\n\n"
        f"üéì <b>–ì—Ä—É–ø–ø—ã</b>\n"
        f"  <u>–¢–æ–ø-5 –≥—Ä—É–ø–ø:</u>\n{top_groups_text}\n"
        f"  <u>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É:</u>\n{group_dist_text}"
    )

    return {
        "stats_text": stats_text,
        "period": period,
        "periods": [("–î–µ–Ω—å", 1), ("–ù–µ–¥–µ–ª—è", 7), ("–ú–µ—Å—è—Ü", 30)],
    }


async def on_broadcast_received(*args, **kwargs):
    # Support both aiogram-dialog callback signature (message, message_input, manager)
    # and test signature (message, manager)
    if len(args) == 2:
        message, manager = args
    elif len(args) == 3:
        message, _message_input, manager = args
    else:
        # Fallback for unexpected signature
        message = kwargs.get("message")
        manager = kwargs.get("manager")

    bot: Bot = manager.middleware_data.get("bot")
    admin_id = message.from_user.id
    user_data_manager: UserDataManager = manager.middleware_data.get("user_data_manager")

    if message.content_type == ContentType.TEXT:
        template = message.text
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = await user_data_manager.get_all_user_ids()
        await message.reply("üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–¥–∞—á –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
        async def _process_broadcast():
            sent_count = 0
            for user_id in all_users:
                user_info = await user_data_manager.get_full_user_info(user_id)
                if not user_info:
                    continue
                text = render_template(template, user_info)
                send_message_task.send(user_id, text)
                TASKS_SENT_TO_QUEUE.labels(actor_name="send_message_task").inc()
                sent_count += 1

                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —É—Å—Ç—É–ø–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ event loop
                if sent_count % 50 == 0:
                    await asyncio.sleep(0)

            await bot.send_message(admin_id, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {sent_count}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(_process_broadcast())

        # –°—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
        await manager.switch_to(Admin.menu)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞: –°—Ç–∞–≤–∏–º –∑–∞–¥–∞—á–∏ –Ω–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        all_users = await user_data_manager.get_all_user_ids()
        await message.reply(f"üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–¥–∞—á –Ω–∞ –º–µ–¥–∏–∞-—Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–¥–∞—á –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
        async def _process_media_broadcast():
            try:
                count = 0
                for user_id in all_users:
                    copy_message_task.send(user_id, message.chat.id, message.message_id)
                    TASKS_SENT_TO_QUEUE.labels(actor_name="copy_message_task").inc()
                    count += 1

                    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —É—Å—Ç—É–ø–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ event loop
                    if count % 50 == 0:
                        await asyncio.sleep(0)

                await bot.send_message(admin_id, f"‚úÖ –ú–µ–¥–∏–∞-—Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {count}")
            except Exception as e:
                await bot.send_message(admin_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–µ–¥–∏–∞-—Ä–∞—Å—Å—ã–ª–∫–µ: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(_process_media_broadcast())

        # –°—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
        await manager.switch_to(Admin.menu)


async def on_user_id_input(message: Message, widget: TextInput, manager: DialogManager, data: str):
    try:
        user_id = int(message.text)
    except ValueError:
        await message.answer("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    user_data_manager: UserDataManager = manager.middleware_data.get("user_data_manager")
    user_info = await user_data_manager.get_full_user_info(user_id)

    if not user_info:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{user_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        return

    manager.dialog_data["found_user_info"] = {
        "user_id": user_info.user_id,
        "username": user_info.username,
        "group": user_info.group,
        "reg_date": user_info.registration_date.strftime("%Y-%m-%d %H:%M"),
        "last_active": user_info.last_active_date.strftime("%Y-%m-%d %H:%M"),
    }
    await manager.switch_to(Admin.user_manage)


async def on_new_group_input(message: Message, widget: TextInput, manager: DialogManager, data: str):
    new_group = message.text.upper()
    timetable_manager: TimetableManager = manager.middleware_data.get("manager")

    if new_group not in timetable_manager._schedules:
        await message.answer(f"‚ùå –ì—Ä—É–ø–ø–∞ <b>{new_group}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.")
        return

    user_id = manager.dialog_data["found_user_info"]["user_id"]
    user_data_manager: UserDataManager = manager.middleware_data.get("user_data_manager")

    await user_data_manager.set_user_group(user_id, new_group)
    await message.answer(f"‚úÖ –ì—Ä—É–ø–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code> —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{new_group}</b>.")

    manager.dialog_data["found_user_info"]["group"] = new_group
    await manager.switch_to(Admin.user_manage)


async def get_user_manage_data(dialog_manager: DialogManager, **kwargs):
    user_info = dialog_manager.dialog_data.get("found_user_info", {})
    if not user_info:
        return {}

    return {
        "user_info_text": (
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{user_info.get('user_id')}</code> (@{user_info.get('username')})\n"
            f"üéì <b>–ì—Ä—É–ø–ø–∞:</b> {user_info.get('group') or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\n"
            f"üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {user_info.get('reg_date')}\n"
            f"üèÉ‚Äç‚ôÇÔ∏è <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {user_info.get('last_active')}"
        )
    }


async def get_semester_settings_data(dialog_manager: DialogManager, **kwargs):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ–º–µ—Å—Ç—Ä–æ–≤."""
    session_factory = dialog_manager.middleware_data.get("session_factory")
    if not session_factory:
        return {"semester_settings_text": "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."}

    settings_manager = SemesterSettingsManager(session_factory)
    settings_text = await settings_manager.get_formatted_settings()

    return {"semester_settings_text": settings_text}


async def on_clear_cache(callback: CallbackQuery, button: Button, manager: DialogManager):
    bot: Bot = manager.middleware_data.get("bot")
    admin_id = callback.from_user.id

    await callback.answer("üßπ –û—á–∏—â–∞—é –∫—ç—à –∫–∞—Ä—Ç–∏–Ω–æ–∫...")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ –¥–æ –æ—á–∏—Å—Ç–∫–∏
    cache_info_before = await get_cache_info()

    # –û—á–∏—â–∞–µ–º –∫—ç—à
    await cleanup_old_cache()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
    cache_info_after = await get_cache_info()

    if "error" in cache_info_before or "error" in cache_info_after:
        await bot.send_message(admin_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫—ç—à–µ–º")
        return

    freed_space = cache_info_before["total_size_mb"] - cache_info_after["total_size_mb"]
    freed_files = cache_info_before["total_files"] - cache_info_after["total_files"]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Ñ–∞–π–ª–æ–≤)
    files_before = cache_info_before.get("files", [])
    files_after = cache_info_after.get("files", [])

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤
    files_to_show = files_before[:5]
    files_text_before = "\n".join([f"   ‚Ä¢ {f}" for f in files_to_show]) if files_to_show else "   ‚Ä¢ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤"
    if len(files_before) > 5:
        files_text_before += f"\n   ... –∏ –µ—â–µ {len(files_before) - 5} —Ñ–∞–π–ª–æ–≤"

    files_text_after = "\n".join([f"   ‚Ä¢ {f}" for f in files_after]) if files_after else "   ‚Ä¢ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Redis –∫—ç—à–µ
    redis_before = cache_info_before.get("redis_keys", 0)
    redis_after = cache_info_after.get("redis_keys", 0)
    redis_freed = redis_before - redis_after

    message = (
        f"‚úÖ <b>–ö—ç—à –æ—á–∏—â–µ–Ω!</b>\n\n"
        f"üìä <b>–î–æ –æ—á–∏—Å—Ç–∫–∏:</b>\n"
        f"   ‚Ä¢ –§–∞–π–ª–æ–≤: {cache_info_before['total_files']}\n"
        f"   ‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤: {cache_info_before['total_size_mb']} MB\n"
        f"   ‚Ä¢ Redis –∫–ª—é—á–µ–π: {redis_before}\n"
        f"   ‚Ä¢ –§–∞–π–ª—ã:\n{files_text_before}\n\n"
        f"üßπ <b>–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:</b>\n"
        f"   ‚Ä¢ –§–∞–π–ª–æ–≤: {cache_info_after['total_files']}\n"
        f"   ‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤: {cache_info_after['total_size_mb']} MB\n"
        f"   ‚Ä¢ Redis –∫–ª—é—á–µ–π: {redis_after}\n\n"
        f"üíæ <b>–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ:</b>\n"
        f"   ‚Ä¢ –§–∞–π–ª–æ–≤: {freed_files}\n"
        f"   ‚Ä¢ –ú–µ—Å—Ç–∞: {freed_space} MB\n"
        f"   ‚Ä¢ Redis –∫–ª—é—á–µ–π: {redis_freed}"
    )

    await bot.send_message(admin_id, message, parse_mode="HTML")


async def on_cancel_generation(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω—è–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
    admin_id = callback.from_user.id

    if admin_id in active_generations:
        active_generations[admin_id]["cancelled"] = True
        await callback.answer("‚èπÔ∏è –û—Ç–º–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            status_msg_id = active_generations[admin_id]["status_msg_id"]
            await callback.message.edit_text(
                "‚èπÔ∏è <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n" "–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
                parse_mode="HTML",
            )
        except:
            pass

        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        del active_generations[admin_id]
    else:
        await callback.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã")


# --- –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
async def on_send_message_to_user(callback: CallbackQuery, button: Button, manager: DialogManager):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    await manager.switch_to(Admin.send_message_text)


async def on_message_to_user_input(message: Message, message_input: MessageInput, manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    bot: Bot = manager.middleware_data.get("bot")
    user_id = manager.dialog_data.get("found_user_info", {}).get("user_id")

    if not user_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await manager.switch_to(Admin.enter_user_id)
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if message.content_type == ContentType.TEXT:
            await bot.send_message(user_id, message.text)
        else:
            # –ö–æ–ø–∏—Ä—É–µ–º –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.copy_message(
                chat_id=user_id,
                from_chat_id=message.chat.id,
                message_id=message.message_id,
            )

        await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        await manager.switch_to(Admin.user_manage)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")


admin_dialog = Dialog(
    # –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω: —Ä–∞–∑–¥–µ–ª—ã
    Window(
        Const("üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"),
        Row(
            SwitchTo(
                Const("üì¨ –†–∞—Å—Å—ã–ª–∫–∏"),
                id="section_broadcasts",
                state=Admin.broadcast_menu,
            ),
            SwitchTo(
                Const("üß™ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"),
                id="section_diagnostics",
                state=Admin.diagnostics_menu,
            ),
        ),
        Row(
            SwitchTo(Const("üßπ –ö—ç—à –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"), id="section_cache", state=Admin.cache_menu),
            SwitchTo(
                Const("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
                id="section_settings",
                state=Admin.semester_settings,
            ),
        ),
        Row(
            SwitchTo(Const("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), id="section_users", state=Admin.enter_user_id),
            SwitchTo(Const("üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"), id="section_events", state=Admin.events_menu),
        ),
        Row(
            SwitchTo(Const("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), id=WidgetIds.STATS, state=Admin.stats),
        ),
        state=Admin.menu,
    ),
    # –†–∞–∑–¥–µ–ª: –†–∞—Å—Å—ã–ª–∫–∏
    Window(
        Const("üì¨ –†–∞–∑–¥–µ–ª ‚Äò–†–∞—Å—Å—ã–ª–∫–∏‚Äô"),
        SwitchTo(Const("üì£ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"), id="go_broadcast", state=Admin.broadcast),
        SwitchTo(Const("üéØ –°–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è"), id="go_segment", state=Admin.segment_menu),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª–∞–º"), id="back_sections_broadcasts", state=Admin.menu),
        state=Admin.broadcast_menu,
    ),
    # –†–∞–∑–¥–µ–ª: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    Window(
        Const("üß™ –†–∞–∑–¥–µ–ª ‚Äò–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞‚Äô"),
        Button(
            Const("‚öôÔ∏è –¢–µ—Å—Ç —É—Ç—Ä–µ–Ω–Ω–µ–π"),
            id=WidgetIds.TEST_MORNING,
            on_click=on_test_morning,
        ),
        Button(
            Const("‚öôÔ∏è –¢–µ—Å—Ç –≤–µ—á–µ—Ä–Ω–µ–π"),
            id=WidgetIds.TEST_EVENING,
            on_click=on_test_evening,
        ),
        Button(
            Const("üß™ –¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"),
            id=WidgetIds.TEST_REMINDERS,
            on_click=on_test_reminders_for_week,
        ),
        Button(Const("üß™ –¢–µ—Å—Ç –∞–ª—ë—Ä—Ç–∞"), id="test_alert2", on_click=on_test_alert),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª–∞–º"), id="back_sections_diag", state=Admin.menu),
        state=Admin.diagnostics_menu,
    ),
    # –†–∞–∑–¥–µ–ª: –ö—ç—à –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    Window(
        Const("üßπ –†–∞–∑–¥–µ–ª '–ö—ç—à –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è'"),
        Button(Const("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –∫–∞—Ä—Ç–∏–Ω–æ–∫"), id="clear_cache2", on_click=on_clear_cache),
        Button(
            Const("üë• –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø—É—Å—Ç–∏–≤—à–∏–µ—Å—è –≥—Ä—É–ø–ø—ã"),
            id="check_graduated2",
            on_click=on_check_graduated_groups,
        ),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª–∞–º"), id="back_sections_cache", state=Admin.menu),
        state=Admin.cache_menu,
    ),
    Window(
        Format("{stats_text}"),
        Row(
            Select(
                Jinja("{% if item[1] == period %}" "üîò {{ item[0] }}" "{% else %}" "‚ö™Ô∏è {{ item[0] }}" "{% endif %}"),
                id="select_stats_period",
                item_id_getter=lambda item: str(item[1]),
                items="periods",
                on_click=on_period_selected,
            )
        ),
        SwitchTo(Const("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"), id="stats_back", state=Admin.menu),
        getter=get_stats_data,
        state=Admin.stats,
        parse_mode="HTML",
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PREFIX|DAYS (–Ω–∞–ø—Ä–∏–º–µ—Ä: –û7|7). –ü—É—Å—Ç–æ ‚Äî –≤—Å–µ."),
        TextInput(id="segment_input", on_success=on_segment_criteria_input),
        SwitchTo(Const("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"), id="segment_back", state=Admin.menu),
        state=Admin.segment_menu,
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã: {user_id}, {username}, {group}"),
        MessageInput(on_template_input_message, content_types=[ContentType.TEXT]),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="template_back", state=Admin.segment_menu),
        state=Admin.template_input,
    ),
    Window(
        Format("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (1-–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å):\n\n{preview_text}\n\n–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {selected_count}"),
        Button(
            Const("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"),
            id="confirm_segment_send",
            on_click=on_confirm_segment_send,
        ),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="preview_back", state=Admin.template_input),
        getter=get_preview_data,
        state=Admin.preview,
        parse_mode="HTML",
    ),
    Window(
        Const(
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä. –î–ª—è —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã: {user_id}, {username}, {group}"
        ),
        MessageInput(on_broadcast_received, content_types=[ContentType.ANY]),
        SwitchTo(Const("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"), id="broadcast_back", state=Admin.menu),
        state=Admin.broadcast,
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"),
        TextInput(id="input_user_id", on_success=on_user_id_input),
        SwitchTo(Const("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"), id="user_id_back", state=Admin.menu),
        state=Admin.enter_user_id,
    ),
    Window(
        Format("{user_info_text}"),
        Row(
            SwitchTo(
                Const("üîÑ –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É"),
                id="change_group",
                state=Admin.change_group_confirm,
            ),
            Button(
                Const("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"),
                id="send_msg",
                on_click=on_send_message_to_user,
            ),
        ),
        SwitchTo(Const("‚óÄÔ∏è –ù–æ–≤—ã–π –ø–æ–∏—Å–∫"), id="back_to_user_search", state=Admin.enter_user_id),
        state=Admin.user_manage,
        getter=get_user_manage_data,
        parse_mode="HTML",
    ),
    Window(
        Const("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞):"),
        MessageInput(on_message_to_user_input, content_types=[ContentType.ANY]),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="send_msg_back", state=Admin.user_manage),
        state=Admin.send_message_text,
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"),
        TextInput(id="input_new_group", on_success=on_new_group_input),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="change_group_back", state=Admin.user_manage),
        state=Admin.change_group_confirm,
    ),
    Window(
        Format("{semester_settings_text}"),
        Button(
            Const("üçÇ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Å–µ–Ω–Ω–∏–π —Å–µ–º–µ—Å—Ç—Ä"),
            id="edit_fall_semester",
            on_click=on_edit_fall_semester,
        ),
        Button(
            Const("üå∏ –ò–∑–º–µ–Ω–∏—Ç—å –≤–µ—Å–µ–Ω–Ω–∏–π —Å–µ–º–µ—Å—Ç—Ä"),
            id="edit_spring_semester",
            on_click=on_edit_spring_semester,
        ),
        SwitchTo(Const("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"), id="semester_back", state=Admin.menu),
        getter=get_semester_settings_data,
        state=Admin.semester_settings,
        parse_mode="HTML",
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.09.2024):"),
        TextInput(id="fall_semester_input", on_success=on_fall_semester_input),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="fall_semester_back", state=Admin.semester_settings),
        state=Admin.edit_fall_semester,
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤–µ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09.02.2025):"),
        TextInput(id="spring_semester_input", on_success=on_spring_semester_input),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="spring_semester_back", state=Admin.semester_settings),
        state=Admin.edit_spring_semester,
    ),
    # --- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∞–¥–º–∏–Ω) ---
    Window(
        Format("üóÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π</b>\n\n{categories_text}"),
        SwitchTo(Const("‚ûï –°–æ–∑–¥–∞—Ç—å"), id="cat_create", state=Admin.category_create),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="cat_back", state=Admin.menu),
        state=Admin.categories_menu,
        getter=get_categories_list,
        parse_mode="HTML",
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'). –î–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ|parent_id"),
        TextInput(id="cat_create_input", on_success=on_category_create),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="cat_create_back", state=Admin.categories_menu),
        state=Admin.category_create,
    ),
    # --- –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–∞–¥–º–∏–Ω) ---
    Window(
        Format(
            "üé´ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b> (–≤—Å–µ–≥–æ: {total_events})\n–°—Ç—Ä. {page}\n\nüîç –ü–æ–∏—Å–∫: –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞'/'–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è —Å–±—Ä–æ—Å–∞"
        ),
        Row(
            Button(
                Const("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ"),
                id="evt_filter_all",
                on_click=on_events_set_filter,
            ),
            Button(
                Const("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ"),
                id="evt_filter_pub",
                on_click=on_events_set_filter,
            ),
            Button(Const("–°–∫—Ä—ã—Ç—ã–µ"), id="evt_filter_hidden", on_click=on_events_set_filter),
        ),
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–º –≤–∏–¥–∂–µ—Ç–æ–º, –µ–≥–æ –Ω–µ–ª—å–∑—è –≤–∫–ª–∞–¥—ã–≤–∞—Ç—å –≤ Row
        TextInput(id="evt_search_input", on_success=on_events_search_input),
        Row(
            Button(Const("‚¨ÖÔ∏è"), id="evt_prev", on_click=on_events_prev, when="has_prev"),
            Button(Const("‚û°Ô∏è"), id="evt_next", on_click=on_events_next, when="has_next"),
        ),
        Column(
            Select(
                Format("{item[0]}"),
                id="admin_events_select",
                item_id_getter=lambda item: item[1],
                items="events_items",
                on_click=on_event_selected,
            ),
        ),
        Row(
            SwitchTo(Const("‚ûï –°–æ–∑–¥–∞—Ç—å"), id="evt_create", state=Admin.event_create_title),
            SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="evt_back", state=Admin.menu),
        ),
        state=Admin.events_menu,
        getter=get_events_list,
        parse_mode="HTML",
    ),
    Window(
        Format("{event_text}"),
        Row(
            Button(
                Const("üëÅÔ∏è/üôà –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å"),
                id="evt_toggle",
                on_click=on_event_toggle_publish,
            ),
        ),
        Row(
            Button(
                Const("üñº –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä"),
                id="evt_show_image",
                on_click=on_event_show_image,
                when="has_image",
            ),
        ),
        Row(
            SwitchTo(
                Const("üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫"),
                id="evt_quick_title",
                state=Admin.event_edit_title,
            ),
            SwitchTo(
                Const("üìÖ –î–∞—Ç–∞/–≤—Ä–µ–º—è"),
                id="evt_quick_dt",
                state=Admin.event_edit_datetime,
            ),
        ),
        Row(
            SwitchTo(Const("üìç –õ–æ–∫–∞—Ü–∏—è"), id="evt_quick_loc", state=Admin.event_edit_location),
        ),
        Row(
            SwitchTo(
                Const("üìù –û–ø–∏—Å–∞–Ω–∏–µ"),
                id="evt_quick_desc",
                state=Admin.event_edit_description,
            ),
            SwitchTo(Const("üîó –°—Å—ã–ª–∫–∞"), id="evt_quick_link", state=Admin.event_edit_link),
        ),
        Row(
            SwitchTo(Const("üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"), id="evt_quick_img", state=Admin.event_edit_image),
        ),
        Row(
            SwitchTo(
                Const("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"),
                id="evt_delete_confirm",
                state=Admin.event_delete_confirm,
            ),
            SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="evt_details_back", state=Admin.events_menu),
        ),
        state=Admin.event_details,
        getter=get_event_admin_details,
        parse_mode="HTML",
    ),
    Window(
        Const("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ."),
        Row(
            Button(Const("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å"), id="evt_delete", on_click=on_event_delete),
            SwitchTo(Const("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞"), id="evt_delete_cancel", state=Admin.event_details),
        ),
        state=Admin.event_delete_confirm,
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'):"),
        TextInput(id="evt_edit_title_input", on_success=on_event_edit_title),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="evt_edit_title_back", state=Admin.event_details),
        state=Admin.event_edit_title,
    ),
    Window(
        Const("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º. –ë—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω file_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."),
        MessageInput(on_event_edit_image, content_types=[ContentType.PHOTO, ContentType.DOCUMENT]),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="evt_edit_image_back", state=Admin.event_details),
        state=Admin.event_edit_image,
    ),
    Window(
        Const(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú, –∏–ª–∏ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –ß–ß:–ú–ú –µ—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –∑–∞–¥–∞–Ω–∞ (–ø—É—Å—Ç–æ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏, '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã):"
        ),
        TextInput(id="evt_edit_dt_input", on_success=on_event_edit_datetime),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="evt_edit_dt_back", state=Admin.event_details),
        state=Admin.event_edit_datetime,
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–∏–ª–∏ '–ø—É—Å—Ç–æ'/'–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è 00:00, –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞'):"),
        TextInput(id="evt_edit_time_input", on_success=on_event_edit_time),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="evt_edit_time_back", state=Admin.event_edit_datetime),
        state=Admin.event_edit_time,
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é (–∏–ª–∏ –ø—É—Å—Ç–æ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'):"),
        TextInput(id="evt_edit_loc_input", on_success=on_event_edit_location),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="evt_edit_loc_back", state=Admin.event_details),
        state=Admin.event_edit_location,
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –ø—É—Å—Ç–æ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'):"),
        TextInput(id="evt_edit_desc_input", on_success=on_event_edit_description),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="evt_edit_desc_back", state=Admin.event_details),
        state=Admin.event_edit_description,
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É (–∏–ª–∏ –ø—É—Å—Ç–æ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'):"),
        TextInput(id="evt_edit_link_input", on_success=on_event_edit_link),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="evt_edit_link_back", state=Admin.event_details),
        state=Admin.event_edit_link,
    ),
    Window(
        Const("–®–∞–≥ 1/6: –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'):"),
        TextInput(id="evt_cr_title", on_success=on_cr_title),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="evt_cr_title_back", state=Admin.events_menu),
        state=Admin.event_create_title,
    ),
    Window(
        Const("–®–∞–≥ 2/7: –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è –±–µ–∑ –¥–∞—Ç—ã, –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞'):"),
        TextInput(id="evt_cr_dt", on_success=on_cr_date),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="evt_cr_dt_back", state=Admin.event_create_title),
        state=Admin.event_create_datetime,
    ),
    Window(
        Const("–®–∞–≥ 3/7: –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'/'–ø—É—Å—Ç–æ' –¥–ª—è 00:00, –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞'):"),
        TextInput(id="evt_cr_time", on_success=on_cr_time),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="evt_cr_time_back", state=Admin.event_create_datetime),
        state=Admin.event_create_time,
    ),
    Window(
        Const("–®–∞–≥ 4/6: –í–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' / '–æ—á–∏—Å—Ç–∏—Ç—å', –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞'):"),
        TextInput(id="evt_cr_loc", on_success=on_cr_location),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="evt_cr_loc_back", state=Admin.event_create_time),
        state=Admin.event_create_location,
    ),
    Window(
        Const("–®–∞–≥ 5/6: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' / '–æ—á–∏—Å—Ç–∏—Ç—å', –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞'):"),
        TextInput(id="evt_cr_desc", on_success=on_cr_desc),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="evt_cr_desc_back", state=Admin.event_create_location),
        state=Admin.event_create_description,
    ),
    Window(
        Const("–®–∞–≥ 6/6: –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' / '–æ—á–∏—Å—Ç–∏—Ç—å', –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞'):"),
        TextInput(id="evt_cr_link", on_success=on_cr_link),
        SwitchTo(
            Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
            id="evt_cr_link_back",
            state=Admin.event_create_description,
        ),
        state=Admin.event_create_link,
    ),
    Window(
        Format("{create_preview}"),
        Row(
            Button(Const("‚úÖ –°–æ–∑–¥–∞—Ç—å"), id="evt_cr_confirm", on_click=on_cr_confirm),
            SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="evt_cr_conf_back", state=Admin.event_create_link),
        ),
        state=Admin.event_create_confirm,
        getter=get_create_preview,
        parse_mode="HTML",
    ),
)
