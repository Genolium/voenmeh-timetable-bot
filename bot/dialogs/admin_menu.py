from aiogram.types import Message, ContentType, CallbackQuery
from aiogram import Bot 
from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.text import Const, Format
from aiogram_dialog.widgets.kbd import Button, SwitchTo, Back

from bot.scheduler import morning_summary_broadcast, evening_broadcast
from bot.tasks import copy_message_task 
from core.user_data import UserDataManager
from core.metrics import TASKS_SENT_TO_QUEUE

from .states import Admin 


async def on_test_morning(callback: CallbackQuery, button: Button, manager: DialogManager):
    user_data_manager = manager.middleware_data.get("user_data_manager")
    await callback.answer("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–¥–∞—á –Ω–∞ —É—Ç—Ä–µ–Ω–Ω—é—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    await morning_summary_broadcast(user_data_manager) 
    await callback.message.answer("‚úÖ –ó–∞–¥–∞—á–∏ –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å.")


async def on_test_evening(callback: CallbackQuery, button: Button, manager: DialogManager):
    user_data_manager = manager.middleware_data.get("user_data_manager")
    await callback.answer("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–¥–∞—á –Ω–∞ –≤–µ—á–µ—Ä–Ω—é—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    await evening_broadcast(user_data_manager)
    await callback.message.answer("‚úÖ –ó–∞–¥–∞—á–∏ –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å.")


async def get_stats_data(user_data_manager: UserDataManager, **kwargs):
    total_users = await user_data_manager.get_total_users_count()
    new_today = await user_data_manager.get_new_users_count(days=1)
    new_week = await user_data_manager.get_new_users_count(days=7)
    
    active_day = await user_data_manager.get_active_users_by_period(days=1)
    active_week = await user_data_manager.get_active_users_by_period(days=7)
    active_month = await user_data_manager.get_active_users_by_period(days=30)
    
    subscribed_users = await user_data_manager.get_subscribed_users_count()

    top_groups = await user_data_manager.get_top_groups(limit=5)
    top_groups_text = "\n".join([f"  - {group or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}: {count}" for group, count in top_groups])
    if not top_groups_text:
        top_groups_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
        f"<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n"
        f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
        f"üìà –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: <b>{new_today}</b>\n"
        f"üìà –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: <b>{new_week}</b>\n\n"
        f"<b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
        f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å: <b>{active_day}</b>\n"
        f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: <b>{active_week}</b>\n"
        f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü: <b>{active_month}</b>\n\n"
        f"<b>–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å:</b>\n"
        f"üîî –° –ø–æ–¥–ø–∏—Å–∫–∞–º–∏: <b>{subscribed_users}</b>\n\n"
        f"üèÜ <b>–¢–æ–ø-5 –≥—Ä—É–ø–ø:</b>\n{top_groups_text}"
    )
    return {"stats_text": stats_text}

async def on_broadcast_received(message: Message, message_input: MessageInput, manager: DialogManager):
    bot: Bot = manager.middleware_data.get("bot") 
    user_data_manager: UserDataManager = manager.middleware_data.get("user_data_manager")

    try:
        all_users = await user_data_manager.get_all_user_ids()
        queued_count, failed_to_queue_count = 0, 0
        
        admin_chat_id = message.from_user.id
        original_chat_id = message.chat.id 
        original_message_id = message.message_id

        await bot.send_message(admin_chat_id, f"üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–¥–∞—á –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

        for user_id in all_users:
            try:
                copy_message_task.send(user_id, original_chat_id, original_message_id)
                TASKS_SENT_TO_QUEUE.labels(actor_name='copy_message_task').inc() 
                queued_count += 1
            except Exception as e:
                logging.error(f"Failed to queue broadcast message for user {user_id}: {e}")
                failed_to_queue_count += 1
        
        await bot.send_message(
            admin_chat_id,
            f"‚úÖ –ó–∞–¥–∞—á–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å!\n"
            f"üëç –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {queued_count}\n"
            f"üëé –û—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {failed_to_queue_count}\n\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –≤ –ª–æ–≥–∞—Ö worker-–∞ Dramatiq."
        )
    except Exception as e:
        await bot.send_message(admin_chat_id, f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
    
    await manager.done()

admin_dialog = Dialog(
    Window(
        Const("üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"),
        SwitchTo(Const("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), id="stats", state=Admin.stats), # –¢–µ–ø–µ—Ä—å Admin.stats –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
        SwitchTo(Const("üì£ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"), id="broadcast", state=Admin.broadcast),
        Button(Const("‚öôÔ∏è –¢–µ—Å—Ç —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏"), id="test_morning", on_click=on_test_morning),
        Button(Const("‚öôÔ∏è –¢–µ—Å—Ç –≤–µ—á–µ—Ä–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏"), id="test_evening", on_click=on_test_evening),
        state=Admin.menu
    ),
    Window(
        Format("{stats_text}"),
        Back(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥")),
        getter=get_stats_data,
        state=Admin.stats
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä."),
        MessageInput(on_broadcast_received, content_types=[ContentType.ANY]),
        Back(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥")),
        state=Admin.broadcast
    )
)