import asyncio
import random
from datetime import datetime, time, timedelta, date
import os
from pathlib import Path

from aiogram import Bot
from aiogram.types import CallbackQuery, Message, ContentType
from aiogram_dialog import Dialog, DialogManager, Window
from aiogram_dialog.widgets.input import MessageInput, TextInput
from aiogram_dialog.widgets.kbd import Back, Button, Select, Row, SwitchTo
from aiogram_dialog.widgets.text import Const, Format, Jinja

from bot.tasks import copy_message_task, send_message_task
from bot.scheduler import morning_summary_broadcast, evening_broadcast
from bot.text_formatters import generate_reminder_text
from core.manager import TimetableManager
from core.metrics import TASKS_SENT_TO_QUEUE
from core.user_data import UserDataManager
from core.semester_settings import SemesterSettingsManager
from bot.dialogs.schedule_view import cleanup_old_cache, get_cache_info
from core.image_cache_manager import ImageCacheManager
from core.image_generator import generate_schedule_image
from core.config import MEDIA_PATH

from .states import Admin
from .constants import WidgetIds

async def on_test_morning(callback: CallbackQuery, button: Button, manager: DialogManager):
    user_data_manager = manager.middleware_data.get("user_data_manager")
    timetable_manager = manager.middleware_data.get("manager")
    await callback.answer("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–¥–∞—á –Ω–∞ —É—Ç—Ä–µ–Ω–Ω—é—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    await morning_summary_broadcast(user_data_manager, timetable_manager)
    await callback.message.answer("‚úÖ –ó–∞–¥–∞—á–∏ –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å.")

async def on_test_evening(callback: CallbackQuery, button: Button, manager: DialogManager):
    user_data_manager = manager.middleware_data.get("user_data_manager")
    timetable_manager = manager.middleware_data.get("manager")
    await callback.answer("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–¥–∞—á –Ω–∞ –≤–µ—á–µ—Ä–Ω—é—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    await evening_broadcast(user_data_manager, timetable_manager)
    await callback.message.answer("‚úÖ –ó–∞–¥–∞—á–∏ –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å.")

async def on_test_reminders_for_week(callback: CallbackQuery, button: Button, manager: DialogManager):
    bot: Bot = manager.middleware_data.get("bot")
    admin_id = callback.from_user.id
    user_data_manager: UserDataManager = manager.middleware_data.get("user_data_manager")
    timetable_manager: TimetableManager = manager.middleware_data.get("manager")
    
    await callback.answer("üöÄ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
    
    test_users = await user_data_manager.get_users_for_lesson_reminders()
    if not test_users:
        await bot.send_message(admin_id, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞.")
        return
        
    test_user_id, test_group_name, _ = random.choice(test_users)
    await bot.send_message(admin_id, f"‚ÑπÔ∏è –¢–µ—Å—Ç–∏—Ä—É—é –ª–æ–≥–∏–∫—É –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{test_user_id}</code> (–≥—Ä—É–ø–ø–∞ <code>{test_group_name}</code>)")

    for i in range(7):
        test_date = date.today() + timedelta(days=i)
        await bot.send_message(admin_id, f"--- üóìÔ∏è <b>–¢–µ—Å—Ç –¥–ª—è –¥–∞—Ç—ã: {test_date.strftime('%A, %d.%m.%Y')}</b> ---")
        schedule_info = await timetable_manager.get_schedule_for_day(test_group_name, target_date=test_date)
        
        if not (schedule_info and not schedule_info.get('error') and schedule_info.get('lessons')):
            await bot.send_message(admin_id, "<i>–ù–µ—Ç –ø–∞—Ä ‚Äî –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. ‚úÖ</i>")
        else:
            try:
                pass
            except Exception as e:
                await bot.send_message(admin_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
    
    await bot.send_message(admin_id, "‚úÖ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ.</b>")

async def on_test_alert(callback: CallbackQuery, button: Button, manager: DialogManager):
    bot: Bot = manager.middleware_data.get("bot")
    admin_id = callback.from_user.id
    await callback.answer("üß™ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–π –∞–ª—ë—Ä—Ç...")
    text = (
        "ALERTMANAGER: FIRING (1 alert)\n\n"
        "‚ö†Ô∏è ScheduleStale [critical]\n"
        "No update > 1h\n"
        "source=scheduler\n"
        "startsAt=now"
    )
    await bot.send_message(admin_id, text)

async def on_generate_full_schedule(callback: CallbackQuery, button: Button, manager: DialogManager):
    """–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø."""
    bot: Bot = manager.middleware_data.get("bot")
    admin_id = callback.from_user.id
    user_data_manager = manager.middleware_data.get("user_data_manager")
    timetable_manager = manager.middleware_data.get("manager")
    redis_client = manager.middleware_data.get("redis_client")
    
    await callback.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
    await bot.send_message(admin_id, "üîÑ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ scheduler
        from bot.scheduler import generate_full_schedule_images
        await generate_full_schedule_images(user_data_manager, timetable_manager, redis_client)
        await bot.send_message(admin_id, "‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        await bot.send_message(admin_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        import traceback
        await bot.send_message(admin_id, f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n<code>{traceback.format_exc()}</code>")

async def on_check_graduated_groups(callback: CallbackQuery, button: Button, manager: DialogManager):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø—É—Å—Ç–∏–≤—à–∏—Ö—Å—è –≥—Ä—É–ø–ø."""
    bot: Bot = manager.middleware_data.get("bot")
    admin_id = callback.from_user.id
    user_data_manager = manager.middleware_data.get("user_data_manager")
    timetable_manager = manager.middleware_data.get("manager")
    redis_client = manager.middleware_data.get("redis_client")
    
    await callback.answer("üîç –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—ã–ø—É—Å—Ç–∏–≤—à–∏—Ö—Å—è –≥—Ä—É–ø–ø...")
    await bot.send_message(admin_id, "üîç –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—ã–ø—É—Å—Ç–∏–≤—à–∏—Ö—Å—è –≥—Ä—É–ø–ø...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ scheduler
        from bot.scheduler import handle_graduated_groups
        await handle_graduated_groups(user_data_manager, timetable_manager, redis_client)
        await bot.send_message(admin_id, "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø—É—Å—Ç–∏–≤—à–∏—Ö—Å—è –≥—Ä—É–ø–ø –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    except Exception as e:
        await bot.send_message(admin_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—ã–ø—É—Å—Ç–∏–≤—à–∏—Ö—Å—è –≥—Ä—É–ø–ø: {e}")
        import traceback
        await bot.send_message(admin_id, f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n<code>{traceback.format_exc()}</code>")

async def on_semester_settings(callback: CallbackQuery, button: Button, manager: DialogManager):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Å–µ–º–µ—Å—Ç—Ä–æ–≤."""
    await manager.switch_to(Admin.semester_settings)

async def on_edit_fall_semester(callback: CallbackQuery, button: Button, manager: DialogManager):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –¥–∞—Ç—ã –æ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞."""
    await manager.switch_to(Admin.edit_fall_semester)

async def on_edit_spring_semester(callback: CallbackQuery, button: Button, manager: DialogManager):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –¥–∞—Ç—ã –≤–µ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞."""
    await manager.switch_to(Admin.edit_spring_semester)

async def on_fall_semester_input(message: Message, widget: TextInput, manager: DialogManager, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –æ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞."""
    try:
        from datetime import datetime
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
        date_obj = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
        session_factory = manager.middleware_data.get("session_factory")
        settings_manager = SemesterSettingsManager(session_factory)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        current_settings = await settings_manager.get_semester_settings()
        spring_start = current_settings[1] if current_settings else date(2025, 2, 9)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        success = await settings_manager.update_semester_settings(
            date_obj, spring_start, message.from_user.id
        )
        
        if success:
            await message.answer("‚úÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.09.2024)")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await manager.switch_to(Admin.semester_settings)

async def on_spring_semester_input(message: Message, widget: TextInput, manager: DialogManager, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –≤–µ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞."""
    try:
        from datetime import datetime
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
        date_obj = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
        session_factory = manager.middleware_data.get("session_factory")
        settings_manager = SemesterSettingsManager(session_factory)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        current_settings = await settings_manager.get_semester_settings()
        fall_start = current_settings[0] if current_settings else date(2024, 9, 1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        success = await settings_manager.update_semester_settings(
            fall_start, date_obj, message.from_user.id
        )
        
        if success:
            await message.answer("‚úÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤–µ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09.02.2025)")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await manager.switch_to(Admin.semester_settings)

# --- –°–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ ---
async def build_segment_users(user_data_manager: UserDataManager, group_prefix: str | None, days_active: int | None):
    group_prefix_up = (group_prefix or "").upper().strip()
    all_ids = await user_data_manager.get_all_user_ids()
    selected_ids: list[int] = []
    from datetime import timezone
    from datetime import datetime as dt
    threshold = None
    if days_active and days_active > 0:
        threshold = dt.now(timezone.utc).replace(tzinfo=None) - timedelta(days=days_active)
    for uid in all_ids:
        info = await user_data_manager.get_full_user_info(uid)
        if not info:
            continue
        if group_prefix_up and not (info.group or "").upper().startswith(group_prefix_up):
            continue
        if threshold and (not info.last_active_date or info.last_active_date < threshold):
            continue
        selected_ids.append(uid)
    return selected_ids

def render_template(template_text: str, user_info) -> str:
    placeholders = {
        "user_id": str(user_info.user_id),
        "username": user_info.username or "N/A",
        "group": user_info.group or "N/A",
        "last_active": user_info.last_active_date.strftime("%d.%m.%Y") if user_info.last_active_date else "N/A",
    }
    text = template_text
    for key, value in placeholders.items():
        text = text.replace(f"{{{key}}}", value)
    return text

async def on_segment_criteria_input(message: Message, widget: TextInput, manager: DialogManager, data: str):
    dialog_data = manager.dialog_data
    # –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: PREFIX|DAYS (–Ω–∞–ø—Ä–∏–º–µ—Ä: –û7|7). –ü—É—Å—Ç–æ –¥–ª—è –≤—Å–µ—Ö
    raw = (message.text or "").strip()
    if "|" in raw:
        prefix, days_str = raw.split("|", 1)
        days = None
        try:
            days = int(days_str) if days_str.strip() else None
        except ValueError:
            days = None
        dialog_data['segment_group_prefix'] = prefix.strip()
        dialog_data['segment_days_active'] = days
    else:
        dialog_data['segment_group_prefix'] = raw
        dialog_data['segment_days_active'] = None
    await manager.switch_to(Admin.template_input)

async def on_template_input_message(message: Message, message_input: MessageInput, manager: DialogManager):
    manager.dialog_data['segment_template'] = message.text or ""
    await manager.switch_to(Admin.preview)

async def get_preview_data(dialog_manager: DialogManager, **kwargs):
    user_data_manager: UserDataManager = dialog_manager.middleware_data.get("user_data_manager")
    prefix = dialog_manager.dialog_data.get('segment_group_prefix')
    days_active = dialog_manager.dialog_data.get('segment_days_active')
    template = dialog_manager.dialog_data.get('segment_template', "")
    users = await build_segment_users(user_data_manager, prefix, days_active)
    preview_text = ""
    if users:
        info = await user_data_manager.get_full_user_info(users[0])
        preview_text = render_template(template, info)
    dialog_manager.dialog_data['segment_selected_ids'] = users
    return {
        "preview_text": preview_text or "(–Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–≤—å—é)",
        "selected_count": len(users)
    }

async def on_confirm_segment_send(callback: CallbackQuery, button: Button, manager: DialogManager):
    bot: Bot = manager.middleware_data.get("bot")
    admin_id = callback.from_user.id
    udm: UserDataManager = manager.middleware_data.get("user_data_manager")
    template = manager.dialog_data.get('segment_template', "")
    user_ids = manager.dialog_data.get('segment_selected_ids', [])
    await callback.answer("üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å...")
    count = 0
    for uid in user_ids:
        info = await udm.get_full_user_info(uid)
        if not info:
            continue
        text = render_template(template, info)
        send_message_task.send(uid, text)
        TASKS_SENT_TO_QUEUE.labels(actor_name='send_message_task').inc()
        count += 1
    await bot.send_message(admin_id, f"‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É –∑–∞–ø—É—â–µ–Ω–∞. –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {count}")
    await manager.switch_to(Admin.menu)

async def on_period_selected(callback: CallbackQuery, widget: Select, manager: DialogManager, item_id: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥ –≤ `dialog_data` –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É."""
    manager.dialog_data['stats_period'] = int(item_id)

async def get_stats_data(dialog_manager: DialogManager, **kwargs):
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    user_data_manager: UserDataManager = dialog_manager.middleware_data.get("user_data_manager")
    period = dialog_manager.dialog_data.get('stats_period', 7)
    
    total_users, dau, wau, mau, subscribed_total, unsubscribed_total, subs_breakdown, top_groups, group_dist = await asyncio.gather(
        user_data_manager.get_total_users_count(),
        user_data_manager.get_active_users_by_period(days=1),
        user_data_manager.get_active_users_by_period(days=7),
        user_data_manager.get_active_users_by_period(days=30),
        user_data_manager.get_subscribed_users_count(),
        user_data_manager.get_unsubscribed_count(),
        user_data_manager.get_subscription_breakdown(),
        user_data_manager.get_top_groups(limit=5),
        user_data_manager.get_group_distribution()
    )
    new_users = await user_data_manager.get_new_users_count(days=period)
    active_users = await user_data_manager.get_active_users_by_period(days=period)

    period_map = {1: "–î–µ–Ω—å", 7: "–ù–µ–¥–µ–ª—è", 30: "–ú–µ—Å—è—Ü"}
    
    top_groups_text = "\n".join([f"  - {g or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}: {c}" for g, c in top_groups])
    subs_breakdown_text = (
        f"  - –í–µ—á–µ—Ä: {subs_breakdown.get('evening', 0)}\n"
        f"  - –£—Ç—Ä–æ: {subs_breakdown.get('morning', 0)}\n"
        f"  - –ü–∞—Ä—ã: {subs_breakdown.get('reminders', 0)}"
    )
    group_dist_text = "\n".join([f"  - {category}: {count}" for category, count in group_dist.items()])

    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b> (–ü–µ—Ä–∏–æ–¥: <b>{period_map.get(period, '')}</b>)\n\n"
        f"üë§ <b>–û–±—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞</b>\n"
        f"  - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
        f"  - –ù–æ–≤—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥: <b>{new_users}</b>\n\n"
        f"üèÉ‚Äç‚ôÇÔ∏è <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>\n"
        f"  - –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥: <b>{active_users}</b>\n"
        f"  - DAU / WAU / MAU: <b>{dau} / {wau} / {mau}</b>\n\n"
        f"üîî <b>–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å</b>\n"
        f"  - –° –ø–æ–¥–ø–∏—Å–∫–∞–º–∏: <b>{subscribed_total}</b>\n"
        f"  - –û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤—Å–µ–≥–æ: <b>{unsubscribed_total}</b>\n"
        f"  <u>–†–∞–∑–±–∏–≤–∫–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º:</u>\n{subs_breakdown_text}\n\n"
        f"üéì <b>–ì—Ä—É–ø–ø—ã</b>\n"
        f"  <u>–¢–æ–ø-5 –≥—Ä—É–ø–ø:</u>\n{top_groups_text}\n"
        f"  <u>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É:</u>\n{group_dist_text}"
    )
    
    return {
        "stats_text": stats_text,
        "period": period,
        "periods": [("–î–µ–Ω—å", 1), ("–ù–µ–¥–µ–ª—è", 7), ("–ú–µ—Å—è—Ü", 30)]
    }

async def on_broadcast_received(message: Message, manager: DialogManager):
    bot: Bot = manager.middleware_data.get("bot")
    admin_id = message.from_user.id
    user_data_manager: UserDataManager = manager.middleware_data.get("user_data_manager")

    if message.content_type == ContentType.TEXT:
        template = message.text
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = await user_data_manager.get_all_user_ids()
        await message.reply("üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å...")

        sent_count = 0
        for user_id in all_users:
            user_info = await user_data_manager.get_full_user_info(user_id)
            if not user_info:
                continue
            text = render_template(template, user_info)
            send_message_task.send(user_id, text)
            TASKS_SENT_TO_QUEUE.labels(actor_name='send_message_task').inc()
            sent_count += 1

        await bot.send_message(admin_id, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {sent_count}")
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞: –°—Ç–∞–≤–∏–º –∑–∞–¥–∞—á–∏ –Ω–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        try:
            all_users = await user_data_manager.get_all_user_ids()
            await message.reply(f"üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–¥–∞—á –Ω–∞ –º–µ–¥–∏–∞-—Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

            count = 0
            for user_id in all_users:
                copy_message_task.send(user_id, message.chat.id, message.message_id)
                TASKS_SENT_TO_QUEUE.labels(actor_name='copy_message_task').inc()
                count += 1

            await bot.send_message(admin_id, f"‚úÖ –ú–µ–¥–∏–∞-—Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {count}")
        except Exception as e:
            await bot.send_message(admin_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–µ–¥–∏–∞-—Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
            # Assuming ERRORS_TOTAL is defined elsewhere or needs to be imported
            # ERRORS_TOTAL.labels(source='admin_broadcast').inc()

        await manager.switch_to(Admin.menu)

async def on_user_id_input(message: Message, widget: TextInput, manager: DialogManager, data: str):
    try:
        user_id = int(message.text)
    except ValueError:
        await message.answer("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    user_data_manager: UserDataManager = manager.middleware_data.get("user_data_manager")
    user_info = await user_data_manager.get_full_user_info(user_id)

    if not user_info:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{user_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        return
    
    manager.dialog_data['found_user_info'] = {
        'user_id': user_info.user_id,
        'username': user_info.username,
        'group': user_info.group,
        'reg_date': user_info.registration_date.strftime('%Y-%m-%d %H:%M'),
        'last_active': user_info.last_active_date.strftime('%Y-%m-%d %H:%M'),
    }
    await manager.switch_to(Admin.user_manage)

async def on_new_group_input(message: Message, widget: TextInput, manager: DialogManager, data: str):
    new_group = message.text.upper()
    timetable_manager: TimetableManager = manager.middleware_data.get("manager")

    if new_group not in timetable_manager._schedules:
        await message.answer(f"‚ùå –ì—Ä—É–ø–ø–∞ <b>{new_group}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.")
        return
    
    user_id = manager.dialog_data['found_user_info']['user_id']
    user_data_manager: UserDataManager = manager.middleware_data.get("user_data_manager")
    
    await user_data_manager.set_user_group(user_id, new_group)
    await message.answer(f"‚úÖ –ì—Ä—É–ø–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code> —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{new_group}</b>.")
    
    manager.dialog_data['found_user_info']['group'] = new_group
    await manager.switch_to(Admin.user_manage)

async def get_user_manage_data(dialog_manager: DialogManager, **kwargs):
    user_info = dialog_manager.dialog_data.get('found_user_info', {})
    if not user_info:
        return {}
    
    return {
        "user_info_text": (
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{user_info.get('user_id')}</code> (@{user_info.get('username')})\n"
            f"üéì <b>–ì—Ä—É–ø–ø–∞:</b> {user_info.get('group') or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\n"
            f"üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {user_info.get('reg_date')}\n"
            f"üèÉ‚Äç‚ôÇÔ∏è <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {user_info.get('last_active')}"
        )
    }

async def get_semester_settings_data(dialog_manager: DialogManager, **kwargs):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ–º–µ—Å—Ç—Ä–æ–≤."""
    session_factory = dialog_manager.middleware_data.get("session_factory")
    if not session_factory:
        return {"semester_settings_text": "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."}
    
    settings_manager = SemesterSettingsManager(session_factory)
    settings_text = await settings_manager.get_formatted_settings()
    
    return {"semester_settings_text": settings_text}

async def on_clear_cache(callback: CallbackQuery, button: Button, manager: DialogManager):
    bot: Bot = manager.middleware_data.get("bot")
    admin_id = callback.from_user.id
    
    await callback.answer("üßπ –û—á–∏—â–∞—é –∫—ç—à –∫–∞—Ä—Ç–∏–Ω–æ–∫...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ –¥–æ –æ—á–∏—Å—Ç–∫–∏
    cache_info_before = await get_cache_info()
    
    # –û—á–∏—â–∞–µ–º –∫—ç—à
    await cleanup_old_cache()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
    cache_info_after = await get_cache_info()
    
    if "error" in cache_info_before or "error" in cache_info_after:
        await bot.send_message(admin_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫—ç—à–µ–º")
        return
    
    freed_space = cache_info_before["total_size_mb"] - cache_info_after["total_size_mb"]
    freed_files = cache_info_before["total_files"] - cache_info_after["total_files"]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    files_before = cache_info_before.get('files', [])
    files_after = cache_info_after.get('files', [])
    
    files_text_before = "\n".join([f"   ‚Ä¢ {f}" for f in files_before]) if files_before else "   ‚Ä¢ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤"
    files_text_after = "\n".join([f"   ‚Ä¢ {f}" for f in files_after]) if files_after else "   ‚Ä¢ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤"
    
    message = (
        f"‚úÖ <b>–ö—ç—à –æ—á–∏—â–µ–Ω!</b>\n\n"
        f"üìä <b>–î–æ –æ—á–∏—Å—Ç–∫–∏:</b>\n"
        f"   ‚Ä¢ –§–∞–π–ª–æ–≤: {cache_info_before['total_files']}\n"
        f"   ‚Ä¢ –†–∞–∑–º–µ—Ä: {cache_info_before['total_size_mb']} MB\n"
        f"   ‚Ä¢ –§–∞–π–ª—ã:\n{files_text_before}\n\n"
        f"üßπ <b>–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:</b>\n"
        f"   ‚Ä¢ –§–∞–π–ª–æ–≤: {cache_info_after['total_files']}\n"
        f"   ‚Ä¢ –†–∞–∑–º–µ—Ä: {cache_info_after['total_size_mb']} MB\n"
        f"   ‚Ä¢ –§–∞–π–ª—ã:\n{files_text_after}\n\n"
        f"üíæ <b>–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ:</b>\n"
        f"   ‚Ä¢ –§–∞–π–ª–æ–≤: {freed_files}\n"
        f"   ‚Ä¢ –ú–µ—Å—Ç–∞: {freed_space} MB"
    )
    
    await bot.send_message(admin_id, message, parse_mode="HTML")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
active_generations = {}

async def on_generate_all_images(callback: CallbackQuery, button: Button, manager: DialogManager):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."""
    bot: Bot = manager.middleware_data.get("bot")
    admin_id = callback.from_user.id
    timetable_manager: TimetableManager = manager.middleware_data.get("manager")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    if admin_id in active_generations:
        await callback.answer("‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞! –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return
    
    await callback.answer("üöÄ –ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    cancel_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="cancel_generation")]
    ])
    
    status_msg = await bot.send_message(
        admin_id, 
        "üé® <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b>\n\n"
        "‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...\n"
        "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: 0%\n"
        "‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: 0\n"
        "‚ùå –û—à–∏–±–æ–∫: 0\n"
        "‚è±Ô∏è –í—Ä–µ–º—è: 0—Å",
        parse_mode="HTML",
        reply_markup=cancel_kb
    )
    
    # –û—Ç–º–µ—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—É—é
    active_generations[admin_id] = {
        "status_msg_id": status_msg.message_id,
        "cancelled": False,
        "start_time": None
    }
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(
        generate_all_images_background(
            bot=bot,
            admin_id=admin_id,
            status_msg_id=status_msg.message_id,
            timetable_manager=timetable_manager
        )
    )

async def on_cancel_generation(callback: CallbackQuery, button: Button, manager: DialogManager):
    """–û—Ç–º–µ–Ω—è–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
    admin_id = callback.from_user.id
    
    if admin_id in active_generations:
        active_generations[admin_id]["cancelled"] = True
        await callback.answer("‚èπÔ∏è –û—Ç–º–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot: Bot = manager.middleware_data.get("bot")
        status_msg_id = active_generations[admin_id]["status_msg_id"]
        
        try:
            await bot.edit_message_text(
                "‚èπÔ∏è <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
                "–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
                chat_id=admin_id,
                message_id=status_msg_id,
                parse_mode="HTML"
            )
        except:
            pass
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        del active_generations[admin_id]
    else:
        await callback.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã")

async def generate_all_images_background(
    bot: Bot,
    admin_id: int,
    status_msg_id: int,
    timetable_manager: TimetableManager
):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º."""
    import time
    from datetime import datetime
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    start_time = time.time()
    generated_count = 0
    error_count = 0
    total_tasks = 0
    completed_tasks = 0
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    if admin_id in active_generations:
        active_generations[admin_id]["start_time"] = start_time
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        all_groups = list(timetable_manager._schedules.keys())
        all_groups = [g for g in all_groups if not g.startswith('__')]  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–ª—é—á–∏
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
        week_types = [
            ("–ù–µ—á—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è", "odd"),
            ("–ß—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è", "even")
        ]
        
        tasks = []
        for group in all_groups:
            for week_name, week_key in week_types:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –∏ –Ω–µ–¥–µ–ª–∏
                group_schedule = timetable_manager._schedules.get(group.upper(), {})
                week_schedule = group_schedule.get(week_key, {})
                
                if week_schedule:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                    tasks.append((group, week_schedule, week_name, week_key))
        
        total_tasks = len(tasks)
        
        if total_tasks == 0:
            await bot.edit_message_text(
                "‚ùå <b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</b>\n\n"
                "–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã.",
                chat_id=admin_id,
                message_id=status_msg_id,
                parse_mode="HTML"
            )
            if admin_id in active_generations:
                del active_generations[admin_id]
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–¥–∞—á
        cancel_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="cancel_generation")]
        ])
        
        await bot.edit_message_text(
            f"üé® <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b>\n\n"
            f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}\n"
            f"üìÅ –ì—Ä—É–ø–ø: {len(all_groups)}\n"
            f"‚è≥ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...\n"
            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: 0%\n"
            f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: 0\n"
            f"‚ùå –û—à–∏–±–æ–∫: 0\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è: 0—Å",
            chat_id=admin_id,
            message_id=status_msg_id,
            parse_mode="HTML",
            reply_markup=cancel_kb
        )
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        output_dir = MEDIA_PATH / "generated"
        output_dir.mkdir(parents=True, exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for i, (group, week_schedule, week_name, week_key) in enumerate(tasks):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
            if admin_id in active_generations and active_generations[admin_id]["cancelled"]:
                await bot.edit_message_text(
                    "‚èπÔ∏è <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
                    f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {generated_count}\n"
                    f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
                    f"‚è±Ô∏è –í—Ä–µ–º—è: {time.time() - start_time:.1f}—Å",
                    chat_id=admin_id,
                    message_id=status_msg_id,
                    parse_mode="HTML"
                )
                del active_generations[admin_id]
                return
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
                cache_key = f"{group}_{week_key}"
                cache_manager = ImageCacheManager(timetable_manager.redis, cache_ttl_hours=720)
                
                if await cache_manager.is_cached(cache_key):
                    completed_tasks += 1
                    continue
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                output_filename = f"{group}_{week_key}.png"
                output_path = output_dir / output_filename
                
                success = await generate_schedule_image(
                    schedule_data=week_schedule,
                    week_type=week_name,
                    group=group,
                    output_path=str(output_path)
                )
                
                if success and os.path.exists(output_path):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                    try:
                        with open(output_path, 'rb') as f:
                            image_bytes = f.read()
                        await cache_manager.cache_image(cache_key, image_bytes, metadata={
                            "group": group,
                            "week_key": week_key,
                            "generated_at": datetime.now().isoformat()
                        })
                        generated_count += 1
                    except Exception as e:
                        error_count += 1
                        print(f"–û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è {cache_key}: {e}")
                else:
                    error_count += 1
                    
            except Exception as e:
                error_count += 1
                print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {group}_{week_key}: {e}")
            
            completed_tasks += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 –∑–∞–¥–∞—á –∏–ª–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            if completed_tasks % 5 == 0 or completed_tasks == total_tasks:
                elapsed_time = time.time() - start_time
                progress_percent = int((completed_tasks / total_tasks) * 100)
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                bar_length = 20
                filled_length = int(bar_length * completed_tasks // total_tasks)
                progress_bar = '‚ñà' * filled_length + '‚ñë' * (bar_length - filled_length)
                
                status_text = (
                    f"üé® <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b>\n\n"
                    f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}\n"
                    f"üìÅ –ì—Ä—É–ø–ø: {len(all_groups)}\n\n"
                    f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress_percent}%\n"
                    f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {generated_count}\n"
                    f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
                    f"‚è±Ô∏è –í—Ä–µ–º—è: {elapsed_time:.1f}—Å\n"
                    f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {completed_tasks/elapsed_time:.1f} –∑–∞–¥–∞—á/—Å" if elapsed_time > 0 else "üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: 0 –∑–∞–¥–∞—á/—Å"
                )
                
                try:
                    await bot.edit_message_text(
                        status_text,
                        chat_id=admin_id,
                        message_id=status_msg_id,
                        parse_mode="HTML",
                        reply_markup=cancel_kb
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        total_time = time.time() - start_time
        final_text = (
            f"üéâ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
            f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {generated_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
            f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
            f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f}—Å\n"
            f"üöÄ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {total_tasks/total_time:.1f} –∑–∞–¥–∞—á/—Å\n\n"
            f"üìÅ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: <code>bot/media/generated/</code>"
        )
        
        await bot.edit_message_text(
            final_text,
            chat_id=admin_id,
            message_id=status_msg_id,
            parse_mode="HTML"
        )
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        if admin_id in active_generations:
            del active_generations[admin_id]
        
    except Exception as e:
        error_text = (
            f"‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</b>\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}\n"
            f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {generated_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è: {time.time() - start_time:.1f}—Å"
        )
        
        try:
            await bot.edit_message_text(
                error_text,
                chat_id=admin_id,
                message_id=status_msg_id,
                parse_mode="HTML"
            )
        except:
            await bot.send_message(admin_id, error_text, parse_mode="HTML")
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        if admin_id in active_generations:
            del active_generations[admin_id]

admin_dialog = Dialog(
    Window(
        Const("üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"),
        SwitchTo(Const("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), id=WidgetIds.STATS, state=Admin.stats),
        SwitchTo(Const("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"), id="manage_user", state=Admin.enter_user_id),
        SwitchTo(Const("üì£ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"), id=WidgetIds.BROADCAST, state=Admin.broadcast),
        SwitchTo(Const("üéØ –°–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"), id="segmented", state=Admin.segment_menu),
        Button(Const("‚öôÔ∏è –¢–µ—Å—Ç —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏"), id=WidgetIds.TEST_MORNING, on_click=on_test_morning),
        Button(Const("‚öôÔ∏è –¢–µ—Å—Ç –≤–µ—á–µ—Ä–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏"), id=WidgetIds.TEST_EVENING, on_click=on_test_evening),
        Button(Const("üß™ –¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–∞—Ä–∞—Ö"), id=WidgetIds.TEST_REMINDERS, on_click=on_test_reminders_for_week),
        Button(Const("üß™ –¢–µ—Å—Ç –∞–ª—ë—Ä—Ç–∞"), id="test_alert", on_click=on_test_alert),
        Button(Const("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –∫–∞—Ä—Ç–∏–Ω–æ–∫"), id="clear_cache", on_click=on_clear_cache),
        Button(Const("üì∏ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"), id="generate_all_images", on_click=on_generate_all_images),
        Button(Const("üì∏ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), id=WidgetIds.GENERATE_FULL_SCHEDULE, on_click=on_generate_full_schedule),
        Button(Const("üë• –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø—É—Å—Ç–∏–≤—à–∏–µ—Å—è –≥—Ä—É–ø–ø—ã"), id="check_graduated_groups", on_click=on_check_graduated_groups),
        SwitchTo(Const("üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–º–µ—Å—Ç—Ä–æ–≤"), id="semester_settings", state=Admin.semester_settings),
        state=Admin.menu
    ),
    Window(
        Format("{stats_text}"),
        Row(
            Select(
                Jinja(
                    "{% if item[1] == period %}"
                    "üîò {{ item[0] }}"
                    "{% else %}"
                    "‚ö™Ô∏è {{ item[0] }}"
                    "{% endif %}"
                ),
                id="select_stats_period",
                item_id_getter=lambda item: str(item[1]),
                items="periods",
                on_click=on_period_selected
            )
        ),
        SwitchTo(Const("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"), id="stats_back", state=Admin.menu),
        getter=get_stats_data,
        state=Admin.stats,
        parse_mode="HTML"
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PREFIX|DAYS (–Ω–∞–ø—Ä–∏–º–µ—Ä: –û7|7). –ü—É—Å—Ç–æ ‚Äî –≤—Å–µ."),
        TextInput(id="segment_input", on_success=on_segment_criteria_input),
        SwitchTo(Const("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"), id="segment_back", state=Admin.menu),
        state=Admin.segment_menu
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã: {user_id}, {username}, {group}"),
        MessageInput(on_template_input_message, content_types=[ContentType.TEXT]),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="template_back", state=Admin.segment_menu),
        state=Admin.template_input
    ),
    Window(
        Format("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (1-–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å):\n\n{preview_text}\n\n–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {selected_count}"),
        Button(Const("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"), id="confirm_segment_send", on_click=on_confirm_segment_send),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="preview_back", state=Admin.template_input),
        getter=get_preview_data,
        state=Admin.preview,
        parse_mode="HTML"
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä. –î–ª—è —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã: {user_id}, {username}, {group}"),
        MessageInput(on_broadcast_received, content_types=[ContentType.ANY]),
        SwitchTo(Const("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"), id="broadcast_back", state=Admin.menu),
        state=Admin.broadcast
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"),
        TextInput(id="input_user_id", on_success=on_user_id_input),
        SwitchTo(Const("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"), id="user_id_back", state=Admin.menu),
        state=Admin.enter_user_id
    ),
    Window(
        Format("{user_info_text}"),
        SwitchTo(Const("üîÑ –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É"), id="change_group", state=Admin.change_group_confirm),
        SwitchTo(Const("‚óÄÔ∏è –ù–æ–≤—ã–π –ø–æ–∏—Å–∫"), id="back_to_user_search", state=Admin.enter_user_id),
        state=Admin.user_manage,
        getter=get_user_manage_data,
        parse_mode="HTML"
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"),
        TextInput(id="input_new_group", on_success=on_new_group_input),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="change_group_back", state=Admin.user_manage),
        state=Admin.change_group_confirm
    ),
    Window(
        Format("{semester_settings_text}"),
        Button(Const("üçÇ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Å–µ–Ω–Ω–∏–π —Å–µ–º–µ—Å—Ç—Ä"), id="edit_fall_semester", on_click=on_edit_fall_semester),
        Button(Const("üå∏ –ò–∑–º–µ–Ω–∏—Ç—å –≤–µ—Å–µ–Ω–Ω–∏–π —Å–µ–º–µ—Å—Ç—Ä"), id="edit_spring_semester", on_click=on_edit_spring_semester),
        SwitchTo(Const("‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"), id="semester_back", state=Admin.menu),
        getter=get_semester_settings_data,
        state=Admin.semester_settings,
        parse_mode="HTML"
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.09.2024):"),
        TextInput(id="fall_semester_input", on_success=on_fall_semester_input),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="fall_semester_back", state=Admin.semester_settings),
        state=Admin.edit_fall_semester
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤–µ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09.02.2025):"),
        TextInput(id="spring_semester_input", on_success=on_spring_semester_input),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="spring_semester_back", state=Admin.semester_settings),
        state=Admin.edit_spring_semester
    )
)