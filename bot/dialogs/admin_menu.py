from aiogram.types import Message, ContentType, CallbackQuery
from aiogram import Bot
from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.text import Const, Format
from aiogram_dialog.widgets.kbd import Button, SwitchTo, Back

from bot.scheduler import morning_summary_broadcast, evening_broadcast
from .states import Admin
from core.user_data import UserDataManager

async def on_test_morning(callback: CallbackQuery, button: Button, manager: DialogManager):
    bot = manager.middleware_data.get("bot")
    user_data_manager = manager.middleware_data.get("user_data_manager")
    await callback.answer("üöÄ –ó–∞–ø—É—Å–∫–∞—é —É—Ç—Ä–µ–Ω–Ω—é—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    await morning_summary_broadcast(bot, user_data_manager)
    await callback.message.answer("‚úÖ –£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

async def on_test_evening(callback: CallbackQuery, button: Button, manager: DialogManager):
    bot = manager.middleware_data.get("bot")
    user_data_manager = manager.middleware_data.get("user_data_manager")
    await callback.answer("üöÄ –ó–∞–ø—É—Å–∫–∞—é –≤–µ—á–µ—Ä–Ω—é—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    await evening_broadcast(bot, user_data_manager)
    await callback.message.answer("‚úÖ –í–µ—á–µ—Ä–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

async def get_stats_data(user_data_manager: UserDataManager, **kwargs):
    total_users = await user_data_manager.get_total_users_count()
    new_today = await user_data_manager.get_new_users_count(days=1)
    new_week = await user_data_manager.get_new_users_count(days=7)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    active_day = await user_data_manager.get_active_users_by_period(days=1)
    active_week = await user_data_manager.get_active_users_by_period(days=7)
    active_month = await user_data_manager.get_active_users_by_period(days=30)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º
    subscribed_users = await user_data_manager.get_subscribed_users_count()

    top_groups = await user_data_manager.get_top_groups(limit=5)
    top_groups_text = "\n".join([f"  - {group or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}: {count}" for group, count in top_groups])
    if not top_groups_text:
        top_groups_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
        f"<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n"
        f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
        f"üìà –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: <b>{new_today}</b>\n"
        f"üìà –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: <b>{new_week}</b>\n\n"
        f"<b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
        f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å: <b>{active_day}</b>\n"
        f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: <b>{active_week}</b>\n"
        f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü: <b>{active_month}</b>\n\n"
        f"<b>–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å:</b>\n"
        f"üîî –° –ø–æ–¥–ø–∏—Å–∫–∞–º–∏: <b>{subscribed_users}</b>\n\n"
        f"üèÜ <b>–¢–æ–ø-5 –≥—Ä—É–ø–ø:</b>\n{top_groups_text}"
    )
    return {"stats_text": stats_text}

async def on_broadcast_received(message: Message, message_input: MessageInput, manager: DialogManager):
    bot: Bot = manager.middleware_data.get("bot")
    user_data_manager: UserDataManager = manager.middleware_data.get("user_data_manager")

    try:
        all_users = await user_data_manager.get_all_user_ids()
        sent_count, failed_count = 0, 0
        
        await bot.send_message(message.from_user.id, f"üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

        for user_id in all_users:
            try:
                await message.copy_to(chat_id=user_id)
                sent_count += 1
            except Exception:
                failed_count += 1
        
        await bot.send_message(
            message.from_user.id,
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüëç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\nüëé –û—à–∏–±–æ–∫: {failed_count}"
        )
    except Exception as e:
        await bot.send_message(message.from_user.id, f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
    
    await manager.done()

admin_dialog = Dialog(
    Window(
        Const("üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"),
        SwitchTo(Const("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), id="stats", state=Admin.stats),
        SwitchTo(Const("üì£ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"), id="broadcast", state=Admin.broadcast),
        Button(Const("‚öôÔ∏è –¢–µ—Å—Ç —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏"), id="test_morning", on_click=on_test_morning),
        Button(Const("‚öôÔ∏è –¢–µ—Å—Ç –≤–µ—á–µ—Ä–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏"), id="test_evening", on_click=on_test_evening),
        state=Admin.menu
    ),
    Window(
        Format("{stats_text}"),
        Back(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥")),
        getter=get_stats_data,
        state=Admin.stats
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä."),
        MessageInput(on_broadcast_received, content_types=[ContentType.ANY]),
        Back(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥")),
        state=Admin.broadcast
    )
)