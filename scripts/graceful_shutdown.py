#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è graceful shutdown —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import logging
import os
import signal
import subprocess
import time
from typing import List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)


class GracefulShutdown:
    def __init__(self):
        self.shutdown_timeout = 60  # —Å–µ–∫—É–Ω–¥—ã

    def get_container_processes(self) -> List[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö"""
        try:
            result = subprocess.run(["docker", "ps", "--format", "json"], capture_output=True, text=True, timeout=10)

            if result.returncode == 0:
                import json

                containers = []
                for line in result.stdout.strip().split("\n"):
                    if line.strip():
                        try:
                            container = json.loads(line)
                            if any(name in container.get("Names", "") for name in ["bot", "worker"]):
                                containers.append(container)
                        except json.JSONDecodeError:
                            continue
                return containers
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {e}")

        return []

    def stop_container(self, container_name: str, timeout: int = 30) -> bool:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä gracefully"""
        try:
            logger.info(f"–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name}...")

            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SIGTERM
            result = subprocess.run(
                ["docker", "stop", "--time", str(timeout), container_name],
                capture_output=True,
                text=True,
                timeout=timeout + 10,
            )

            if result.returncode == 0:
                logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è gracefully: {result.stderr}")
                return False

        except subprocess.TimeoutExpired:
            logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {container_name}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {container_name}: {e}")
            return False

    def kill_container(self, container_name: str) -> bool:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"""
        try:
            logger.warning(f"–£–±–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ...")

            result = subprocess.run(["docker", "kill", container_name], capture_output=True, text=True, timeout=10)

            if result.returncode == 0:
                logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} —É–±–∏—Ç")
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–±–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name}: {result.stderr}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–±–∏–π—Å—Ç–≤–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {container_name}: {e}")
            return False

    def cleanup_docker_resources(self):
        """–û—á–∏—â–∞–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ Docker —Ä–µ—Å—É—Ä—Å—ã"""
        try:
            logger.info("–û—á–∏—â–∞–µ–º Docker —Ä–µ—Å—É—Ä—Å—ã...")

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
            subprocess.run(["docker-compose", "stop"], capture_output=True, text=True, timeout=30)

            # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            subprocess.run(["docker", "container", "prune", "-f"], capture_output=True, text=True, timeout=30)

            # –û—á–∏—â–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã
            subprocess.run(["docker", "image", "prune", "-f"], capture_output=True, text=True, timeout=30)

            logger.info("‚úÖ Docker —Ä–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Docker —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")

    def graceful_shutdown(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç graceful shutdown –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º graceful shutdown —Å–∏—Å—Ç–µ–º—ã...")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        containers = self.get_container_processes()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {len(containers)}")

        # –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º worker, –ø–æ—Ç–æ–º bot
        stop_order = ["worker", "bot"]

        for container_type in stop_order:
            containers_to_stop = [c for c in containers if container_type in c.get("Names", "")]
            for container in containers_to_stop:
                container_name = container.get("Names", "unknown")
                if not self.stop_container(container_name, timeout=30):
                    # –ï—Å–ª–∏ graceful –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, —É–±–∏–≤–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
                    self.kill_container(container_name)

        # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        self.cleanup_docker_resources()

        logger.info("‚úÖ Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω")


def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
    shutdown = GracefulShutdown()
    shutdown.graceful_shutdown()
    exit(0)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã graceful shutdown...")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)

    try:
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω KeyboardInterrupt, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        shutdown = GracefulShutdown()
        shutdown.graceful_shutdown()


if __name__ == "__main__":
    main()
