name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Тестирование
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov pytest-mock
        pip install black flake8 mypy isort bandit safety

    - name: Wait for databases
      run: |
        timeout 60 bash -c 'until nc -z localhost 5432; do sleep 1; done'
        timeout 60 bash -c 'until nc -z localhost 6379; do sleep 1; done'

    - name: Run migrations
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/test_db
      run: |
        alembic upgrade head

    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      run: |
        pytest --cov=bot --cov=core --cov-report=xml --cov-report=term-missing --tb=short

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Linting и проверка кода
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy isort bandit safety pre-commit

    - name: Run Black (code formatter)
      run: |
        black --check --diff bot/ core/ tests/ main.py

    - name: Run Flake8 (style checker)
      run: |
        flake8 bot/ core/ tests/ main.py --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 bot/ core/ tests/ main.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run isort (import sorter)
      run: |
        isort --check-only --diff bot/ core/ tests/ main.py

    - name: Run MyPy (type checker)
      run: |
        mypy bot/ core/ main.py --ignore-missing-imports --no-error-summary

    - name: Run Bandit (security linter)
      run: |
        bandit -r bot/ core/ -f json -o bandit-report.json || true
        bandit -r bot/ core/

    - name: Run Safety (vulnerability checker)
      run: |
        safety check --json || true

    - name: Run pre-commit hooks
      run: |
        pre-commit run --all-files || true

  # Сборка Docker образов
  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: voenmeh-timetable-bot
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Деплой на staging (для develop ветки)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Здесь можно добавить команды для деплоя на staging
        # Например, через SSH, kubectl, docker-compose и т.д.

  # Деплой на production (для main ветки)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Здесь можно добавить команды для деплоя на production
        # Например, через SSH, kubectl, docker-compose и т.д.

  # Уведомления
  notify:
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    if: always() && (needs.test.result == 'failure' || needs.lint.result == 'failure' || needs.build.result == 'failure')

    steps:
    - name: Notify on failure
      run: |
        echo "Pipeline failed! Check the logs for details."
        # Здесь можно добавить уведомления в Slack, Telegram, email и т.д.
