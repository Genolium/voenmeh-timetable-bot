#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º.
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø –Ω–∞ –æ–±–µ –Ω–µ–¥–µ–ª–∏ (—á–µ—Ç–Ω—É—é –∏ –Ω–µ—á–µ—Ç–Ω—É—é).
"""

import asyncio
import sys
import os
from pathlib import Path
from datetime import datetime
import time

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent))

from core.image_generator import generate_schedule_image
from core.parser import fetch_and_parse_all_schedules
from core.manager import TimetableManager
from core.config import MOSCOW_TZ

def print_progress_bar(current: int, total: int, prefix: str = "–ü—Ä–æ–≥—Ä–µ—Å—Å", suffix: str = "", length: int = 50):
    """–í—ã–≤–æ–¥–∏—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤ –∫–æ–Ω—Å–æ–ª—å."""
    filled_length = int(length * current // total)
    bar = '‚ñà' * filled_length + '-' * (length - filled_length)
    percent = f"{100 * current // total}%"
    print(f'\r{prefix} |{bar}| {percent} {suffix}', end='', flush=True)
    if current == total:
        print()

def print_detailed_progress(current: int, total: int, group: str, week_type: str, step: str):
    """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    filled_length = int(30 * current // total)
    bar = '‚ñà' * filled_length + '-' * (30 - filled_length)
    percent = f"{100 * current // total}%"
    print(f'\r  {group} ({week_type}) |{bar}| {percent} {step}', end='', flush=True)
    if current == total:
        print()

def get_file_size_mb(file_path: str) -> float:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö."""
    try:
        size_bytes = os.path.getsize(file_path)
        return round(size_bytes / (1024 * 1024), 2)
    except:
        return 0

async def generate_all_schedule_images():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø –Ω–∞ –æ–±–µ –Ω–µ–¥–µ–ª–∏."""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    output_dir = Path("generated_images")
    output_dir.mkdir(exist_ok=True)
    
    # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    print("üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞...")
    print_progress_bar(1, 4, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞", "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        schedule_data = await fetch_and_parse_all_schedules()
        if not schedule_data:
            print("\n‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
            return
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        from redis.asyncio import Redis
        redis_client = Redis.from_url("redis://localhost:6379/0")
        manager = TimetableManager(schedule_data, redis_client)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
        groups = list(schedule_data.keys())
        groups = [g for g in groups if not g.startswith('__')]  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–ª—é—á–∏
        
        print_progress_bar(2, 4, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞", f"–ù–∞–π–¥–µ–Ω–æ {len(groups)} –≥—Ä—É–ø–ø")
        
        # –®–∞–≥ 2: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        print_progress_bar(3, 4, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞", "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á")
        
        tasks = []
        week_types = [
            ("–ù–µ—á—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è", "odd"),
            ("–ß—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è", "even")
        ]
        
        for group in groups:
            for week_name, week_key in week_types:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –∏ –Ω–µ–¥–µ–ª–∏
                group_schedule = schedule_data.get(group, {})
                week_schedule = group_schedule.get(week_key, {})
                
                if week_schedule:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                    output_filename = f"{group}_{week_key}.png"
                    output_path = output_dir / output_filename
                    tasks.append((group, week_schedule, week_name, week_key, str(output_path)))
        
        print_progress_bar(4, 4, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞", f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(tasks)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        # –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        print(f"\nüé® –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é {len(tasks)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        print("=" * 60)
        
        successful = 0
        failed = 0
        total_size_mb = 0
        start_time = time.time()
        
        for i, (group, week_schedule, week_name, week_key, output_path) in enumerate(tasks):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            print_progress_bar(i, len(tasks), "–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å", f"{i}/{len(tasks)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            print_detailed_progress(1, 5, group, week_name, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —à–∞–±–ª–æ–Ω–∞")
            
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                success = await generate_schedule_image(
                    schedule_data=week_schedule,
                    week_type=week_name,
                    group=group,
                    output_path=output_path
                )
                
                if success and os.path.exists(output_path):
                    successful += 1
                    file_size = get_file_size_mb(output_path)
                    total_size_mb += file_size
                    print_detailed_progress(5, 5, group, week_name, f"‚úÖ –ì–æ—Ç–æ–≤–æ ({file_size} –ú–ë)")
                else:
                    failed += 1
                    print_detailed_progress(5, 5, group, week_name, "‚ùå –û—à–∏–±–∫–∞")
                    
            except Exception as e:
                failed += 1
                print_detailed_progress(5, 5, group, week_name, f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:30]}")
        
        # –®–∞–≥ 4: –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        end_time = time.time()
        duration = round(end_time - start_time, 2)
        
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 60)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {successful} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        print(f"‚ùå –û—à–∏–±–æ–∫: {failed} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        print(f"üìÅ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size_mb} –ú–ë")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration} —Å–µ–∫—É–Ω–¥")
        print(f"üöÄ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {round(successful/duration, 2) if duration > 0 else 0} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π/—Å–µ–∫")
        
        if successful > 0:
            print(f"\nüìÇ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir.absolute()}")
            print(f"üíæ –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {round(total_size_mb/successful, 2)} –ú–ë")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        if successful > 0:
            print(f"\nüìà –¢–æ–ø-5 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")
            files_with_sizes = []
            for file_path in output_dir.glob("*.png"):
                size_mb = get_file_size_mb(str(file_path))
                files_with_sizes.append((file_path.name, size_mb))
            
            files_with_sizes.sort(key=lambda x: x[1], reverse=True)
            for i, (filename, size) in enumerate(files_with_sizes[:5]):
                print(f"  {i+1}. {filename}: {size} –ú–ë")
        
        print("\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

async def generate_sample_images():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    
    print("üß™ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        "–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö": [
            {"subject": "–§–ò–ó–ò–ö–ê", "type": "–ª–∞–±", "room": "322", "time": "9:00 - 10:30", "start_time_raw": "9:00"},
            {"subject": "–ú–ê–¢–ï–ú–ê–¢–ò–ö–ê", "type": "–ª–µ–∫", "room": "101", "time": "10:50 - 12:20", "start_time_raw": "10:50"},
        ],
        "–í–¢–û–†–ù–ò–ö": [
            {"subject": "–ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–ï", "type": "–ø—Ä", "room": "205", "time": "9:00 - 10:30", "start_time_raw": "9:00"},
        ],
        "–°–†–ï–î–ê": [
            {"subject": "–•–ò–ú–ò–Ø", "type": "–ª–∞–±", "room": "301", "time": "9:00 - 10:30", "start_time_raw": "9:00"},
        ],
        "–ß–ï–¢–í–ï–†–ì": [
            {"subject": "–ò–°–¢–û–†–ò–Ø", "type": "–ª–µ–∫", "room": "201", "time": "9:00 - 10:30", "start_time_raw": "9:00"},
        ],
        "–ü–Ø–¢–ù–ò–¶–ê": [
            {"subject": "–ê–ù–ì–õ–ò–ô–°–ö–ò–ô", "type": "–ø—Ä", "room": "203", "time": "9:00 - 10:30", "start_time_raw": "9:00"},
        ],
        "–°–£–ë–ë–û–¢–ê": [
            {"subject": "–§–ò–ó–ö–£–õ–¨–¢–£–†–ê", "type": "", "room": "", "time": "9:00 - 10:30", "start_time_raw": "9:00"},
        ]
    }
    
    output_dir = Path("generated_images")
    output_dir.mkdir(exist_ok=True)
    
    week_types = [
        ("–ù–µ—á—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è", "test_sample_odd.png"),
        ("–ß—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è", "test_sample_even.png")
    ]
    
    print(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é {len(week_types)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    for i, (week_type, filename) in enumerate(week_types):
        output_path = output_dir / filename
        print_progress_bar(i, len(week_types), "–¢–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", f"{i}/{len(week_types)}")
        
        success = await generate_schedule_image(
            schedule_data=test_data,
            week_type=week_type,
            group="TEST_SAMPLE",
            output_path=str(output_path)
        )
        
        if success:
            file_size = get_file_size_mb(str(output_path))
            print_progress_bar(i + 1, len(week_types), "–¢–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", f"{i + 1}/{len(week_types)} ({file_size} –ú–ë)")
        else:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ {filename}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã!")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üéØ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π")
    print("=" * 50)
    print("1. –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)")
    print("2. –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    print("3. –í—ã—Ö–æ–¥")
    
    while True:
        try:
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-3): ").strip()
            
            if choice == "1":
                await generate_all_schedule_images()
                break
            elif choice == "2":
                await generate_sample_images()
                break
            elif choice == "3":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except KeyboardInterrupt:
            print("\n\nüëã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            break
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
            break

if __name__ == "__main__":
    asyncio.run(main())
