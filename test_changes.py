#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–º–∞–Ω–¥–µ /events
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç
"""

import asyncio
from unittest.mock import AsyncMock, MagicMock
from datetime import datetime

async def test_events_changes():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥–µ /events"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–º–∞–Ω–¥–µ /events")
    print("=" * 50)

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏
    from bot.dialogs.events_menu import get_events_for_user
    from bot.dialogs.admin_menu import get_events_list

    print("‚úÖ –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")

    # –¢–µ—Å—Ç 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    print("\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:")

    mock_manager = MagicMock()
    mock_manager.middleware_data = {'session_factory': AsyncMock()}
    mock_manager.dialog_data = {'time_filter': None, 'page': 0}

    from unittest.mock import patch
    with patch('bot.dialogs.events_menu.EventsManager') as mock_events_manager:
        mock_instance = AsyncMock()
        mock_events_manager.return_value = mock_instance

        # –¢–µ—Å—Ç–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å —Å–ª—É–∂–µ–±–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        mock_event = MagicMock()
        mock_event.title = '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'
        mock_event.start_at = datetime(2025, 8, 25, 12, 0, 0)  # –ë—É–¥—É—â–∞—è –¥–∞—Ç–∞
        mock_event.location = '–¢–µ—Å—Ç–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è'
        mock_event.id = 1

        mock_instance.list_events.return_value = ([mock_event], 1)

        result = await get_events_for_user(mock_manager)
        call_args = mock_instance.list_events.call_args

        print(f"   ‚úÖ from_now_only = {call_args[1]['from_now_only']} (–æ–∂–∏–¥–∞–µ—Ç—Å—è True)")
        print(f"   ‚úÖ now –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–µ—Ä–µ–¥–∞–Ω = {call_args[1]['now'] is not None}")

        if result['events']:
            title, event_id = result['events'][0]
            print(f"   ‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω: '{title}'")
            print(f"   ‚úÖ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' —É–¥–∞–ª–µ–Ω–æ: {'–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' not in title}")
            print(f"   ‚úÖ '–≤–∞–∂–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {'–≤–∞–∂–Ω–æ–µ' in title}")

    # –¢–µ—Å—Ç 2: –ê–¥–º–∏–Ω-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    print("\nüë®‚Äçüíº –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:")

    def mock_get_side_effect(key, default=0):
        if key == 'events_page': return 0
        elif key == 'events_pub_filter': return 'all'
        elif key == 'events_search': return ''
        return default

    mock_manager.dialog_data = MagicMock()
    mock_manager.dialog_data.get.side_effect = mock_get_side_effect

    with patch('bot.dialogs.admin_menu.EventsManager') as mock_events_manager:
        mock_instance = AsyncMock()
        mock_events_manager.return_value = mock_instance

        mock_event = MagicMock()
        mock_event.title = '–û—Ç–º–µ–Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
        mock_event.is_published = True
        mock_event.id = 1

        mock_instance.list_events.return_value = ([mock_event], 1)

        result = await get_events_list(mock_manager)
        call_args = mock_instance.list_events.call_args

        print(f"   ‚úÖ from_now_only = {call_args[1]['from_now_only']} (–æ–∂–∏–¥–∞–µ—Ç—Å—è True)")
        print(f"   ‚úÖ now –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–µ—Ä–µ–¥–∞–Ω = {call_args[1]['now'] is not None}")

        events_text = result['events_text']
        print(f"   ‚úÖ '–û—Ç–º–µ–Ω–∞' —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {'–û—Ç–º–µ–Ω–∞' not in events_text}")
        print(f"   ‚úÖ '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {'–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è' in events_text}")

    print("\n" + "=" * 50)
    print("üéâ –í–°–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
    print("\nüìã –†–µ–∑—é–º–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π:")
    print("   ‚Ä¢ –ö–Ω–æ–ø–∫–∞ '–í—Å–µ' –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è)")
    print("   ‚Ä¢ –ö–Ω–æ–ø–∫–∏ '–°–µ–≥–æ–¥–Ω—è'/'–ù–µ–¥–µ–ª—è' –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    print("   ‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—á–∏—â–µ–Ω—ã –æ—Ç —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–ª–æ–≤ ('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '–û—Ç–º–µ–Ω–∞', 'Skip' –∏ —Ç.–¥.)")
    print("   ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫–∞–∫ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É, —Ç–∞–∫ –∏ –∫ –∞–¥–º–∏–Ω-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É")

    print("\nüîÑ –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –≤–∏–¥–Ω—ã –≤ –±–æ—Ç–µ:")
    print("   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ (–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞)")
    print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥")
    print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫")

if __name__ == "__main__":
    asyncio.run(test_events_changes())
