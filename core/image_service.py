import asyncio
import logging
from datetime import datetime
from pathlib import Path
from typing import Optional, Dict, Any, Tuple
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile

from core.image_cache_manager import ImageCacheManager
from core.image_generator import generate_schedule_image
from core.config import MEDIA_PATH
from core.metrics import SCHEDULE_GENERATION_TIME
from bot.utils.image_compression import get_telegram_safe_image_path

logger = logging.getLogger(__name__)

class ImageService:
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    """
    
    def __init__(self, cache_manager: ImageCacheManager, bot: Bot):
        self.cache_manager = cache_manager
        self.bot = bot
        self.generation_locks = {}  # –õ–æ–∫–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    
    async def get_or_generate_week_image(
        self,
        group: str,
        week_key: str,
        week_name: str,
        week_schedule: Dict[str, Any],
        user_id: Optional[int] = None,
        placeholder_msg_id: Optional[int] = None,
        final_caption: Optional[str] = None
    ) -> Tuple[bool, Optional[str]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ.
        
        Args:
            group: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            week_key: –ö–ª—é—á –Ω–µ–¥–µ–ª–∏ (even/odd)
            week_name: –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏
            week_schedule: –î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            placeholder_msg_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è-–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
            final_caption: –ü–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            
        Returns:
            Tuple[success, file_path]
        """
        cache_key = f"{group}_{week_key}"
        
        logger.info(f"üé® Requesting week image for {cache_key}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if await self.cache_manager.is_cached(cache_key):
            logger.info(f"‚úÖ Cache HIT for {cache_key}")
            file_path = self.cache_manager.get_file_path(cache_key)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not file_path.exists():
                logger.warning(f"‚ö†Ô∏è Cache hit but file missing: {file_path}")
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
                await self.cache_manager.invalidate_cache(cache_key)
            else:
                if user_id:
                    send_success = await self._send_image_to_user(file_path, user_id, placeholder_msg_id, final_caption)
                    if not send_success:
                        logger.warning(f"‚ö†Ô∏è Failed to send cached image, will regenerate")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
                        await self.cache_manager.invalidate_cache(cache_key)
                    else:
                        return True, str(file_path)
                else:
                    return True, str(file_path)
        
        logger.info(f"‚ùå Cache MISS for {cache_key}, generating...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        success, file_path = await self._generate_and_cache_image(
            cache_key, week_schedule, week_name, group
        )
        
        if success and user_id:
            await self._send_image_to_user(file_path, user_id, placeholder_msg_id, final_caption)
        
        return success, file_path
    
    async def _generate_and_cache_image(
        self,
        cache_key: str,
        schedule_data: Dict[str, Any],
        week_type: str,
        group: str
    ) -> Tuple[bool, Optional[str]]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∫—ç—à.
        
        Args:
            cache_key: –ö–ª—é—á –∫—ç—à–∞
            schedule_data: –î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            week_type: –¢–∏–ø –Ω–µ–¥–µ–ª–∏
            group: –ì—Ä—É–ø–ø–∞
            
        Returns:
            Tuple[success, file_path]
        """
        start_time = datetime.now()
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if cache_key not in self.generation_locks:
            self.generation_locks[cache_key] = asyncio.Lock()
        
        async with self.generation_locks[cache_key]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞
            if await self.cache_manager.is_cached(cache_key):
                logger.info(f"‚úÖ Another process generated {cache_key} while waiting")
                file_path = self.cache_manager.get_file_path(cache_key)
                return True, str(file_path)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            file_path = self.cache_manager.get_file_path(cache_key)
            file_path.parent.mkdir(parents=True, exist_ok=True)
            
            logger.info(f"üîÑ Generating image for {cache_key}")
            
            try:
                highres_vp = {"width":1500, "height": 1125}
                
                success = await generate_schedule_image(
                    schedule_data=schedule_data,
                    week_type=week_type,
                    group=group,
                    output_path=str(file_path),
                    viewport_size=highres_vp
                )
                
                if not success or not file_path.exists():
                    logger.error(f"‚ùå Failed to generate image for {cache_key}")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –∏ –µ–≥–æ —Ä–∞–∑–º–µ—Ä
                    if file_path.exists():
                        file_size = file_path.stat().st_size
                        logger.error(f"   File exists but size is {file_size} bytes")
                    else:
                        logger.error(f"   File does not exist: {file_path}")
                    return False, None
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                try:
                    with open(file_path, 'rb') as f:
                        image_bytes = f.read()
                    
                    await self.cache_manager.cache_image(cache_key, image_bytes, metadata={
                        "group": group,
                        "week_key": week_type,
                        "generated_at": datetime.now().isoformat(),
                        "file_size": len(image_bytes)
                    })
                    
                    logger.info(f"üíæ Successfully cached {cache_key} ({len(image_bytes)} bytes)")
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Failed to cache {cache_key}: {e}")
                    # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False, —Ç–∞–∫ –∫–∞–∫ —Ñ–∞–π–ª –≤—Å–µ —Ä–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                generation_time = (datetime.now() - start_time).total_seconds()
                SCHEDULE_GENERATION_TIME.labels(schedule_type="week").observe(generation_time)
                
                logger.info(f"‚úÖ Successfully generated {cache_key} in {generation_time:.2f}s")
                return True, str(file_path)
                
            except Exception as e:
                logger.error(f"‚ùå Error generating {cache_key}: {e}")
                return False, None
    
    async def _send_image_to_user(
        self,
        file_path: str,
        user_id: int,
        placeholder_msg_id: Optional[int],
        final_caption: Optional[str]
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            placeholder_msg_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è-–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
            final_caption: –ü–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            path_obj = Path(file_path)
            if not path_obj.exists():
                logger.error(f"‚ùå File not found: {file_path}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = path_obj.stat().st_size
            if file_size == 0:
                logger.error(f"‚ùå File is empty: {file_path}")
                return False
            
            logger.info(f"üìÅ Sending file: {file_path} ({file_size} bytes)")
            
            # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è Telegram –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            safe_image_path = get_telegram_safe_image_path(file_path)
            safe_path_obj = Path(safe_image_path)
            
            if not safe_path_obj.exists():
                logger.error(f"‚ùå Safe image file not found: {safe_image_path}")
                return False
            
            photo = FSInputFile(safe_image_path)
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_day_img")]
            ])
            
            if placeholder_msg_id:
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    from aiogram.types import InputMediaPhoto
                    media = InputMediaPhoto(media=photo, caption=final_caption or "")
                    await self.bot.edit_message_media(
                        chat_id=user_id,
                        message_id=placeholder_msg_id,
                        media=media,
                        reply_markup=kb
                    )
                    logger.info(f"‚úÖ Image edited for user {user_id}")
                    return True
                    
                except Exception as e:
                    if "message is not modified" not in str(e).lower():
                        logger.warning(f"Failed to edit message for user {user_id}: {e}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.send_photo(
                chat_id=user_id,
                photo=photo,
                caption=final_caption or "",
                reply_markup=kb
            )
            
            logger.info(f"‚úÖ Image sent to user {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to send image to user {user_id}: {e}")
            return False
    
    async def get_cache_info(self, cache_key: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.
        
        Args:
            cache_key: –ö–ª—é—á –∫—ç—à–∞
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ –∏–ª–∏ None
        """
        return await self.cache_manager.get_cache_info(cache_key)
    
    async def invalidate_cache(self, cache_key: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞.
        
        Args:
            cache_key: –ö–ª—é—á –∫—ç—à–∞
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ
        """
        return await self.cache_manager.invalidate_cache(cache_key)
    
    async def cleanup_expired_cache(self) -> int:
        """
        –û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –∫—ç—à–∞.
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        """
        return await self.cache_manager.cleanup_expired_cache()
    
    async def get_cache_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞.
        
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
        """
        return await self.cache_manager.get_cache_stats()
    
    async def diagnose_cache(self, cache_key: str) -> Dict[str, Any]:
        """
        –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞.
        
        Args:
            cache_key: –ö–ª—é—á –∫—ç—à–∞
            
        Returns:
            –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        """
        return await self.cache_manager.diagnose_cache(cache_key)
