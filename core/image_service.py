import asyncio
import logging
import threading
from datetime import datetime
from pathlib import Path
from typing import Optional, Dict, Any, Tuple
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile

from core.image_cache_manager import ImageCacheManager
from core.image_generator import generate_schedule_image
from core.config import MEDIA_PATH, MOSCOW_TZ
from core.metrics import SCHEDULE_GENERATION_TIME
from bot.utils.image_compression import get_telegram_safe_image_path

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
# –ò—Å–ø–æ–ª—å–∑—É–µ–º threading.Semaphore –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö event loop'–∞—Ö Dramatiq
import os
_generation_semaphore = threading.Semaphore(int(os.getenv('IMAGE_SERVICE_SEMAPHORE', '2')))  # –ú–∞–∫—Å–∏–º—É–º 2 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å

logger = logging.getLogger(__name__)

class ImageService:
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    """
    
    def __init__(self, cache_manager: ImageCacheManager, bot: Bot):
        self.cache_manager = cache_manager
        self.bot = bot
        self.generation_locks = {}  # –õ–æ–∫–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    
    async def get_or_generate_week_image(
        self,
        group: str,
        week_key: str,
        week_name: str,
        week_schedule: Dict[str, Any],
        user_id: Optional[int] = None,
        user_theme: Optional[str] = None,
        placeholder_msg_id: Optional[int] = None,
        final_caption: Optional[str] = None
    ) -> Tuple[bool, Optional[str]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ.
        
        Args:
            group: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            week_key: –ö–ª—é—á –Ω–µ–¥–µ–ª–∏ (even/odd)
            week_name: –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏
            week_schedule: –î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            user_theme: –¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            placeholder_msg_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è-–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
            final_caption: –ü–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            
        Returns:
            Tuple[success, file_path]
        """
        # –ö–ª—é—á –∫—ç—à–∞: –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–µ–º —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–º—É
        if user_theme and user_theme != 'standard':
            cache_key = f"{group}_{week_key}_{user_theme}"
        else:
            cache_key = f"{group}_{week_key}"
        
        logger.info(f"üé® Requesting week image for {cache_key} (theme={user_theme or 'standard'})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if await self.cache_manager.is_cached(cache_key):
            logger.info(f"‚úÖ Cache HIT for {cache_key}")
            file_path = self.cache_manager.get_file_path(cache_key)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not file_path.exists():
                logger.warning(f"‚ö†Ô∏è Cache hit but file missing: {file_path}")
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
                await self.cache_manager.invalidate_cache(cache_key)
            else:
                if user_id:
                    send_success = await self._send_image_to_user(file_path, user_id, placeholder_msg_id, final_caption)
                    if not send_success:
                        logger.warning(f"‚ö†Ô∏è Failed to send cached image, will regenerate")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
                        await self.cache_manager.invalidate_cache(cache_key)
                    else:
                        return True, str(file_path)
                else:
                    return True, str(file_path)
        
        logger.info(f"‚ùå Cache MISS for {cache_key}, generating...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        success, file_path = await self._generate_and_cache_image(
            cache_key, week_schedule, week_name, group, user_theme=user_theme
        )
        
        if success and user_id:
            await self._send_image_to_user(file_path, user_id, placeholder_msg_id, final_caption)
        
        return success, file_path
    
    async def _generate_and_cache_image(
        self,
        cache_key: str,
        schedule_data: Dict[str, Any],
        week_type: str,
        group: str,
        *,
        generated_by: str = "single",
        schedule_hash: Optional[str] = None,
        user_theme: Optional[str] = None,
    ) -> Tuple[bool, Optional[str]]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∫—ç—à.

        Args:
            cache_key: –ö–ª—é—á –∫—ç—à–∞
            schedule_data: –î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            week_type: –¢–∏–ø –Ω–µ–¥–µ–ª–∏
            group: –ì—Ä—É–ø–ø–∞
            generated_by: –ò—Å—Ç–æ—á–Ω–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            schedule_hash: –•—ç—à —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            user_theme: –¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            Tuple[success, file_path]
        """
        start_time = datetime.now(MOSCOW_TZ)

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        with _generation_semaphore:
            logger.info(f"üîÑ Starting image generation for {cache_key} (semaphore acquired)")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫—É –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            from core.metrics import SCHEDULE_GENERATION_TIME, IMAGE_CACHE_MISSES
            IMAGE_CACHE_MISSES.labels(cache_type="generation_requested").inc()

            # –°–æ–∑–¥–∞–µ–º –ª–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            if cache_key not in self.generation_locks:
                self.generation_locks[cache_key] = asyncio.Lock()

            async with self.generation_locks[cache_key]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞
                if await self.cache_manager.is_cached(cache_key):
                    logger.info(f"‚úÖ Another process generated {cache_key} while waiting")
                    file_path = self.cache_manager.get_file_path(cache_key)
                    from core.metrics import IMAGE_CACHE_HITS
                    IMAGE_CACHE_HITS.labels(cache_type="concurrent_generation").inc()
                    return True, str(file_path)

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                file_path = self.cache_manager.get_file_path(cache_key)
                file_path.parent.mkdir(parents=True, exist_ok=True)

                logger.info(f"üîÑ Generating image for {cache_key}")
                logger.info(f"Using user_theme={user_theme or 'standard'} for {cache_key}")

                try:
                    # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫
                    with SCHEDULE_GENERATION_TIME.labels(schedule_type="week").time():
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–æ–º–ø–æ–Ω–æ–≤–∫—É ‚Äî –∂–µ—Å—Ç–∫–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö–æ–ª—Å—Ç
                        from core.render_config import VIEWPORT_WIDTH, VIEWPORT_HEIGHT
                        highres_vp = {"width": VIEWPORT_WIDTH, "height": VIEWPORT_HEIGHT}

                        success = await generate_schedule_image(
                            schedule_data=schedule_data,
                            week_type=week_type,
                            group=group,
                            output_path=str(file_path),
                            viewport_size=highres_vp,
                            user_theme=user_theme
                        )

                    if not success or not file_path.exists():
                        logger.error(f"‚ùå Failed to generate image for {cache_key}")
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –∏ –µ–≥–æ —Ä–∞–∑–º–µ—Ä
                        if file_path.exists():
                            file_size = file_path.stat().st_size
                            logger.error(f"   File exists but size is {file_size} bytes")
                        else:
                            logger.error(f"   File does not exist: {file_path}")
                        # –ú–µ—Ç—Ä–∏–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                        from core.metrics import IMAGE_CACHE_MISSES
                        IMAGE_CACHE_MISSES.labels(cache_type="generation_failed").inc()
                        return False, None

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                    try:
                        with open(file_path, 'rb') as f:
                            image_bytes = f.read()

                        await self.cache_manager.cache_image(cache_key, image_bytes, metadata={
                            "group": group,
                            "week_key": week_type,
                            "generated_at": datetime.now(MOSCOW_TZ).isoformat(),
                            "file_size": len(image_bytes),
                            "generated_by": generated_by,
                            **({"schedule_hash": schedule_hash} if schedule_hash else {}),
                        })
                        
                        # –ú–µ—Ç—Ä–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
                        from core.metrics import IMAGE_CACHE_OPERATIONS
                        IMAGE_CACHE_OPERATIONS.labels(operation="store").inc()

                        logger.info(f"üíæ Successfully cached {cache_key} ({len(image_bytes)} bytes)")

                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Failed to cache {cache_key}: {e}")
                        # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False, —Ç–∞–∫ –∫–∞–∫ —Ñ–∞–π–ª –≤—Å–µ —Ä–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω

                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    generation_time = (datetime.now(MOSCOW_TZ) - start_time).total_seconds()
                    SCHEDULE_GENERATION_TIME.labels(schedule_type="week").observe(generation_time)

                    logger.info(f"‚úÖ Successfully generated {cache_key} in {generation_time:.2f}s")
                    return True, str(file_path)

                except Exception as e:
                    logger.error(f"‚ùå Error generating {cache_key}: {e}")
                    return False, None
    
    async def _send_image_to_user(
        self,
        file_path: str,
        user_id: int,
        placeholder_msg_id: Optional[int],
        final_caption: Optional[str]
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            placeholder_msg_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è-–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
            final_caption: –ü–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            path_obj = Path(file_path)
            if not path_obj.exists():
                logger.error(f"‚ùå File not found: {file_path}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = path_obj.stat().st_size
            if file_size == 0:
                logger.error(f"‚ùå File is empty: {file_path}")
                return False
            
            logger.info(f"üìÅ Sending file: {file_path} ({file_size} bytes)")
            
            # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è Telegram –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            safe_image_path = get_telegram_safe_image_path(file_path)
            safe_path_obj = Path(safe_image_path)
            
            if not safe_path_obj.exists():
                logger.error(f"‚ùå Safe image file not found: {safe_image_path}")
                return False
            
            photo = FSInputFile(safe_image_path)
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: –æ—Ä–∏–≥–∏–Ω–∞–ª —Ñ–∞–π–ª–∞ + –Ω–∞–∑–∞–¥ (–≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìÑ –û—Ä–∏–≥–∏–Ω–∞–ª (—Ñ–∞–π–ª)", callback_data="send_original_file"),
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_day_img"),
                ]
            ])
            
            if placeholder_msg_id:
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    from aiogram.types import InputMediaPhoto
                    media = InputMediaPhoto(media=photo, caption=final_caption or "")
                    await self.bot.edit_message_media(
                        chat_id=user_id,
                        message_id=placeholder_msg_id,
                        media=media,
                        reply_markup=kb
                    )
                    logger.info(f"‚úÖ Image edited for user {user_id}")
                    return True
                    
                except Exception as e:
                    # –§–æ–ª–±—ç–∫ –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö —Ç–∞–π–º–∞—É—Ç–∞—Ö –∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö: –æ—Ç–ø—Ä–∞–≤–∏–º –∫–∞–∫ –Ω–æ–≤–æ–µ
                    if "message is not modified" not in str(e).lower():
                        logger.warning(f"Failed to edit message for user {user_id}: {e}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await self.bot.send_photo(
                    chat_id=user_id,
                    photo=photo,
                    caption=final_caption or "",
                    reply_markup=kb
                )
            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª (–µ—Å–ª–∏ –µ—Å—Ç—å)
                logger.warning(f"Photo send failed for user {user_id}: {e}")
                fallback_text = (final_caption or "") + "\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                try:
                    await self.bot.send_message(chat_id=user_id, text=fallback_text, parse_mode="HTML")
                except Exception:
                    pass
                return False
            
            logger.info(f"‚úÖ Image sent to user {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to send image to user {user_id}: {e}")
            return False
    
    async def get_cache_info(self, cache_key: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.
        
        Args:
            cache_key: –ö–ª—é—á –∫—ç—à–∞
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ –∏–ª–∏ None
        """
        return await self.cache_manager.get_cache_info(cache_key)
    
    async def invalidate_cache(self, cache_key: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞.
        
        Args:
            cache_key: –ö–ª—é—á –∫—ç—à–∞
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ
        """
        return await self.cache_manager.invalidate_cache(cache_key)
    
    async def cleanup_expired_cache(self) -> int:
        """
        –û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –∫—ç—à–∞.
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        """
        return await self.cache_manager.cleanup_expired_cache()
    
    async def get_cache_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞.
        
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
        """
        return await self.cache_manager.get_cache_stats()
    
    async def diagnose_cache(self, cache_key: str) -> Dict[str, Any]:
        """
        –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞.
        
        Args:
            cache_key: –ö–ª—é—á –∫—ç—à–∞
            
        Returns:
            –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        """
        return await self.cache_manager.diagnose_cache(cache_key)
