import aiohttp
import logging
import asyncio
from datetime import datetime, time, timedelta, timezone 
from typing import Optional, Dict, Any

from core.config import OPENWEATHERMAP_API_KEY, OPENWEATHERMAP_CITY_ID, OPENWEATHERMAP_UNITS, MOSCOW_TZ
from core.metrics import ERRORS_TOTAL, RETRIES_TOTAL

class WeatherAPI:
    BASE_URL = "https://api.openweathermap.org/data/2.5/forecast"
    CACHE_DURATION_HOURS = 1 # –ö—ç—à –ø–æ–≥–æ–¥—ã –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è 1 —á–∞—Å
    _cache: Dict[str, Dict[str, Any]] = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: {'–¥–∞—Ç–∞_—á–∞—Å_–ø—Ä–æ–≥–Ω–æ–∑–∞': {'timestamp': ..., 'data': ...}}

    def __init__(self, api_key: str, city_id: str, units: str = "metric"):
        if not api_key:
            logging.error("OpenWeatherMap API key is not provided!")
            raise ValueError("API key cannot be empty.")
        self.api_key = api_key
        self.city_id = city_id
        self.units = units

    async def get_forecast_for_time(self, target_datetime: datetime) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –±–ª–∏–∂–∞–π—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        –∫ target_datetime. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à.
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã –∏ —á–∞—Å–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑
        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ 3-—á–∞—Å–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞, —Ç.–∫. OWM –¥–∞–µ—Ç –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
        # –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏, —Ä–∞–±–æ—Ç–∞–µ–º —Å UTC –¥–ª—è –∫–ª—é—á–∞ –∫—ç—à–∞
        target_utc_dt = target_datetime.astimezone(timezone.utc)
        target_hour_rounded = (target_utc_dt.hour // 3) * 3
        cache_key = f"{target_utc_dt.date().isoformat()}_{target_hour_rounded:02d}h"

        cached_entry = self._cache.get(cache_key)
        if cached_entry:
            cache_timestamp = cached_entry['timestamp']
            # –ï—Å–ª–∏ –∫—ç—à —Å–≤–µ–∂–∏–π (–º–ª–∞–¥—à–µ CACHE_DURATION_HOURS —á–∞—Å–æ–≤)
            if datetime.now(timezone.utc).replace(tzinfo=None) - cache_timestamp < timedelta(hours=self.CACHE_DURATION_HOURS):
                logging.info(f"–ò—Å–ø–æ–ª—å–∑—É—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {cache_key}.")
                return cached_entry['data']

        params = {
            "id": self.city_id,
            "appid": self.api_key,
            "units": self.units,
            "lang": "ru" # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞ –≤ session.get
                for attempt in range(3):
                    try:
                        logging.info(f"–í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å –∫ OpenWeatherMap API –¥–ª—è {cache_key} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})...")
                        async with session.get(self.BASE_URL, params=params, timeout=aiohttp.ClientTimeout(total=5)) as response:
                            response.raise_for_status()
                            data = await response.json()
                            break
                    except asyncio.TimeoutError:
                        logging.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1})")
                        RETRIES_TOTAL.labels(component='weather').inc()
                    except aiohttp.ClientError as e:
                        logging.error(f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã: {e}")
                        ERRORS_TOTAL.labels(source='weather').inc()
                        return None
                    except Exception as e:
                        # –ù–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ aiohttp.raise_for_status –ø–æ–¥–Ω–∏–º–∞–µ—Ç ClientResponseError (–Ω–∞—Å–ª–µ–¥–Ω–∏–∫ ClientError),
                        # –Ω–æ –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –∏ –æ–±—â–∏–π Exception –∏–∑ —Ç–µ—Å—Ç–æ–≤/–º–æ–∫–æ–≤.
                        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã: {e}")
                        ERRORS_TOTAL.labels(source='weather').inc()
                        return None
                else:
                    logging.error("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –Ω–µ—É–¥–∞—á–µ–π.")
                    ERRORS_TOTAL.labels(source='weather').inc()
                    return None
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ø–æ–≥–æ–¥–Ω–æ–º—É API: {e}")
            ERRORS_TOTAL.labels(source='weather').inc()
            return None

        closest_forecast_item = None
        min_diff = timedelta(days=999)

        for forecast_item in data.get("list", []):
            forecast_utc_dt = datetime.fromtimestamp(forecast_item["dt"], tz=timezone.utc) # OWM –≤—Ä–µ–º—è –≤—Å–µ–≥–¥–∞ –≤ UTC
            
            # –ò—â–µ–º –ø—Ä–æ–≥–Ω–æ–∑, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–º –∂–µ 3-—á–∞—Å–æ–≤–æ–º –±–ª–æ–∫–µ, —á—Ç–æ –∏ target_datetime
            # –ò–ª–∏ –±–ª–∏–∂–∞–π—à–∏–π –≤ –±—É–¥—É—â–µ–º, –µ—Å–ª–∏ target_datetime –æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ –∫ –≥—Ä–∞–Ω–∏—Ü–µ –±–ª–æ–∫–∞
            if forecast_utc_dt.date() == target_utc_dt.date() and (forecast_utc_dt.hour // 3) * 3 == target_hour_rounded:
                closest_forecast_item = forecast_item
                break # –ù–∞—à–ª–∏ —Ç–æ—á–Ω—ã–π –±–ª–æ–∫, –¥–∞–ª—å—à–µ –Ω–µ –∏—â–µ–º
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω—ã–π –±–ª–æ–∫, –∏—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            time_diff = abs(target_utc_dt - forecast_utc_dt)
            if time_diff < min_diff:
                closest_forecast_item = forecast_item
                min_diff = time_diff


        if closest_forecast_item:
            weather_description = closest_forecast_item.get("weather", [{}])[0].get("description", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            temp = closest_forecast_item.get("main", {}).get("temp", "N/A")
            humidity = closest_forecast_item.get("main", {}).get("humidity", "N/A")
            wind_speed = closest_forecast_item.get("wind", {}).get("speed", "N/A")

            icon_code = closest_forecast_item.get("weather", [{}])[0].get("icon")
            emoji = self._get_weather_emoji(icon_code)

            result_data = {
                "temperature": round(temp),
                "description": weather_description,
                "emoji": emoji,
                "humidity": round(humidity),
                "wind_speed": round(wind_speed),
                "forecast_time": datetime.fromtimestamp(closest_forecast_item["dt"], tz=MOSCOW_TZ).strftime('%H:%M'),
            }
            self._cache[cache_key] = {'timestamp': datetime.now(timezone.utc).replace(tzinfo=None), 'data': result_data}
            return result_data
        return None

    def _get_weather_emoji(self, icon_code: str) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–æ–¥ –∏–∫–æ–Ω–∫–∏ OpenWeatherMap –≤ —ç–º–æ–¥–∑–∏."""
        if icon_code.startswith("01"): return "‚òÄÔ∏è" # Clear sky
        if icon_code.startswith("02"): return "üå§Ô∏è" # Few clouds
        if icon_code.startswith("03") or icon_code.startswith("04"): return "‚òÅÔ∏è" # Scattered / Broken clouds
        if icon_code.startswith("09") or icon_code.startswith("10"): return "üåßÔ∏è" # Shower rain / Rain
        if icon_code.startswith("11"): return "‚õàÔ∏è" # Thunderstorm
        if icon_code.startswith("13"): return "üå®Ô∏è" # Snow
        if icon_code.startswith("50"): return "üå´Ô∏è" # Mist / Fog
        return "‚ùì" # Unknown