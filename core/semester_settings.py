"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–µ–º–µ—Å—Ç—Ä–æ–≤.
"""

from datetime import date, datetime
from typing import Optional, Tuple
from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker
from sqlalchemy import select, update

from core.db.models import SemesterSettings


class SemesterSettingsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–µ–º–µ—Å—Ç—Ä–æ–≤."""
    
    def __init__(self, session_factory: async_sessionmaker):
        self.session_factory = session_factory
    
    async def get_semester_settings(self) -> Optional[Tuple[date, date]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–º–µ—Å—Ç—Ä–æ–≤.
        
        Returns:
            Tuple[date, date] | None: (fall_semester_start, spring_semester_start) –∏–ª–∏ None
        """
        async with self.session_factory() as session:
            result = await session.execute(
                select(SemesterSettings).order_by(SemesterSettings.id.desc()).limit(1)
            )
            settings = result.scalar_one_or_none()
            
            if settings:
                return settings.fall_semester_start, settings.spring_semester_start
            return None
    
    async def update_semester_settings(
        self, 
        fall_semester_start: date, 
        spring_semester_start: date, 
        updated_by: int
    ) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–º–µ—Å—Ç—Ä–æ–≤.
        
        Args:
            fall_semester_start: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞
            spring_semester_start: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤–µ—Å–µ–Ω–Ω–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞
            updated_by: Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
        """
        try:
            async with self.session_factory() as session:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                result = await session.execute(
                    select(SemesterSettings).order_by(SemesterSettings.id.desc()).limit(1)
                )
                existing_settings = result.scalar_one_or_none()
                
                if existing_settings:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    await session.execute(
                        update(SemesterSettings)
                        .where(SemesterSettings.id == existing_settings.id)
                        .values(
                            fall_semester_start=fall_semester_start,
                            spring_semester_start=spring_semester_start,
                            updated_at=datetime.now(),
                            updated_by=updated_by
                        )
                    )
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    new_settings = SemesterSettings(
                        fall_semester_start=fall_semester_start,
                        spring_semester_start=spring_semester_start,
                        updated_by=updated_by
                    )
                    session.add(new_settings)
                
                await session.commit()
                return True
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ–º–µ—Å—Ç—Ä–æ–≤: {e}")
            return False
    
    async def get_formatted_settings(self) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
        
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        """
        settings = await self.get_semester_settings()
        
        if settings:
            fall_start, spring_start = settings
            return (
                f"üìÖ <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–º–µ—Å—Ç—Ä–æ–≤:</b>\n\n"
                f"üçÇ <b>–û—Å–µ–Ω–Ω–∏–π —Å–µ–º–µ—Å—Ç—Ä:</b> {fall_start.strftime('%d.%m.%Y')}\n"
                f"üå∏ <b>–í–µ—Å–µ–Ω–Ω–∏–π —Å–µ–º–µ—Å—Ç—Ä:</b> {spring_start.strftime('%d.%m.%Y')}\n\n"
                f"<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç.</i>"
            )
        else:
            return (
                "‚ö†Ô∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–º–µ—Å—Ç—Ä–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:\n"
                "üçÇ <b>–û—Å–µ–Ω–Ω–∏–π —Å–µ–º–µ—Å—Ç—Ä:</b> 1 —Å–µ–Ω—Ç—è–±—Ä—è\n"
                "üå∏ <b>–í–µ—Å–µ–Ω–Ω–∏–π —Å–µ–º–µ—Å—Ç—Ä:</b> 9 —Ñ–µ–≤—Ä–∞–ª—è\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞—Ç."
            )
