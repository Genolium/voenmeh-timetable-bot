"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.
"""

import logging
from datetime import datetime, date
from typing import Dict, List, Optional, Tuple, Set, Any
from dataclasses import dataclass
from enum import Enum

logger = logging.getLogger(__name__)


class ChangeType(Enum):
    """–¢–∏–ø—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏."""
    LESSON_ADDED = "added"
    LESSON_REMOVED = "removed"
    TIME_CHANGED = "time_changed"
    ROOM_CHANGED = "room_changed"
    TEACHER_CHANGED = "teacher_changed"
    SUBJECT_CHANGED = "subject_changed"
    TYPE_CHANGED = "type_changed"


@dataclass
class LessonChange:
    """–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–∞—Ä–µ."""
    change_type: ChangeType
    lesson_id: str  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∞—Ä—ã (–≤—Ä–µ–º—è + –ø—Ä–µ–¥–º–µ—Ç)
    subject: str
    old_value: Optional[str] = None
    new_value: Optional[str] = None
    time: Optional[str] = None
    room: Optional[str] = None
    teacher: Optional[str] = None


@dataclass
class GroupScheduleDiff:
    """–†–∞–∑–ª–∏—á–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã."""
    group: str
    date: date
    changes: List[LessonChange]
    
    def has_changes(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è."""
        return len(self.changes) > 0


class ScheduleDiffDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏."""
    
    @staticmethod
    def _normalize_lesson(lesson: Dict[str, Any]) -> Dict[str, str]:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
        return {
            'time': lesson.get('time', '').strip(),
            'subject': lesson.get('subject', '').strip(),
            'type': lesson.get('type', '').strip(),
            'room': lesson.get('room', '').strip(),
            'teachers': lesson.get('teachers', '').strip(),
        }
    
    @staticmethod
    def _get_lesson_id(lesson: Dict[str, str]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∞—Ä—ã."""
        return f"{lesson['time']}_{lesson['subject']}"
    
    @classmethod
    def compare_day_schedules(
        cls, 
        old_schedule: Optional[Dict[str, Any]], 
        new_schedule: Optional[Dict[str, Any]]
    ) -> List[LessonChange]:
        """
        –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
        
        Args:
            old_schedule: –°—Ç–∞—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å
            new_schedule: –ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        """
        changes = []
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞–µ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        if not old_schedule or old_schedule.get('error'):
            old_lessons = []
        else:
            old_lessons = old_schedule.get('lessons', [])
            
        if not new_schedule or new_schedule.get('error'):
            new_lessons = []
        else:
            new_lessons = new_schedule.get('lessons', [])
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–∞—Ä—ã
        old_normalized = {cls._get_lesson_id(cls._normalize_lesson(lesson)): cls._normalize_lesson(lesson) 
                         for lesson in old_lessons}
        new_normalized = {cls._get_lesson_id(cls._normalize_lesson(lesson)): cls._normalize_lesson(lesson) 
                         for lesson in new_lessons}
        
        old_ids = set(old_normalized.keys())
        new_ids = set(new_normalized.keys())
        
        # –ù–∞–π–¥–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã
        added_ids = new_ids - old_ids
        for lesson_id in added_ids:
            lesson = new_normalized[lesson_id]
            changes.append(LessonChange(
                change_type=ChangeType.LESSON_ADDED,
                lesson_id=lesson_id,
                subject=lesson['subject'],
                time=lesson['time'],
                room=lesson['room'],
                teacher=lesson['teachers']
            ))
        
        # –ù–∞–π–¥–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã
        removed_ids = old_ids - new_ids
        for lesson_id in removed_ids:
            lesson = old_normalized[lesson_id]
            changes.append(LessonChange(
                change_type=ChangeType.LESSON_REMOVED,
                lesson_id=lesson_id,
                subject=lesson['subject'],
                time=lesson['time'],
                room=lesson['room'],
                teacher=lesson['teachers']
            ))
        
        # –ù–∞–π–¥–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ä–∞—Ö
        common_ids = old_ids & new_ids
        for lesson_id in common_ids:
            old_lesson = old_normalized[lesson_id]
            new_lesson = new_normalized[lesson_id]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–∞–∂–¥–æ–º –ø–æ–ª–µ
            if old_lesson['room'] != new_lesson['room']:
                changes.append(LessonChange(
                    change_type=ChangeType.ROOM_CHANGED,
                    lesson_id=lesson_id,
                    subject=new_lesson['subject'],
                    time=new_lesson['time'],
                    old_value=old_lesson['room'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞',
                    new_value=new_lesson['room'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'
                ))
            
            if old_lesson['teachers'] != new_lesson['teachers']:
                changes.append(LessonChange(
                    change_type=ChangeType.TEACHER_CHANGED,
                    lesson_id=lesson_id,
                    subject=new_lesson['subject'],
                    time=new_lesson['time'],
                    old_value=old_lesson['teachers'] or '–Ω–µ —É–∫–∞–∑–∞–Ω',
                    new_value=new_lesson['teachers'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'
                ))
            
            if old_lesson['type'] != new_lesson['type']:
                changes.append(LessonChange(
                    change_type=ChangeType.TYPE_CHANGED,
                    lesson_id=lesson_id,
                    subject=new_lesson['subject'],
                    time=new_lesson['time'],
                    old_value=old_lesson['type'] or '–Ω–µ —É–∫–∞–∑–∞–Ω',
                    new_value=new_lesson['type'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'
                ))
        
        return changes
    
    @classmethod
    def compare_group_schedules(
        cls,
        group: str,
        target_date: date,
        old_schedule_data: Optional[Dict[str, Any]],
        new_schedule_data: Optional[Dict[str, Any]]
    ) -> GroupScheduleDiff:
        """
        –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É.
        
        Args:
            group: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            target_date: –î–∞—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            old_schedule_data: –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            new_schedule_data: –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            
        Returns:
            –û–±—ä–µ–∫—Ç —Å —Ä–∞–∑–ª–∏—á–∏—è–º–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        """
        changes = cls.compare_day_schedules(old_schedule_data, new_schedule_data)
        
        return GroupScheduleDiff(
            group=group,
            date=target_date,
            changes=changes
        )


class ScheduleDiffFormatter:
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏."""
    
    CHANGE_ICONS = {
        ChangeType.LESSON_ADDED: "‚ûï",
        ChangeType.LESSON_REMOVED: "‚ùå",
        ChangeType.TIME_CHANGED: "‚è∞",
        ChangeType.ROOM_CHANGED: "üìç",
        ChangeType.TEACHER_CHANGED: "üßë‚Äçüè´",
        ChangeType.SUBJECT_CHANGED: "üìö",
        ChangeType.TYPE_CHANGED: "üîÑ",
    }
    
    CHANGE_DESCRIPTIONS = {
        ChangeType.LESSON_ADDED: "–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞—Ä–∞",
        ChangeType.LESSON_REMOVED: "–û—Ç–º–µ–Ω–µ–Ω–∞ –ø–∞—Ä–∞",
        ChangeType.TIME_CHANGED: "–ò–∑–º–µ–Ω–µ–Ω–æ –≤—Ä–µ–º—è",
        ChangeType.ROOM_CHANGED: "–ò–∑–º–µ–Ω–µ–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è",
        ChangeType.TEACHER_CHANGED: "–ò–∑–º–µ–Ω–µ–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",
        ChangeType.SUBJECT_CHANGED: "–ò–∑–º–µ–Ω–µ–Ω –ø—Ä–µ–¥–º–µ—Ç",
        ChangeType.TYPE_CHANGED: "–ò–∑–º–µ–Ω–µ–Ω —Ç–∏–ø –ø–∞—Ä—ã",
    }
    
    @classmethod
    def format_change(cls, change: LessonChange) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç."""
        icon = cls.CHANGE_ICONS.get(change.change_type, "üîÑ")
        description = cls.CHANGE_DESCRIPTIONS.get(change.change_type, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ")
        
        if change.change_type == ChangeType.LESSON_ADDED:
            parts = [f"<b>{change.subject}</b>"]
            if change.time:
                parts.append(f"–≤ <b>{change.time}</b>")
            if change.room:
                parts.append(f"üìç {change.room}")
            if change.teacher:
                parts.append(f"üßë‚Äçüè´ {change.teacher}")
            return f"{icon} {description}: {' '.join(parts)}"
        
        elif change.change_type == ChangeType.LESSON_REMOVED:
            parts = [f"<b>{change.subject}</b>"]
            if change.time:
                parts.append(f"–≤ <b>{change.time}</b>")
            return f"{icon} {description}: {' '.join(parts)}"
        
        else:  # –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ä–∞—Ö
            base = f"{icon} {description} –¥–ª—è <b>{change.subject}</b>"
            if change.time:
                base += f" –≤ <b>{change.time}</b>"
            
            if change.old_value and change.new_value:
                base += f": <i>{change.old_value}</i> ‚Üí <b>{change.new_value}</b>"
            
            return base
    
    @classmethod
    def format_group_diff(cls, diff: GroupScheduleDiff) -> Optional[str]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
        
        Args:
            diff: –†–∞–∑–ª–∏—á–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ None, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç
        """
        if not diff.has_changes():
            return None
        
        date_str = diff.date.strftime('%d.%m.%Y')
        header = f"üîî <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ {diff.group}</b>\nüìÖ <b>{date_str}</b>\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        changes_by_type = {}
        for change in diff.changes:
            if change.change_type not in changes_by_type:
                changes_by_type[change.change_type] = []
            changes_by_type[change.change_type].append(change)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        formatted_changes = []
        for change_type in [ChangeType.LESSON_ADDED, ChangeType.LESSON_REMOVED, 
                           ChangeType.TIME_CHANGED, ChangeType.ROOM_CHANGED, 
                           ChangeType.TEACHER_CHANGED, ChangeType.TYPE_CHANGED]:
            if change_type in changes_by_type:
                for change in changes_by_type[change_type]:
                    formatted_changes.append(cls.format_change(change))
        
        if not formatted_changes:
            return None
        
        message = header + "\n".join(formatted_changes)
        message += "\n\n<i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –±–æ—Ç–µ</i>"
        
        return message
