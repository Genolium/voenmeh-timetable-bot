"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á—ë—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
"""

import json
import logging
from datetime import datetime, timedelta, timezone
from typing import Any, Dict, List, Optional

from aiogram import Bot
from aiogram.types import InputFile

from core.config import MOSCOW_TZ
from core.metrics import (
    ERRORS_TOTAL,
    LAST_SCHEDULE_UPDATE_TS,
    RETRIES_TOTAL,
    SUBSCRIBED_USERS,
    TASKS_SENT_TO_QUEUE,
    USERS_TOTAL,
)
from core.user_data import UserDataManager

logger = logging.getLogger(__name__)


class AdminReportsGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á—ë—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""

    def __init__(self, bot: Bot, user_data_manager: UserDataManager):
        self.bot = bot
        self.user_data_manager = user_data_manager

    async def generate_daily_report(self) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –±–æ—Ç–∞.

        Returns:
            –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            (
                total_users,
                dau,
                wau,
                mau,
                subscribed_total,
                unsubscribed_total,
                subs_breakdown,
                top_groups,
                group_dist,
            ) = await self.user_data_manager.gather_stats()

            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ Prometheus (–º–æ–∫–∞–µ–º –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
            prometheus_metrics = await self._get_prometheus_metrics()

            # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
            today = datetime.now(MOSCOW_TZ).strftime("%d.%m.%Y")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
            report = self._format_daily_report(
                today,
                total_users,
                dau,
                wau,
                mau,
                subscribed_total,
                unsubscribed_total,
                subs_breakdown,
                top_groups,
                group_dist,
                prometheus_metrics,
            )

            return report

        except Exception as e:
            logger.error(f"Error generating daily report: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."

    async def generate_weekly_report(self) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –±–æ—Ç–∞.

        Returns:
            –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
            week_ago = datetime.now(MOSCOW_TZ) - timedelta(days=7)
            new_users_week = await self.user_data_manager.get_new_users_count(7)
            active_users_week = await self.user_data_manager.get_active_users_by_period(7)

            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            (
                total_users,
                dau,
                wau,
                mau,
                subscribed_total,
                unsubscribed_total,
                subs_breakdown,
                top_groups,
                group_dist,
            ) = await self.user_data_manager.gather_stats()

            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ Prometheus –∑–∞ –Ω–µ–¥–µ–ª—é
            prometheus_metrics = await self._get_prometheus_metrics_weekly()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
            report = self._format_weekly_report(
                new_users_week,
                active_users_week,
                total_users,
                subscribed_total,
                top_groups,
                prometheus_metrics,
            )

            return report

        except Exception as e:
            logger.error(f"Error generating weekly report: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."

    async def generate_monthly_report(self) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –±–æ—Ç–∞.

        Returns:
            –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü
            month_ago = datetime.now(MOSCOW_TZ) - timedelta(days=30)
            new_users_month = await self.user_data_manager.get_new_users_count(30)
            active_users_month = await self.user_data_manager.get_active_users_by_period(30)

            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            (
                total_users,
                dau,
                wau,
                mau,
                subscribed_total,
                unsubscribed_total,
                subs_breakdown,
                top_groups,
                group_dist,
            ) = await self.user_data_manager.gather_stats()

            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ Prometheus –∑–∞ –º–µ—Å—è—Ü
            prometheus_metrics = await self._get_prometheus_metrics_monthly()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
            report = self._format_monthly_report(
                new_users_month,
                active_users_month,
                total_users,
                subscribed_total,
                top_groups,
                prometheus_metrics,
            )

            return report

        except Exception as e:
            logger.error(f"Error generating monthly report: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."

    async def _get_prometheus_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ Prometheus –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞."""
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Prometheus API
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        return {
            "tasks_sent": 150,
            "errors_count": 2,
            "retries_count": 5,
            "schedule_updates": 3,
            "last_update": datetime.now(MOSCOW_TZ).strftime("%d.%m.%Y %H:%M"),
        }

    async def _get_prometheus_metrics_weekly(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ Prometheus –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é."""
        return {
            "tasks_sent_total": 1050,
            "errors_total": 14,
            "retries_total": 35,
            "schedule_updates": 21,
            "peak_activity": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 08:00-09:00",
        }

    async def _get_prometheus_metrics_monthly(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ Prometheus –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü."""
        return {
            "tasks_sent_total": 4200,
            "errors_total": 56,
            "retries_total": 140,
            "schedule_updates": 90,
            "avg_daily_users": 1250,
            "top_features": ["schedule_view", "settings", "feedback"],
        }

    def _format_daily_report(
        self,
        today: str,
        total_users: int,
        dau: int,
        wau: int,
        mau: int,
        subscribed_total: int,
        unsubscribed_total: int,
        subs_breakdown: Dict[str, int],
        top_groups: List[tuple],
        group_dist: Dict[str, int],
        prometheus_metrics: Dict[str, Any],
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç."""

        top_groups_text = "\n".join([f"  ‚Ä¢ {g or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}: {c} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" for g, c in top_groups[:5]])
        if not top_groups_text:
            top_groups_text = "  ‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        subs_breakdown_text = (
            f"  ‚Ä¢ –í–µ—á–µ—Ä–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {subs_breakdown.get('evening', 0)}\n"
            f"  ‚Ä¢ –£—Ç—Ä–µ–Ω–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {subs_breakdown.get('morning', 0)}\n"
            f"  ‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–∞—Ä–∞—Ö: {subs_breakdown.get('reminders', 0)}"
        )

        group_dist_text = "\n".join([f"  ‚Ä¢ {category}: {count} –≥—Ä—É–ø–ø" for category, count in group_dist.items()])
        if not group_dist_text:
            group_dist_text = "  ‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        report = f"""üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –±–æ—Ç—É</b>
üìÖ {today}

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>
  ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>
  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å: <b>{dau}</b>
  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: <b>{wau}</b>
  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü: <b>{mau}</b>

üîî <b>–ü–æ–¥–ø–∏—Å–∫–∏</b>
  ‚Ä¢ –° –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏: <b>{subscribed_total}</b>
  ‚Ä¢ –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å: <b>{unsubscribed_total}</b>
  <b>–†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º:</b>
{subs_breakdown_text}

üéì <b>–¢–æ–ø-5 –≥—Ä—É–ø–ø</b>
{top_groups_text}

üìà <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É –≥—Ä—É–ø–ø</b>
{group_dist_text}

‚ö° <b>–ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã (24—á)</b>
  ‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: <b>{prometheus_metrics.get('tasks_sent', 0)}</b>
  ‚Ä¢ –û—à–∏–±–æ–∫: <b>{prometheus_metrics.get('errors_count', 0)}</b>
  ‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: <b>{prometheus_metrics.get('retries_count', 0)}</b>
  ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: <b>{prometheus_metrics.get('schedule_updates', 0)}</b>
  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <b>{prometheus_metrics.get('last_update', 'N/A')}</b>

<i>–û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>
"""
        return report

    def _format_weekly_report(
        self,
        new_users_week: int,
        active_users_week: int,
        total_users: int,
        subscribed_total: int,
        top_groups: List[tuple],
        prometheus_metrics: Dict[str, Any],
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç."""

        top_groups_text = "\n".join([f"  ‚Ä¢ {g or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}: {c} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" for g, c in top_groups[:5]])
        if not top_groups_text:
            top_groups_text = "  ‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        report = f"""üìä <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –±–æ—Ç—É</b>
üìÖ {datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y')}

üìà <b>–ü—Ä–∏—Ä–æ—Å—Ç –∑–∞ –Ω–µ–¥–µ–ª—é</b>
  ‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{new_users_week}</b>
  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{active_users_week}</b>
  ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>

üîî <b>–ü–æ–¥–ø–∏—Å–∫–∏</b>
  ‚Ä¢ –° –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏: <b>{subscribed_total}</b>

üéì <b>–¢–æ–ø-5 –≥—Ä—É–ø–ø</b>
{top_groups_text}

‚ö° <b>–ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã (7 –¥–Ω–µ–π)</b>
  ‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: <b>{prometheus_metrics.get('tasks_sent_total', 0)}</b>
  ‚Ä¢ –û—à–∏–±–æ–∫: <b>{prometheus_metrics.get('errors_total', 0)}</b>
  ‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: <b>{prometheus_metrics.get('retries_total', 0)}</b>
  ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: <b>{prometheus_metrics.get('schedule_updates', 0)}</b>
  ‚Ä¢ –ü–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: <b>{prometheus_metrics.get('peak_activity', 'N/A')}</b>

<i>–û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>
"""
        return report

    def _format_monthly_report(
        self,
        new_users_month: int,
        active_users_month: int,
        total_users: int,
        subscribed_total: int,
        top_groups: List[tuple],
        prometheus_metrics: Dict[str, Any],
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç."""

        top_groups_text = "\n".join([f"  ‚Ä¢ {g or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}: {c} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" for g, c in top_groups[:5]])
        if not top_groups_text:
            top_groups_text = "  ‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        report = f"""üìä <b>–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –±–æ—Ç—É</b>
üìÖ {datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y')}

üìà <b>–ü—Ä–∏—Ä–æ—Å—Ç –∑–∞ –º–µ—Å—è—Ü</b>
  ‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{new_users_month}</b>
  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{active_users_month}</b>
  ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>

üîî <b>–ü–æ–¥–ø–∏—Å–∫–∏</b>
  ‚Ä¢ –° –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏: <b>{subscribed_total}</b>

üéì <b>–¢–æ–ø-5 –≥—Ä—É–ø–ø</b>
{top_groups_text}

‚ö° <b>–ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã (30 –¥–Ω–µ–π)</b>
  ‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: <b>{prometheus_metrics.get('tasks_sent_total', 0)}</b>
  ‚Ä¢ –û—à–∏–±–æ–∫: <b>{prometheus_metrics.get('errors_total', 0)}</b>
  ‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: <b>{prometheus_metrics.get('retries_total', 0)}</b>
  ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: <b>{prometheus_metrics.get('schedule_updates', 0)}</b>
  ‚Ä¢ –°—Ä–µ–¥–Ω–µ—Å—É—Ç–æ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: <b>{prometheus_metrics.get('avg_daily_users', 0)}</b>

üèÜ <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</b>
  ‚Ä¢ {', '.join(prometheus_metrics.get('top_features', ['–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö']))}

<i>–û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>
"""
        return report


async def send_daily_reports(bot: Bot, user_data_manager: UserDataManager) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
    try:
        generator = AdminReportsGenerator(bot, user_data_manager)
        report = await generator.generate_daily_report()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_ids = await user_data_manager.get_admin_users()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        for admin_id in admin_ids:
            try:
                await bot.send_message(chat_id=admin_id, text=report, parse_mode="HTML")
                logger.info(f"Daily report sent to admin {admin_id}")
            except Exception as e:
                logger.error(f"Failed to send daily report to admin {admin_id}: {e}")

    except Exception as e:
        logger.error(f"Error in send_daily_reports: {e}")


async def send_weekly_reports(bot: Bot, user_data_manager: UserDataManager) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
    try:
        generator = AdminReportsGenerator(bot, user_data_manager)
        report = await generator.generate_weekly_report()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_ids = await user_data_manager.get_admin_users()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        for admin_id in admin_ids:
            try:
                await bot.send_message(chat_id=admin_id, text=report, parse_mode="HTML")
                logger.info(f"Weekly report sent to admin {admin_id}")
            except Exception as e:
                logger.error(f"Failed to send weekly report to admin {admin_id}: {e}")

    except Exception as e:
        logger.error(f"Error in send_weekly_reports: {e}")


async def send_monthly_reports(bot: Bot, user_data_manager: UserDataManager) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
    try:
        generator = AdminReportsGenerator(bot, user_data_manager)
        report = await generator.generate_monthly_report()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_ids = await user_data_manager.get_admin_users()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        for admin_id in admin_ids:
            try:
                await bot.send_message(chat_id=admin_id, text=report, parse_mode="HTML")
                logger.info(f"Monthly report sent to admin {admin_id}")
            except Exception as e:
                logger.error(f"Failed to send monthly report to admin {admin_id}: {e}")

    except Exception as e:
        logger.error(f"Error in send_monthly_reports: {e}")
