#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
"""
import asyncio
import sys
from pathlib import Path
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent))

from core.image_generator import generate_schedule_image

def create_test_schedule_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–∂–∏–¥–∞–µ–º–æ–º image_generator"""
    return {
        "–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö": [
            {
                "subject": "–§–ò–ó–ò–ö–ê",
                "type": "–ª–∞–±",
                "room": "322",
                "time": "9:00 - 10:30",
                "start_time_raw": "9:00"
            },
            {
                "subject": "–°–ò–°–¢–ï–ú–ù–û–ï –ü–û",
                "type": "",
                "room": "325*",
                "time": "10:50 - 12:20",
                "start_time_raw": "10:50"
            },
            {
                "subject": "–û–°–ù.–°–ò–°–¢.–ê–ù.",
                "type": "–ø—Ä",
                "room": "259",
                "time": "12:40 - 14:10",
                "start_time_raw": "12:40"
            },
            {
                "subject": "–°–ò–°–¢–ï–ú–ù–û–ï –ü–û",
                "type": "–ø—Ä",
                "room": "265",
                "time": "14:55 - 16:25",
                "start_time_raw": "14:55"
            },
            {
                "subject": "–¢–û–≠",
                "type": "",
                "room": "429",
                "time": "16:45 - 18:15",
                "start_time_raw": "16:45"
            }
        ],
        "–í–¢–û–†–ù–ò–ö": [
            {
                "subject": "–ú–ê–¢–ï–ú–ê–¢–ò–ö–ê",
                "type": "–ª–µ–∫",
                "room": "101",
                "time": "9:00 - 10:30",
                "start_time_raw": "9:00"
            }
        ],
        "–°–†–ï–î–ê": [
            {
                "subject": "–§–ò–ó–ò–ö–ê",
                "type": "–ª–µ–∫",
                "room": "201",
                "time": "10:50 - 12:20",
                "start_time_raw": "10:50"
            }
        ],
        "–ß–ï–¢–í–ï–†–ì": [],
        "–ü–Ø–¢–ù–ò–¶–ê": [
            {
                "subject": "–°–ò–°–¢–ï–ú–ù–û–ï –ü–û",
                "type": "–ª–∞–±",
                "room": "301",
                "time": "12:40 - 14:10",
                "start_time_raw": "12:40"
            }
        ],
        "–°–£–ë–ë–û–¢–ê": []
    }

def print_progress_bar(current: int, total: int, prefix: str = "–ü—Ä–æ–≥—Ä–µ—Å—Å", suffix: str = "", length: int = 50):
    """–í—ã–≤–æ–¥–∏—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤ –∫–æ–Ω—Å–æ–ª—å."""
    filled_length = int(length * current // total)
    bar = '‚ñà' * filled_length + '-' * (length - filled_length)
    percent = f"{100 * current // total}%"
    print(f'\r{prefix} |{bar}| {percent} {suffix}', end='', flush=True)
    if current == total:
        print()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –∫–æ–Ω—Ü–µ

async def test_all_themes():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–µ–º."""

    # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã
    themes = [
        ('standard', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è'),
        ('light', '–°–≤–µ—Ç–ª–∞—è'),
        ('dark', '–¢—ë–º–Ω–∞—è'),
        ('classic', '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è'),
        ('coffee', '–ö–æ—Ñ–µ–π–Ω–∞—è')
    ]

    # –¢–∏–ø—ã –Ω–µ–¥–µ–ª—å
    week_types = [
        ('–ù–µ—á—ë—Ç–Ω–∞—è', 'odd'),
        ('–ß—ë—Ç–Ω–∞—è', 'even')
    ]

    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    schedule_data = create_test_schedule_data()
    group = "–ò–ö–ë–û-01-23"

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    output_dir = Path("generated_images") / "themes_test"
    output_dir.mkdir(parents=True, exist_ok=True)

    total_images = len(themes) * len(week_types)
    current_image = 0

    print(f"üé® –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {total_images} —Ç–µ–º ({len(themes)} —Ç–µ–º √ó {len(week_types)} –Ω–µ–¥–µ–ª—å)...\n")

    for theme_id, theme_name in themes:
        for week_name, week_slug in week_types:
            current_image += 1

            filename = f"test_{theme_id}_{week_slug}.png"
            output_path = output_dir / filename

            print_progress_bar(current_image, total_images, f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º", f"{current_image}/{total_images} ({theme_name}, {week_name})")

            try:
                success = await generate_schedule_image(
                    schedule_data=schedule_data,
                    week_type=week_name,
                    group=group,
                    output_path=str(output_path),
                    user_theme=theme_id
                )

                if success and output_path.exists():
                    file_size = output_path.stat().st_size / (1024 * 1024)
                    print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {filename} ({file_size:.2f} MB) - {theme_name}")
                else:
                    print(f"\n‚ùå –û—à–∏–±–∫–∞: {filename} - {theme_name}")

            except Exception as e:
                print(f"\n‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {filename} - {theme_name}: {e}")

    print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {current_image}")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir.absolute()}")

if __name__ == "__main__":
    asyncio.run(test_all_themes())
