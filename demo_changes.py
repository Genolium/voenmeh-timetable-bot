#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–º–∞–Ω–¥–µ /events
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
"""

import asyncio
from unittest.mock import AsyncMock, MagicMock
from datetime import datetime

async def demo_events_changes():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥–µ /events"""
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –ö–û–ú–ê–ù–î–ï /events")
    print("=" * 60)

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    from bot.dialogs.events_menu import get_events_for_user, _filter_skip_words
    from bot.dialogs.admin_menu import get_events_list

    print("‚úÖ –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")

    # –¢–µ—Å—Ç 1: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–ª–æ–≤
    print("\nüìù –¢–ï–°–¢ –§–ò–õ–¨–¢–†–ê–¶–ò–ò –°–õ–£–ñ–ï–ë–ù–´–• –°–õ–û–í:")
    skip_words = {
        '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip', '–æ—Ç–º–µ–Ω–∞', 'cancel', '–Ω–µ—Ç', 'no',
        '-', '‚Äî', '‚Äì', '.', '–ø—É—Å—Ç–æ', 'empty', 'null'
    }

    test_titles = [
        "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ",
        "Skip —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ",
        "–û—Ç–º–µ–Ω–∞ –ø–ª–∞–Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏",
        "Cancel meeting",
        "–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å–µ–≥–æ–¥–Ω—è",
        "Normal event without skip words"
    ]

    for title in test_titles:
        filtered = _filter_skip_words(title, skip_words)
        print(f"   üìå '{title}' ‚Üí '{filtered}'")

    print("\n‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    print("\n‚è∞ –¢–ï–°–¢ –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ü–û –í–†–ï–ú–ï–ù–ò:")

    mock_manager = MagicMock()
    mock_manager.middleware_data = {'session_factory': AsyncMock()}
    mock_manager.dialog_data = {'time_filter': None, 'page': 0}

    from unittest.mock import patch
    with patch('bot.dialogs.events_menu.EventsManager') as mock_events_manager:
        mock_instance = AsyncMock()
        mock_events_manager.return_value = mock_instance
        mock_instance.list_events.return_value = ([], 0)

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        result = await get_events_for_user(mock_manager)
        call_args = mock_instance.list_events.call_args

        print(f"   üìå from_now_only: {call_args[1]['from_now_only']}")
        print(f"   üìå now –ø–∞—Ä–∞–º–µ—Ç—Ä: {call_args[1]['now'] is not None}")
        print("   ‚úÖ –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!")

    # –¢–µ—Å—Ç 3: –ê–¥–º–∏–Ω-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    print("\nüë®‚Äçüíº –¢–ï–°–¢ –ê–î–ú–ò–ù-–ò–ù–¢–ï–†–§–ï–ô–°–ê:")

    def mock_get_side_effect(key, default=0):
        if key == 'events_page': return 0
        elif key == 'events_pub_filter': return 'all'
        elif key == 'events_search': return ''
        return default

    mock_manager.dialog_data = MagicMock()
    mock_manager.dialog_data.get.side_effect = mock_get_side_effect

    with patch('bot.dialogs.admin_menu.EventsManager') as mock_events_manager:
        mock_instance = AsyncMock()
        mock_events_manager.return_value = mock_instance

        mock_event = MagicMock()
        mock_event.title = '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'
        mock_event.is_published = True
        mock_event.id = 1

        mock_instance.list_events.return_value = ([mock_event], 1)

        result = await get_events_list(mock_manager)
        call_args = mock_instance.list_events.call_args
        events_text = result['events_text']

        print(f"   üìå from_now_only: {call_args[1]['from_now_only']}")
        print(f"   üìå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∞–¥–º–∏–Ω–∫–µ: '{events_text}'")
        print("   ‚úÖ –ê–¥–º–∏–Ω-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–æ–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω!")

    print("\n" + "=" * 60)
    print("üéâ –í–°–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
    print("\nüìã –ß–¢–û –ò–ó–ú–ï–ù–ò–õ–û–°–¨:")
    print("   ‚Ä¢ –ö–Ω–æ–ø–∫–∞ '–í—Å–µ' —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¢–û–õ–¨–ö–û –±—É–¥—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    print("   ‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—á–∏—â–µ–Ω—ã –æ—Ç —Å–ª–æ–≤: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '–û—Ç–º–µ–Ω–∞', 'Skip' –∏ —Ç.–¥.")
    print("   ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –∏ –∞–¥–º–∏–Ω-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É")

    print("\nüöÄ –î–õ–Ø –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô:")
    print("   1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–æ—Ç–∞ (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω)")
    print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å–Ω–æ–≤–∞:")
    print("      python main.py")
    print("   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /events –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")

if __name__ == "__main__":
    asyncio.run(demo_events_changes())
