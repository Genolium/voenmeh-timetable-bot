version: '3.8' 

services:
  bot:
    build: 
      context: . 
      dockerfile: Dockerfile 
    container_name: voenmeh_bot
    working_dir: /app
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      logstash:
        condition: service_healthy 
      migrator:
        condition: service_completed_successfully
    restart: unless-stopped
    command: python main.py
    logging:
      driver: gelf
      options:
        gelf-address: "udp://logstash:12201" 
        tag: "voenmeh-bot" 

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: voenmeh_worker
    working_dir: /app
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_started
      db:
        condition: service_healthy
      logstash:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully
    restart: unless-stopped
    command: python -m dramatiq bot.tasks 
    logging:
      driver: gelf
      options:
        gelf-address: "udp://logstash:12201" 
        tag: "voenmeh-worker" 

  redis:
    image: redis:7-alpine
    container_name: voenmeh_redis
    volumes:
      - redis_data:/data
    env_file: 
      - .env
    command: redis-server --requirepass ${REDIS_PASSWORD}
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    container_name: voenmeh_postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  migrator:
    build:
      context: .
      dockerfile: Dockerfile 
    container_name: voenmeh_migrator
    working_dir: /app
    env_file:
      - .env 
    depends_on:
      db:
        condition: service_healthy
    command: sh -c "alembic upgrade head && python migrate_data.py" 
    restart: "no"

  prometheus:
    image: prom/prometheus:v2.53.0
    container_name: voenmeh_prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090" 
    depends_on:
      - bot
    restart: unless-stopped

  grafana:
    image: grafana/grafana:11.1.0
    container_name: voenmeh_grafana
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000" 
    depends_on:
      - prometheus
    restart: unless-stopped
    
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.0
    container_name: voenmeh_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false 
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped

  logstash:
    build:
      context: ./elk-stack/logstash 
      dockerfile: Dockerfile
    container_name: voenmeh_logstash
    ports:
      - "5044:5044"
      - "12201:12201/udp"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:9600/_node/stats/pipelines?pretty"]
      interval: 10s       
      timeout: 5s         
      retries: 60         
      start_period: 60s   

  kibana:
    build:
      context: ./elk-stack/kibana 
      dockerfile: Dockerfile
    container_name: voenmeh_kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:
  elasticsearch_data: