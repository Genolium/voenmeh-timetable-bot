version: '3.8'

x-base-app-build: &base-app-build
  build:
    context: .
    dockerfile: Dockerfile

x-base-app-service: &base-app-service
  <<: *base-app-build
  working_dir: /app
  env_file:
    - .env
  restart: unless-stopped
  volumes:
    - ./data:/app/data

services:
  bot:
    <<: *base-app-service
    container_name: voenmeh_bot
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully
    command: python main.py

  worker:
    <<: *base-app-service
    container_name: voenmeh_worker
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully
    command: python -m dramatiq bot.tasks 

  migrator:
    <<: *base-app-service
    container_name: voenmeh_migrator
    depends_on:
      db:
        condition: service_healthy
    command: sh -c "python -m alembic upgrade head && python migrate_data.py"
    restart: "no"

  db:
    image: postgres:15-alpine
    container_name: voenmeh_postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: voenmeh_redis
    volumes:
      - redis_data:/data
    env_file: 
      - .env
    command: redis-server --requirepass ${REDIS_PASSWORD}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:v2.53.0
    container_name: voenmeh_prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090" 
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - bot
    restart: unless-stopped
    
  grafana:
    image: grafana/grafana:11.1.0
    container_name: voenmeh_grafana
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000" 
    env_file:
      - .env
    depends_on:
      - prometheus
      - db
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data: