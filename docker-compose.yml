version: '3.8'

x-base-app-build: &base-app-build
  build:
    context: .
    dockerfile: Dockerfile

x-base-app-service: &base-app-service
  <<: *base-app-build
  working_dir: /app
  env_file:
    - .env
  restart: unless-stopped
  volumes:
    - ./data:/app/data

services:
  bot:
    <<: *base-app-service
    container_name: voenmeh_bot
    ports:
      - "8000:8000"
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
    command: python main.py
    healthcheck:
      test: ["CMD", "pgrep", "python"]
      interval: 30s
      timeout: 10s
      retries: 3

  worker:
    <<: *base-app-service
    container_name: voenmeh_worker
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
    command: python -m dramatiq --processes 3 bot.tasks 

  db:
    image: postgres:15-alpine
    container_name: voenmeh_postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file: [ .env ]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: voenmeh_redis
    volumes:
      - redis_data:/data
    env_file: [ .env ]
    command: redis-server --requirepass ${REDIS_PASSWORD}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: voenmeh_rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"  # AMQP port
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-guest}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:v2.53.0
    container_name: voenmeh_prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alerting_rules.yml:/etc/prometheus/alerting_rules.yml:ro
      - prometheus_data:/prometheus
    ports: [ "9090:9090" ]
    command: [ '--config.file=/etc/prometheus/prometheus.yml' ]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "prometheus"]
      interval: 30s
      timeout: 10s
      retries: 3
    
  grafana:
    image: grafana/grafana:11.1.0
    container_name: voenmeh_grafana
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana_data:/var/lib/grafana
    ports: [ "3000:3000" ]
    env_file: [ .env ]
    environment:
      - GF_ALERTING_ENABLED=true
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "grafana"]
      interval: 30s
      timeout: 10s
      retries: 3

  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: voenmeh_alertmanager
    ports: [ "9093:9093" ]
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    command: [ '--config.file=/etc/alertmanager/alertmanager.yml' ]
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.0
    container_name: voenmeh_loki
    command: ["-config.file=/etc/loki/local-config.yaml", "-config.expand-env=true"]
    ports:
      - "3100:3100"
    volumes:
      - ./loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.9.0
    container_name: voenmeh_promtail
    command: ["-config.file=/etc/promtail/config.yml", "-config.expand-env=true"]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # Даем доступ к логам Docker
      - ./promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - promtail_data:/var/lib/promtail/positions # Сохраняем позицию чтения логов
    depends_on:
      - loki
    restart: unless-stopped

  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: voenmeh_node_exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "node_exporter"]
      interval: 30s
      timeout: 10s
      retries: 3

  pgadmin:
    image: dpage/pgadmin4:9.6
    container_name: voenmeh_pgadmin
    env_file: [ .env ]
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@voenmeh.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
      PGADMIN_SERVER_JSON_FILE: '/var/lib/pgadmin/servers.json'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin/servers.json.template:/pgadmin4/servers.json.template:ro
    entrypoint: >
      /bin/sh -c "
        sed 's/$${POSTGRES_DB}/'\"$$POSTGRES_DB\"'/g; s/$${POSTGRES_USER}/'\"$$POSTGRES_USER\"'/g' /pgadmin4/servers.json.template > /var/lib/pgadmin/servers.json &&
        chmod 644 /var/lib/pgadmin/servers.json &&
        /entrypoint.sh
      "
    depends_on:
      db: { condition: service_healthy }
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:
  loki_data:       
  promtail_data:
  pgadmin_data:
  rabbitmq_data:
